{"version":3,"file":"sort.js","sources":["../../packages/material/sort/sort-errors.js","../../packages/material/sort/sort.js","../../packages/material/sort/sort-header-intl.js","../../packages/material/sort/sort-header.js","../../packages/material/sort/sort-module.js","../../packages/material/sort/public-api.js","../../packages/material/sort/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nexport function getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n//# sourceMappingURL=sort-errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, EventEmitter, Input, isDevMode, Output, } from \"@angular/core\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { mixinDisabled } from \"@angular/material/core\";\nimport { getSortInvalidDirectionError, getSortDuplicateSortableIdError, getSortHeaderMissingIdError } from \"./sort-errors\";\nimport { Subject } from \"rxjs/Subject\";\n/**\n * Interface for a directive that holds sorting state consumed by `MatSortHeader`.\n * @record\n */\nexport function MatSortable() { }\nfunction MatSortable_tsickle_Closure_declarations() {\n    /**\n     * The id of the column being sorted.\n     * @type {?}\n     */\n    MatSortable.prototype.id;\n    /**\n     * Starting sort direction.\n     * @type {?}\n     */\n    MatSortable.prototype.start;\n    /**\n     * Whether to disable clearing the sorting state.\n     * @type {?}\n     */\n    MatSortable.prototype.disableClear;\n}\n/**\n * The current sort state.\n * @record\n */\nexport function Sort() { }\nfunction Sort_tsickle_Closure_declarations() {\n    /**\n     * The id of the column being sorted.\n     * @type {?}\n     */\n    Sort.prototype.active;\n    /**\n     * The sort direction.\n     * @type {?}\n     */\n    Sort.prototype.direction;\n}\n/**\n * \\@docs-private\n */\nexport class MatSortBase {\n}\nexport const /** @type {?} */ _MatSortMixinBase = mixinDisabled(MatSortBase);\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nexport class MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.next({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            },] },\n];\n/** @nocollapse */\nMatSort.ctorParameters = () => [];\nMatSort.propDecorators = {\n    \"active\": [{ type: Input, args: ['matSortActive',] },],\n    \"start\": [{ type: Input, args: ['matSortStart',] },],\n    \"direction\": [{ type: Input, args: ['matSortDirection',] },],\n    \"disableClear\": [{ type: Input, args: ['matSortDisableClear',] },],\n    \"sortChange\": [{ type: Output, args: ['matSortChange',] },],\n};\nfunction MatSort_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatSort.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatSort.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatSort.propDecorators;\n    /**\n     * Collection of all registered sortables that this directive manages.\n     * @type {?}\n     */\n    MatSort.prototype.sortables;\n    /**\n     * Used to notify any child components listening to state changes.\n     * @type {?}\n     */\n    MatSort.prototype._stateChanges;\n    /**\n     * The id of the most recently sorted MatSortable.\n     * @type {?}\n     */\n    MatSort.prototype.active;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     * @type {?}\n     */\n    MatSort.prototype.start;\n    /** @type {?} */\n    MatSort.prototype._direction;\n    /** @type {?} */\n    MatSort.prototype._disableClear;\n    /**\n     * Event emitted when the user changes either the active sort or sort direction.\n     * @type {?}\n     */\n    MatSort.prototype.sortChange;\n}\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    let /** @type {?} */ sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n//# sourceMappingURL=sort.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, SkipSelf, Optional } from \"@angular/core\";\nimport { Subject } from \"rxjs/Subject\";\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (id) => {\n            return `Change sorting for ${id}`;\n        };\n        /**\n         * A label to describe the current sort (visible only to screenreaders).\n         */\n        this.sortDescriptionLabel = (id, direction) => {\n            return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n        };\n    }\n}\nMatSortHeaderIntl.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nMatSortHeaderIntl.ctorParameters = () => [];\nfunction MatSortHeaderIntl_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatSortHeaderIntl.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatSortHeaderIntl.ctorParameters;\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     * @type {?}\n     */\n    MatSortHeaderIntl.prototype.changes;\n    /**\n     * ARIA label for the sorting button.\n     * @type {?}\n     */\n    MatSortHeaderIntl.prototype.sortButtonLabel;\n    /**\n     * A label to describe the current sort (visible only to screenreaders).\n     * @type {?}\n     */\n    MatSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n */\nexport const /** @type {?} */ MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n//# sourceMappingURL=sort-header-intl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Optional, ViewEncapsulation } from \"@angular/core\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { trigger, state, style, animate, transition, keyframes, } from \"@angular/animations\";\nimport { CdkColumnDef } from \"@angular/cdk/table\";\nimport { merge } from \"rxjs/observable/merge\";\nimport { MatSort } from \"./sort\";\nimport { MatSortHeaderIntl } from \"./sort-header-intl\";\nimport { getSortHeaderNotContainedWithinSortError } from \"./sort-errors\";\nimport { AnimationCurves, AnimationDurations } from \"@angular/material/core\";\nimport { mixinDisabled } from \"@angular/material/core\";\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * \\@docs-private\n */\nexport class MatSortHeaderBase {\n}\nexport const /** @type {?} */ _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _cdkColumnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _cdkColumnDef) {\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._cdkColumnDef = _cdkColumnDef;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe(() => changeDetectorRef.markForCheck());\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._cdkColumnDef) {\n            this.id = this._cdkColumnDef.name;\n        }\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Handles click events on the header.\n     * @return {?}\n     */\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n}\nMatSortHeader.decorators = [\n    { type: Component, args: [{selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" [attr.disabled]=\\\"_isDisabled() || null\\\"><ng-content></ng-content></button><div *ngIf=\\\"_isSorted()\\\" class=\\\"mat-sort-header-arrow\\\" [@indicatorToggle]=\\\"_sort.direction\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_sort.direction\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_sort.direction\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_sort.direction\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div><span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"_isSorted()\\\">&nbsp;{{_intl.sortDescriptionLabel(id, _sort.direction)}}</span>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;margin:0 0 0 6px;position:relative;display:flex}.mat-sort-header-position-before .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0;transition:225ms cubic-bezier(.4,0,.2,1)}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;transition:225ms cubic-bezier(.4,0,.2,1);position:absolute;top:0}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '[class.mat-sort-header-sorted]': '_isSorted()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    trigger('indicator', [\n                        state('asc', style({ transform: 'translateY(0px)' })),\n                        // 10px is the height of the sort indicator, minus the width of the pointers\n                        state('desc', style({ transform: 'translateY(10px)' })),\n                        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n                    ]),\n                    trigger('leftPointer', [\n                        state('asc', style({ transform: 'rotate(-45deg)' })),\n                        state('desc', style({ transform: 'rotate(45deg)' })),\n                        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n                    ]),\n                    trigger('rightPointer', [\n                        state('asc', style({ transform: 'rotate(45deg)' })),\n                        state('desc', style({ transform: 'rotate(-45deg)' })),\n                        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n                    ]),\n                    trigger('indicatorToggle', [\n                        transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n                            style({ transform: 'translateY(25%)', opacity: 0 }),\n                            style({ transform: 'none', opacity: 1 })\n                        ]))),\n                        transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n                            style({ transform: 'none', opacity: 1 }),\n                            style({ transform: 'translateY(-25%)', opacity: 0 })\n                        ]))),\n                        transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n                            style({ transform: 'translateY(-25%)', opacity: 0 }),\n                            style({ transform: 'none', opacity: 1 })\n                        ]))),\n                        transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n                            style({ transform: 'none', opacity: 1 }),\n                            style({ transform: 'translateY(25%)', opacity: 0 })\n                        ]))),\n                    ])\n                ]\n            },] },\n];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl, },\n    { type: ChangeDetectorRef, },\n    { type: MatSort, decorators: [{ type: Optional },] },\n    { type: CdkColumnDef, decorators: [{ type: Optional },] },\n];\nMatSortHeader.propDecorators = {\n    \"id\": [{ type: Input, args: ['mat-sort-header',] },],\n    \"arrowPosition\": [{ type: Input },],\n    \"start\": [{ type: Input, args: ['start',] },],\n    \"disableClear\": [{ type: Input },],\n};\nfunction MatSortHeader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatSortHeader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatSortHeader.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatSortHeader.propDecorators;\n    /** @type {?} */\n    MatSortHeader.prototype._rerenderSubscription;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     * @type {?}\n     */\n    MatSortHeader.prototype.id;\n    /**\n     * Sets the position of the arrow that displays when sorted.\n     * @type {?}\n     */\n    MatSortHeader.prototype.arrowPosition;\n    /**\n     * Overrides the sort start value of the containing MatSort for this MatSortable.\n     * @type {?}\n     */\n    MatSortHeader.prototype.start;\n    /** @type {?} */\n    MatSortHeader.prototype._disableClear;\n    /** @type {?} */\n    MatSortHeader.prototype._intl;\n    /** @type {?} */\n    MatSortHeader.prototype._sort;\n    /** @type {?} */\n    MatSortHeader.prototype._cdkColumnDef;\n}\n//# sourceMappingURL=sort-header.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { MatSortHeader } from \"./sort-header\";\nimport { MatSort } from \"./sort\";\nimport { MAT_SORT_HEADER_INTL_PROVIDER } from \"./sort-header-intl\";\nimport { CommonModule } from \"@angular/common\";\nexport class MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] },\n];\n/** @nocollapse */\nMatSortModule.ctorParameters = () => [];\nfunction MatSortModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatSortModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatSortModule.ctorParameters;\n}\n//# sourceMappingURL=sort-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatSortModule } from \"./sort-module\";\nexport { MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader } from \"./sort-header\";\nexport { MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MAT_SORT_HEADER_INTL_PROVIDER } from \"./sort-header-intl\";\nexport { MatSortBase, _MatSortMixinBase, MatSort } from \"./sort\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}