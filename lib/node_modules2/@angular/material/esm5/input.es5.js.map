{"version":3,"file":"input.es5.js","sources":["../../packages/material/esm5/input/autosize.js","../../packages/material/esm5/input/input-errors.js","../../packages/material/esm5/input/input-value-accessor.js","../../packages/material/esm5/input/input.js","../../packages/material/esm5/input/input-module.js","../../packages/material/esm5/input/public-api.js","../../packages/material/esm5/input/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Input, NgZone, } from \"@angular/core\";\nimport { Platform } from \"@angular/cdk/platform\";\nimport { fromEvent } from \"rxjs/observable/fromEvent\";\nimport { auditTime } from \"rxjs/operators/auditTime\";\nimport { takeUntil } from \"rxjs/operators/takeUntil\";\nimport { Subject } from \"rxjs/Subject\";\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nvar MatTextareaAutosize = /** @class */ (function () {\n    function MatTextareaAutosize(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n    }\n    Object.defineProperty(MatTextareaAutosize.prototype, \"minRows\", {\n        get: /**\n         * Minimum amount of rows in the textarea.\n         * @return {?}\n         */\n        function () { return this._minRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minRows = value;\n            this._setMinHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"maxRows\", {\n        get: /**\n         * Maximum amount of rows in the textarea.\n         * @return {?}\n         */\n        function () { return this._maxRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxRows = value;\n            this._setMaxHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype._setMinHeight = /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n            this.minRows * this._cachedLineHeight + \"px\" : null;\n        if (minHeight) {\n            this._setTextareaStyle('minHeight', minHeight);\n        }\n    };\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype._setMaxHeight = /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n            this.maxRows * this._cachedLineHeight + \"px\" : null;\n        if (maxHeight) {\n            this._setTextareaStyle('maxHeight', maxHeight);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(function () {\n                    fromEvent(window, 'resize')\n                        .pipe(auditTime(16), takeUntil(_this._destroyed))\n                        .subscribe(function () { return _this.resizeToFitContent(true); });\n                });\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype._setTextareaStyle = /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    function (property, value) {\n        var /** @type {?} */ textarea = /** @type {?} */ (this._elementRef.nativeElement);\n        textarea.style[property] = value;\n    };\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype._cacheTextareaLineHeight = /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    function () {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        var /** @type {?} */ textarea = /** @type {?} */ (this._elementRef.nativeElement);\n        // Use a clone element because we have to override some styles.\n        var /** @type {?} */ textareaClone = /** @type {?} */ (textarea.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden'; /** @type {?} */\n        ((textarea.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */\n        ((textarea.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    };\n    /**\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    MatTextareaAutosize.prototype.resizeToFitContent = /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    function (force) {\n        if (force === void 0) { force = false; }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        var /** @type {?} */ textarea = /** @type {?} */ (this._elementRef.nativeElement);\n        var /** @type {?} */ value = textarea.value;\n        // Only resize of the value changed since these calculations can be expensive.\n        if (value === this._previousValue && !force) {\n            return;\n        }\n        var /** @type {?} */ placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.style.height = 'auto';\n        textarea.style.overflow = 'hidden';\n        textarea.placeholder = '';\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = textarea.scrollHeight + \"px\";\n        textarea.style.overflow = '';\n        textarea.placeholder = placeholderText;\n        this._previousValue = value;\n    };\n    MatTextareaAutosize.decorators = [\n        { type: Directive, args: [{\n                    selector: \"textarea[mat-autosize], textarea[matTextareaAutosize]\",\n                    exportAs: 'matTextareaAutosize',\n                    host: {\n                        'class': 'mat-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatTextareaAutosize.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Platform, },\n        { type: NgZone, },\n    ]; };\n    MatTextareaAutosize.propDecorators = {\n        \"minRows\": [{ type: Input, args: ['matAutosizeMinRows',] },],\n        \"maxRows\": [{ type: Input, args: ['matAutosizeMaxRows',] },],\n    };\n    return MatTextareaAutosize;\n}());\nexport { MatTextareaAutosize };\nfunction MatTextareaAutosize_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatTextareaAutosize.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatTextareaAutosize.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatTextareaAutosize.propDecorators;\n    /**\n     * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n     * @type {?}\n     */\n    MatTextareaAutosize.prototype._previousValue;\n    /** @type {?} */\n    MatTextareaAutosize.prototype._destroyed;\n    /** @type {?} */\n    MatTextareaAutosize.prototype._minRows;\n    /** @type {?} */\n    MatTextareaAutosize.prototype._maxRows;\n    /**\n     * Cached height of a textarea with a single row.\n     * @type {?}\n     */\n    MatTextareaAutosize.prototype._cachedLineHeight;\n    /** @type {?} */\n    MatTextareaAutosize.prototype._elementRef;\n    /** @type {?} */\n    MatTextareaAutosize.prototype._platform;\n    /** @type {?} */\n    MatTextareaAutosize.prototype._ngZone;\n}\n//# sourceMappingURL=autosize.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMatInputUnsupportedTypeError(type) {\n    return Error(\"Input type \\\"\" + type + \"\\\" isn't supported by matInput.\");\n}\n//# sourceMappingURL=input-errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from \"@angular/core\";\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport var /** @type {?} */ MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n//# sourceMappingURL=input-value-accessor.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { getSupportedInputTypes, Platform } from \"@angular/cdk/platform\";\nimport { Directive, ElementRef, Inject, Input, Optional, Self, } from \"@angular/core\";\nimport { FormGroupDirective, NgControl, NgForm } from \"@angular/forms\";\nimport { ErrorStateMatcher, mixinErrorState } from \"@angular/material/core\";\nimport { MatFormFieldControl } from \"@angular/material/form-field\";\nimport { Subject } from \"rxjs/Subject\";\nimport { getMatInputUnsupportedTypeError } from \"./input-errors\";\nimport { MAT_INPUT_VALUE_ACCESSOR } from \"./input-value-accessor\";\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nvar /** @type {?} */ MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'color',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nvar /** @type {?} */ nextUniqueId = 0;\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */\nMatInputBase = /** @class */ (function () {\n    function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatInputBase;\n}());\n/**\n * \\@docs-private\n */\nexport { MatInputBase };\nfunction MatInputBase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatInputBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatInputBase.prototype._parentForm;\n    /** @type {?} */\n    MatInputBase.prototype._parentFormGroup;\n    /** @type {?} */\n    MatInputBase.prototype.ngControl;\n}\nexport var /** @type {?} */ _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nvar MatInput = /** @class */ (function (_super) {\n    tslib_1.__extends(MatInput, _super);\n    function MatInput(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor) {\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._elementRef = _elementRef;\n        _this._platform = _platform;\n        _this.ngControl = ngControl;\n        /**\n         * Variables used as cache for getters and setters.\n         */\n        _this._type = 'text';\n        _this._disabled = false;\n        _this._required = false;\n        _this._uid = \"mat-input-\" + nextUniqueId++;\n        _this._readonly = false;\n        /**\n         * Whether the input is focused.\n         */\n        _this.focused = false;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        _this._isServer = false;\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n         * needs to run change detection.\n         */\n        _this.stateChanges = new Subject();\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        _this.controlType = 'mat-input';\n        /**\n         * Placeholder attribute of the element.\n         */\n        _this.placeholder = '';\n        _this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        _this._inputValueAccessor = inputValueAccessor || _this._elementRef.nativeElement;\n        _this._previousNativeValue = _this.value;\n        // Force setter to be called in case id was not specified.\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            _elementRef.nativeElement.addEventListener('keyup', function (event) {\n                var /** @type {?} */ el = /** @type {?} */ (event.target);\n                if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                    // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n                    // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n                    // `0, 0` seems to completely fix it.\n                    el.setSelectionRange(1, 1);\n                    el.setSelectionRange(0, 0);\n                }\n            });\n        }\n        _this._isServer = !_this._platform.isBrowser;\n        return _this;\n    }\n    Object.defineProperty(MatInput.prototype, \"disabled\", {\n        get: /**\n         * Whether the element is disabled.\n         * @return {?}\n         */\n        function () { return this.ngControl ? this.ngControl.disabled : this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // Browsers may not fire the blur event if the input is disabled too quickly.\n            // Reset from here to ensure that the element doesn't become stuck.\n            if (this.focused) {\n                this.focused = false;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"id\", {\n        get: /**\n         * Unique id of the element.\n         * @return {?}\n         */\n        function () { return this._id; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"required\", {\n        get: /**\n         * Whether the element is required.\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"type\", {\n        get: /**\n         * Input type of the element.\n         * @return {?}\n         */\n        function () { return this._type; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                this._elementRef.nativeElement.type = this._type;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"value\", {\n        get: /**\n         * The input element's value.\n         * @return {?}\n         */\n        function () { return this._inputValueAccessor.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this.value) {\n                this._inputValueAccessor.value = value;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"readonly\", {\n        get: /**\n         * Whether the element is readonly.\n         * @return {?}\n         */\n        function () { return this._readonly; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._readonly = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.complete();\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        else {\n            // When the input isn't used together with `@angular/forms`, we need to check manually for\n            // changes to the native `value` property in order to update the floating label.\n            this._dirtyCheckNativeValue();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.focus = /**\n     * @return {?}\n     */\n    function () { this._elementRef.nativeElement.focus(); };\n    /** Callback for the cases where the focused state of the input changes. */\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    MatInput.prototype._focusChanged = /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    function (isFocused) {\n        if (isFocused !== this.focused && !this.readonly) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype._onInput = /**\n     * @return {?}\n     */\n    function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /** Does some manual dirty checking on the native input `value` property. */\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @return {?}\n     */\n    MatInput.prototype._dirtyCheckNativeValue = /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ newValue = this.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    };\n    /** Make sure the input is a supported type. */\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    MatInput.prototype._validateType = /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    function () {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    };\n    /** Checks whether the input type is one of the types that are never empty. */\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @return {?}\n     */\n    MatInput.prototype._isNeverEmpty = /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @return {?}\n     */\n    function () {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    };\n    /** Checks whether the input is invalid based on the native validation. */\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @return {?}\n     */\n    MatInput.prototype._isBadInput = /**\n     * Checks whether the input is invalid based on the native validation.\n     * @return {?}\n     */\n    function () {\n        // The `validity` property won't be present on platform-server.\n        var /** @type {?} */ validity = (/** @type {?} */ (this._elementRef.nativeElement)).validity;\n        return validity && validity.badInput;\n    };\n    /** Determines if the component host is a textarea. If not recognizable it returns false. */\n    /**\n     * Determines if the component host is a textarea. If not recognizable it returns false.\n     * @return {?}\n     */\n    MatInput.prototype._isTextarea = /**\n     * Determines if the component host is a textarea. If not recognizable it returns false.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n        // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n        // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n        // DOM closer.\n        var /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n        return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n    };\n    Object.defineProperty(MatInput.prototype, \"empty\", {\n        // Implemented as part of MatFormFieldControl.\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"shouldLabelFloat\", {\n        // Implemented as part of MatFormFieldControl.\n        get: /**\n         * @return {?}\n         */\n        function () { return this.focused || !this.empty; },\n        enumerable: true,\n        configurable: true\n    });\n    // Implemented as part of MatFormFieldControl.\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    MatInput.prototype.setDescribedByIds = /**\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) { this._ariaDescribedby = ids.join(' '); };\n    // Implemented as part of MatFormFieldControl.\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.onContainerClick = /**\n     * @return {?}\n     */\n    function () { this.focus(); };\n    MatInput.decorators = [\n        { type: Directive, args: [{\n                    selector: \"input[matInput], textarea[matInput]\",\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '[placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[readonly]': 'readonly',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-required]': 'required.toString()',\n                        '(blur)': '_focusChanged(false)',\n                        '(focus)': '_focusChanged(true)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                },] },\n    ];\n    /** @nocollapse */\n    MatInput.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Platform, },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self },] },\n        { type: NgForm, decorators: [{ type: Optional },] },\n        { type: FormGroupDirective, decorators: [{ type: Optional },] },\n        { type: ErrorStateMatcher, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] },] },\n    ]; };\n    MatInput.propDecorators = {\n        \"disabled\": [{ type: Input },],\n        \"id\": [{ type: Input },],\n        \"placeholder\": [{ type: Input },],\n        \"required\": [{ type: Input },],\n        \"type\": [{ type: Input },],\n        \"errorStateMatcher\": [{ type: Input },],\n        \"value\": [{ type: Input },],\n        \"readonly\": [{ type: Input },],\n    };\n    return MatInput;\n}(_MatInputMixinBase));\nexport { MatInput };\nfunction MatInput_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatInput.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatInput.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatInput.propDecorators;\n    /**\n     * Variables used as cache for getters and setters.\n     * @type {?}\n     */\n    MatInput.prototype._type;\n    /** @type {?} */\n    MatInput.prototype._disabled;\n    /** @type {?} */\n    MatInput.prototype._required;\n    /** @type {?} */\n    MatInput.prototype._id;\n    /** @type {?} */\n    MatInput.prototype._uid;\n    /** @type {?} */\n    MatInput.prototype._previousNativeValue;\n    /** @type {?} */\n    MatInput.prototype._readonly;\n    /** @type {?} */\n    MatInput.prototype._inputValueAccessor;\n    /**\n     * Whether the input is focused.\n     * @type {?}\n     */\n    MatInput.prototype.focused;\n    /**\n     * The aria-describedby attribute on the input for improved a11y.\n     * @type {?}\n     */\n    MatInput.prototype._ariaDescribedby;\n    /**\n     * Whether the component is being rendered on the server.\n     * @type {?}\n     */\n    MatInput.prototype._isServer;\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n     * needs to run change detection.\n     * @type {?}\n     */\n    MatInput.prototype.stateChanges;\n    /**\n     * A name for this control that can be used by `mat-form-field`.\n     * @type {?}\n     */\n    MatInput.prototype.controlType;\n    /**\n     * Placeholder attribute of the element.\n     * @type {?}\n     */\n    MatInput.prototype.placeholder;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatInput.prototype.errorStateMatcher;\n    /** @type {?} */\n    MatInput.prototype._neverEmptyInputTypes;\n    /** @type {?} */\n    MatInput.prototype._elementRef;\n    /** @type {?} */\n    MatInput.prototype._platform;\n    /** @type {?} */\n    MatInput.prototype.ngControl;\n}\n//# sourceMappingURL=input.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformModule } from \"@angular/cdk/platform\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatTextareaAutosize } from \"./autosize\";\nimport { MatInput } from \"./input\";\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nvar MatInputModule = /** @class */ (function () {\n    function MatInputModule() {\n    }\n    MatInputModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        MatInput,\n                        MatTextareaAutosize,\n                    ],\n                    imports: [\n                        CommonModule,\n                        MatFormFieldModule,\n                        PlatformModule,\n                    ],\n                    exports: [\n                        MatFormFieldModule,\n                        MatInput,\n                        MatTextareaAutosize,\n                    ],\n                    providers: [ErrorStateMatcher],\n                },] },\n    ];\n    /** @nocollapse */\n    MatInputModule.ctorParameters = function () { return []; };\n    return MatInputModule;\n}());\nexport { MatInputModule };\nfunction MatInputModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatInputModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatInputModule.ctorParameters;\n}\n//# sourceMappingURL=input-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatInputModule } from \"./input-module\";\nexport { MatTextareaAutosize } from \"./autosize\";\nexport { MatInputBase, _MatInputMixinBase, MatInput } from \"./input\";\nexport { getMatInputUnsupportedTypeError } from \"./input-errors\";\nexport { MAT_INPUT_VALUE_ACCESSOR } from \"./input-value-accessor\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatInputModule, MatTextareaAutosize, MatInputBase, _MatInputMixinBase, MatInput, getMatInputUnsupportedTypeError, MAT_INPUT_VALUE_ACCESSOR } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":["tslib_1.__extends"],"mappings":"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"}