{"version":3,"file":"bundle_index_main.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/metadata/bundle_index_main.ts"],"names":[],"mappings":";;;AAUA,4BAA0B;AAE1B,+BAAiC;AAEjC,gCAAwD;AACxD,yDAA0D;AAC1D,iDAAmD;AAEnD,cAAqB,IAAc,EAAE,YAAiD;IAAjD,6BAAA,EAAA,eAAoC,OAAO,CAAC,KAAK;IAC9E,IAAA,iDAA4D,EAA3D,oBAAO,EAAE,wBAAS,CAA0C;IACnE,IAAM,IAAI,GAAG,EAAE,CAAC,kBAAkB,CAAC,EAAC,OAAO,SAAA,EAAC,CAAC,CAAC;IACxC,IAAA,wEAAuF,EAAtF,oBAAgB,EAAE,wBAAS,EAAE,kBAAM,CAAoD;IAC9F,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAC3E,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IACD,8FAA8F;IAC9F,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1B,IAAM,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IACjE,IAAM,eAAe,GAAG,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACzD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;QACrB,OAAO,CAAC,KAAK,CAAI,eAAe,+CAA4C,CAAC,CAAC;QAC9E,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IACD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9B,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAlBD,oBAkBC;AAED,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC","sourcesContent":["#!/usr/bin/env node\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Must be imported first, because Angular decorators throw on load.\nimport 'reflect-metadata';\n\nimport * as ts from 'typescript';\nimport * as path from 'path';\nimport {readCommandLineAndConfiguration} from '../main';\nimport {createBundleIndexHost} from './bundle_index_host';\nimport * as ng from '../transformers/entry_points';\n\nexport function main(args: string[], consoleError: (s: string) => void = console.error): number {\n  const {options, rootNames} = readCommandLineAndConfiguration(args);\n  const host = ng.createCompilerHost({options});\n  const {host: bundleHost, indexName, errors} = createBundleIndexHost(options, rootNames, host);\n  if (!indexName) {\n    console.error('Did not find an index.ts in the top-level of the package.');\n    return 1;\n  }\n  // The index file is synthetic, so we have to add it to the program after parsing the tsconfig\n  rootNames.push(indexName);\n  const program = ts.createProgram(rootNames, options, bundleHost);\n  const indexSourceFile = program.getSourceFile(indexName);\n  if (!indexSourceFile) {\n    console.error(`${indexSourceFile} is not in the program. Please file a bug.`);\n    return 1;\n  }\n  program.emit(indexSourceFile);\n  return 0;\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  process.exitCode = main(args);\n}\n"]}