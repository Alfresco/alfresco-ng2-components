{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Must be imported first, because Angular decorators throw on load.\nimport 'reflect-metadata';\n\nimport * as ts from 'typescript';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as tsickle from 'tsickle';\nimport * as api from './transformers/api';\nimport * as ngc from './transformers/entry_points';\nimport {GENERATED_FILES} from './transformers/util';\n\nimport {exitCodeFromResult, performCompilation, readConfiguration, formatDiagnostics, Diagnostics, ParsedConfiguration, PerformCompilationResult, filterErrorsAndWarnings} from './perform_compile';\nimport {performWatchCompilation,Â createPerformWatchHost} from './perform_watch';\n\nexport function main(\n    args: string[], consoleError: (s: string) => void = console.error,\n    config?: NgcParsedConfiguration): number {\n  let {project, rootNames, options, errors: configErrors, watch, emitFlags} =\n      config || readNgcCommandLineAndConfiguration(args);\n  if (configErrors.length) {\n    return reportErrorsAndExit(configErrors, /*options*/ undefined, consoleError);\n  }\n  if (watch) {\n    const result = watchMode(project, options, consoleError);\n    return reportErrorsAndExit(result.firstCompileResult, options, consoleError);\n  }\n  const {diagnostics: compileDiags} = performCompilation(\n      {rootNames, options, emitFlags, emitCallback: createEmitCallback(options)});\n  return reportErrorsAndExit(compileDiags, options, consoleError);\n}\n\n\nfunction createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback|undefined {\n  const transformDecorators = options.annotationsAs !== 'decorators';\n  const transformTypesToClosure = options.annotateForClosureCompiler;\n  if (!transformDecorators && !transformTypesToClosure) {\n    return undefined;\n  }\n  if (transformDecorators) {\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n    // Otherwise tsickle might emit references to non imported values\n    // as TypeScript elided the import.\n    options.emitDecoratorMetadata = true;\n  }\n  const tsickleHost: Pick<\n      tsickle.TsickleHost, 'shouldSkipTsickleProcessing'|'pathToModuleName'|\n      'shouldIgnoreWarningsForPath'|'fileNameToModuleId'|'googmodule'|'untyped'|\n      'convertIndexImportShorthand'|'transformDecorators'|'transformTypesToClosure'> = {\n    shouldSkipTsickleProcessing: (fileName) =>\n                                     /\\.d\\.ts$/.test(fileName) || GENERATED_FILES.test(fileName),\n    pathToModuleName: (context, importPath) => '',\n    shouldIgnoreWarningsForPath: (filePath) => false,\n    fileNameToModuleId: (fileName) => fileName,\n    googmodule: false,\n    untyped: true,\n    convertIndexImportShorthand: false, transformDecorators, transformTypesToClosure,\n  };\n\n  return ({\n           program,\n           targetSourceFile,\n           writeFile,\n           cancellationToken,\n           emitOnlyDtsFiles,\n           customTransformers = {},\n           host,\n           options\n         }) =>\n             tsickle.emitWithTsickle(\n                 program, {...tsickleHost, options, host}, host, options, targetSourceFile,\n                 writeFile, cancellationToken, emitOnlyDtsFiles, {\n                   beforeTs: customTransformers.before,\n                   afterTs: customTransformers.after,\n                 });\n}\n\nexport interface NgcParsedConfiguration extends ParsedConfiguration { watch?: boolean; }\n\nfunction readNgcCommandLineAndConfiguration(args: string[]): NgcParsedConfiguration {\n  const options: api.CompilerOptions = {};\n  const parsedArgs = require('minimist')(args);\n  if (parsedArgs.i18nFile) options.i18nInFile = parsedArgs.i18nFile;\n  if (parsedArgs.i18nFormat) options.i18nInFormat = parsedArgs.i18nFormat;\n  if (parsedArgs.locale) options.i18nInLocale = parsedArgs.locale;\n  const mt = parsedArgs.missingTranslation;\n  if (mt === 'error' || mt === 'warning' || mt === 'ignore') {\n    options.i18nInMissingTranslations = mt;\n  }\n  const config = readCommandLineAndConfiguration(\n      args, options, ['i18nFile', 'i18nFormat', 'locale', 'missingTranslation', 'watch']);\n  const watch = parsedArgs.w || parsedArgs.watch;\n  return {...config, watch};\n}\n\nexport function readCommandLineAndConfiguration(\n    args: string[], existingOptions: api.CompilerOptions = {},\n    ngCmdLineOptions: string[] = []): ParsedConfiguration {\n  let cmdConfig = ts.parseCommandLine(args);\n  const project = cmdConfig.options.project || '.';\n  const cmdErrors = cmdConfig.errors.filter(e => {\n    if (typeof e.messageText === 'string') {\n      const msg = e.messageText;\n      return !ngCmdLineOptions.some(o => msg.indexOf(o) >= 0);\n    }\n    return true;\n  });\n  if (cmdErrors.length) {\n    return {\n      project,\n      rootNames: [],\n      options: cmdConfig.options,\n      errors: cmdErrors,\n      emitFlags: api.EmitFlags.Default\n    };\n  }\n  const allDiagnostics: Diagnostics = [];\n  const config = readConfiguration(project, cmdConfig.options);\n  const options = {...config.options, ...existingOptions};\n  if (options.locale) {\n    options.i18nInLocale = options.locale;\n  }\n  return {\n    project,\n    rootNames: config.rootNames, options,\n    errors: config.errors,\n    emitFlags: config.emitFlags\n  };\n}\n\nfunction reportErrorsAndExit(\n    allDiagnostics: Diagnostics, options?: api.CompilerOptions,\n    consoleError: (s: string) => void = console.error): number {\n  const errorsAndWarnings = filterErrorsAndWarnings(allDiagnostics);\n  if (errorsAndWarnings.length) {\n    let currentDir = options ? options.basePath : undefined;\n    const formatHost: ts.FormatDiagnosticsHost = {\n      getCurrentDirectory: () => currentDir || ts.sys.getCurrentDirectory(),\n      getCanonicalFileName: fileName => fileName,\n      getNewLine: () => ts.sys.newLine\n    };\n    consoleError(formatDiagnostics(errorsAndWarnings, formatHost));\n  }\n  return exitCodeFromResult(allDiagnostics);\n}\n\nexport function watchMode(\n    project: string, options: api.CompilerOptions, consoleError: (s: string) => void) {\n  return performWatchCompilation(createPerformWatchHost(project, diagnostics => {\n    consoleError(formatDiagnostics(diagnostics));\n  }, options, options => createEmitCallback(options)));\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  process.exitCode = main(args);\n}\n"]}