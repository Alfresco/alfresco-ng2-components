{"version":3,"file":"extract_i18n.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/extract_i18n.ts"],"names":[],"mappings":";;;;;;;;;;;AAcA,4BAA0B;AAC1B,wCAA0C;AAE1C,+BAA6D;AAE7D,mBACI,IAAc,EAAE,YAAmD;IAAnD,6BAAA,EAAA,eAAsC,OAAO,CAAC,KAAK;IACrE,IAAM,MAAM,GAAG,oCAAoC,CAAC,IAAI,CAAC,CAAC;IAC1D,MAAM,CAAC,WAAI,CAAC,IAAI,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;AAC1C,CAAC;AAJD,8BAIC;AAED,8CAA8C,IAAc;IAC1D,IAAM,OAAO,GAAwB,EAAE,CAAC;IACxC,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;IAC7C,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC;QAAC,OAAO,CAAC,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC;IACjE,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC;QAAC,OAAO,CAAC,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC;IACzE,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;QAAC,OAAO,CAAC,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC;IAEjE,IAAM,MAAM,GAAG,sCAA+B,CAAC,IAAI,EAAE,OAAO,EAAE;QAC5D,SAAS;QACT,YAAY;QACZ,QAAQ;KACT,CAAC,CAAC;IACH,6CAA6C;IAC7C,MAAM,cAAK,MAAM,IAAE,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,IAAE;AAC1D,CAAC;AAED,cAAc;AACd,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC","sourcesContent":["#!/usr/bin/env node\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\n// Must be imported first, because Angular decorators throw on load.\nimport 'reflect-metadata';\nimport * as api from './transformers/api';\nimport {ParsedConfiguration} from './perform_compile';\nimport {main, readCommandLineAndConfiguration} from './main';\n\nexport function mainXi18n(\n    args: string[], consoleError: (msg: string) => void = console.error): number {\n  const config = readXi18nCommandLineAndConfiguration(args);\n  return main(args, consoleError, config);\n}\n\nfunction readXi18nCommandLineAndConfiguration(args: string[]): ParsedConfiguration {\n  const options: api.CompilerOptions = {};\n  const parsedArgs = require('minimist')(args);\n  if (parsedArgs.outFile) options.i18nOutFile = parsedArgs.outFile;\n  if (parsedArgs.i18nFormat) options.i18nOutFormat = parsedArgs.i18nFormat;\n  if (parsedArgs.locale) options.i18nOutLocale = parsedArgs.locale;\n\n  const config = readCommandLineAndConfiguration(args, options, [\n    'outFile',\n    'i18nFormat',\n    'locale',\n  ]);\n  // only emit the i18nBundle but nothing else.\n  return {...config, emitFlags: api.EmitFlags.I18nBundle};\n}\n\n// Entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  process.exitCode = mainXi18n(args);\n}\n"]}