{"version":3,"file":"perform_compile.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform_compile.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Position, isSyntaxError, syntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as api from './transformers/api';\nimport * as ng from './transformers/entry_points';\nimport {createMessageDiagnostic} from './transformers/util';\n\nconst TS_EXT = /\\.ts$/;\n\nexport type Diagnostics = ReadonlyArray<ts.Diagnostic|api.Diagnostic>;\n\nexport function filterErrorsAndWarnings(diagnostics: Diagnostics): Diagnostics {\n  return diagnostics.filter(d => d.category !== ts.DiagnosticCategory.Message);\n}\n\nconst defaultFormatHost: ts.FormatDiagnosticsHost = {\n  getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n  getCanonicalFileName: fileName => fileName,\n  getNewLine: () => ts.sys.newLine\n};\n\nfunction displayFileName(fileName: string, host: ts.FormatDiagnosticsHost): string {\n  return path.relative(host.getCurrentDirectory(), host.getCanonicalFileName(fileName));\n}\n\nexport function formatDiagnosticPosition(\n    position: Position, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  return `${displayFileName(position.fileName, host)}(${position.line + 1},${position.column+1})`;\n}\n\nexport function flattenDiagnosticMessageChain(\n    chain: api.DiagnosticMessageChain, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  let result = chain.messageText;\n  let indent = 1;\n  let current = chain.next;\n  const newLine = host.getNewLine();\n  while (current) {\n    result += newLine;\n    for (let i = 0; i < indent; i++) {\n      result += '  ';\n    }\n    result += current.messageText;\n    const position = current.position;\n    if (position) {\n      result += ` at ${formatDiagnosticPosition(position, host)}`;\n    }\n    current = current.next;\n    indent++;\n  }\n  return result;\n}\n\nexport function formatDiagnostic(\n    diagnostic: api.Diagnostic, host: ts.FormatDiagnosticsHost = defaultFormatHost) {\n  let result = '';\n  const newLine = host.getNewLine();\n  const span = diagnostic.span;\n  if (span) {\n    result += `${formatDiagnosticPosition({\n      fileName: span.start.file.url,\n      line: span.start.line,\n      column: span.start.col\n    }, host)}: `;\n  } else if (diagnostic.position) {\n    result += `${formatDiagnosticPosition(diagnostic.position, host)}: `;\n  }\n  if (diagnostic.span && diagnostic.span.details) {\n    result += `: ${diagnostic.span.details}, ${diagnostic.messageText}${newLine}`;\n  } else if (diagnostic.chain) {\n    result += `${flattenDiagnosticMessageChain(diagnostic.chain, host)}.${newLine}`;\n  } else {\n    result += `: ${diagnostic.messageText}${newLine}`;\n  }\n  return result;\n}\n\nexport function formatDiagnostics(\n    diags: Diagnostics, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  if (diags && diags.length) {\n    return diags\n        .map(diagnostic => {\n          if (api.isTsDiagnostic(diagnostic)) {\n            return ts.formatDiagnostics([diagnostic], host);\n          } else {\n            return formatDiagnostic(diagnostic, host);\n          }\n        })\n        .join('');\n  } else {\n    return '';\n  }\n}\n\nexport interface ParsedConfiguration {\n  project: string;\n  options: api.CompilerOptions;\n  rootNames: string[];\n  emitFlags: api.EmitFlags;\n  errors: Diagnostics;\n}\n\nexport function calcProjectFileAndBasePath(project: string):\n    {projectFile: string, basePath: string} {\n  const projectIsDir = fs.lstatSync(project).isDirectory();\n  const projectFile = projectIsDir ? path.join(project, 'tsconfig.json') : project;\n  const projectDir = projectIsDir ? project : path.dirname(project);\n  const basePath = path.resolve(process.cwd(), projectDir);\n  return {projectFile, basePath};\n}\n\nexport function createNgCompilerOptions(\n    basePath: string, config: any, tsOptions: ts.CompilerOptions): api.CompilerOptions {\n  return {...tsOptions, ...config.angularCompilerOptions, genDir: basePath, basePath};\n}\n\nexport function readConfiguration(\n    project: string, existingOptions?: ts.CompilerOptions): ParsedConfiguration {\n  try {\n    const {projectFile, basePath} = calcProjectFileAndBasePath(project);\n\n    let {config, error} = ts.readConfigFile(projectFile, ts.sys.readFile);\n\n    if (error) {\n      return {\n        project,\n        errors: [error],\n        rootNames: [],\n        options: {},\n        emitFlags: api.EmitFlags.Default\n      };\n    }\n    const parseConfigHost = {\n      useCaseSensitiveFileNames: true,\n      fileExists: fs.existsSync,\n      readDirectory: ts.sys.readDirectory,\n      readFile: ts.sys.readFile\n    };\n    const parsed =\n        ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);\n    const rootNames = parsed.fileNames.map(f => path.normalize(f));\n\n    const options = createNgCompilerOptions(basePath, config, parsed.options);\n    let emitFlags = api.EmitFlags.Default;\n    if (!(options.skipMetadataEmit || options.flatModuleOutFile)) {\n      emitFlags |= api.EmitFlags.Metadata;\n    }\n    if (options.skipTemplateCodegen) {\n      emitFlags = emitFlags & ~api.EmitFlags.Codegen;\n    }\n    return {project: projectFile, rootNames, options, errors: parsed.errors, emitFlags};\n  } catch (e) {\n    const errors: Diagnostics = [{\n      category: ts.DiagnosticCategory.Error,\n      messageText: e.stack,\n      source: api.SOURCE,\n      code: api.UNKNOWN_ERROR_CODE\n    }];\n    return {project: '', errors, rootNames: [], options: {}, emitFlags: api.EmitFlags.Default};\n  }\n}\n\nexport interface PerformCompilationResult {\n  diagnostics: Diagnostics;\n  program?: api.Program;\n  emitResult?: ts.EmitResult;\n}\n\nexport function exitCodeFromResult(diags: Diagnostics | undefined): number {\n  if (!diags || filterErrorsAndWarnings(diags).length === 0) {\n    // If we have a result and didn't get any errors, we succeeded.\n    return 0;\n  }\n\n  // Return 2 if any of the errors were unknown.\n  return diags.some(d => d.source === 'angular' && d.code === api.UNKNOWN_ERROR_CODE) ? 2 : 1;\n}\n\nexport function performCompilation({rootNames, options, host, oldProgram, emitCallback,\n                                    gatherDiagnostics = defaultGatherDiagnostics,\n                                    customTransformers, emitFlags = api.EmitFlags.Default}: {\n  rootNames: string[],\n  options: api.CompilerOptions,\n  host?: api.CompilerHost,\n  oldProgram?: api.Program,\n  emitCallback?: api.TsEmitCallback,\n  gatherDiagnostics?: (program: api.Program) => Diagnostics,\n  customTransformers?: api.CustomTransformers,\n  emitFlags?: api.EmitFlags\n}): PerformCompilationResult {\n  let program: api.Program|undefined;\n  let emitResult: ts.EmitResult|undefined;\n  let allDiagnostics: Array<ts.Diagnostic|api.Diagnostic> = [];\n  try {\n    if (!host) {\n      host = ng.createCompilerHost({options});\n    }\n\n    program = ng.createProgram({rootNames, host, options, oldProgram});\n\n    const beforeDiags = Date.now();\n    allDiagnostics.push(...gatherDiagnostics(program !));\n    if (options.diagnostics) {\n      const afterDiags = Date.now();\n      allDiagnostics.push(\n          createMessageDiagnostic(`Time for diagnostics: ${afterDiags - beforeDiags}ms.`));\n    }\n\n    if (!hasErrors(allDiagnostics)) {\n      emitResult = program !.emit({emitCallback, customTransformers, emitFlags});\n      allDiagnostics.push(...emitResult.diagnostics);\n      return {diagnostics: allDiagnostics, program, emitResult};\n    }\n    return {diagnostics: allDiagnostics, program};\n  } catch (e) {\n    let errMsg: string;\n    let code: number;\n    if (isSyntaxError(e)) {\n      // don't report the stack for syntax errors as they are well known errors.\n      errMsg = e.message;\n      code = api.DEFAULT_ERROR_CODE;\n    } else {\n      errMsg = e.stack;\n      // It is not a syntax error we might have a program with unknown state, discard it.\n      program = undefined;\n      code = api.UNKNOWN_ERROR_CODE;\n    }\n    allDiagnostics.push(\n        {category: ts.DiagnosticCategory.Error, messageText: errMsg, code, source: api.SOURCE});\n    return {diagnostics: allDiagnostics, program};\n  }\n}\nfunction defaultGatherDiagnostics(program: api.Program): Diagnostics {\n  const allDiagnostics: Array<ts.Diagnostic|api.Diagnostic> = [];\n\n  function checkDiagnostics(diags: Diagnostics | undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return !hasErrors(diags);\n    }\n    return true;\n  }\n\n  let checkOtherDiagnostics = true;\n  // Check parameter diagnostics\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n      checkDiagnostics([...program.getTsOptionDiagnostics(), ...program.getNgOptionDiagnostics()]);\n\n  // Check syntactic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getTsSyntacticDiagnostics() as Diagnostics);\n\n  // Check TypeScript semantic and Angular structure diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics &&\n      checkDiagnostics(\n          [...program.getTsSemanticDiagnostics(), ...program.getNgStructuralDiagnostics()]);\n\n  // Check Angular semantic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getNgSemanticDiagnostics() as Diagnostics);\n\n  return allDiagnostics;\n}\n\nfunction hasErrors(diags: Diagnostics) {\n  return diags.some(d => d.category === ts.DiagnosticCategory.Error);\n}\n"]}