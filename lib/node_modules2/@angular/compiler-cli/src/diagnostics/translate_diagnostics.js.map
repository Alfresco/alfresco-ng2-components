{"version":3,"file":"translate_diagnostics.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/diagnostics/translate_diagnostics.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAGH,+BAAiC;AAEjC,2CAA2E;AAC3E,6CAAqD;AAMrD,8BACI,IAAmB,EAAE,uBAAqD;IAE5E,IAAM,EAAE,GAAoB,EAAE,CAAC;IAC/B,IAAM,EAAE,GAAiB,EAAE,CAAC;IAE5B,uBAAuB,CAAC,OAAO,CAAC,UAAC,UAAU;QACzC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,KAAK,IAAI,sBAAe,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1F,8DAA8D;YAC9D,kEAAkE;YAClE,qBAAqB;YACrB,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,KAAK,oCAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClE,MAAM,CAAC;YACT,CAAC;YACD,IAAM,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YACnE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;gBACrC,EAAE,CAAC,IAAI,CAAC;oBACN,WAAW,EAAE,yBAAyB,CAAC,UAAU,CAAC,WAAW,CAAC;oBAC9D,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,IAAI,MAAA;oBACnC,MAAM,EAAE,YAAM;oBACd,IAAI,EAAE,wBAAkB;iBACzB,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtB,CAAC;IACH,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,EAAC,EAAE,IAAA,EAAE,EAAE,IAAA,EAAC,CAAC;AAClB,CAAC;AA7BD,oDA6BC;AAED,sBAAsB,IAAmB,EAAE,MAAqB,EAAE,KAAa;IAEvE,IAAA,oDAAmE,EAAlE,cAAI,EAAE,wBAAS,CAAoD;IAC1E,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AAClE,CAAC;AAED,mCAAmC,OAA2C;IAC5E,MAAM,CAAC,EAAE,CAAC,4BAA4B,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACxD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseSourceSpan} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {DEFAULT_ERROR_CODE, Diagnostic, SOURCE} from '../transformers/api';\nimport {GENERATED_FILES} from '../transformers/util';\n\nexport interface TypeCheckHost {\n  parseSourceSpanOf(fileName: string, line: number, character: number): ParseSourceSpan|null;\n}\n\nexport function translateDiagnostics(\n    host: TypeCheckHost, untranslatedDiagnostics: ReadonlyArray<ts.Diagnostic>):\n    {ts: ts.Diagnostic[], ng: Diagnostic[]} {\n  const ts: ts.Diagnostic[] = [];\n  const ng: Diagnostic[] = [];\n\n  untranslatedDiagnostics.forEach((diagnostic) => {\n    if (diagnostic.file && diagnostic.start && GENERATED_FILES.test(diagnostic.file.fileName)) {\n      // We need to filter out diagnostics about unused functions as\n      // they are in fact referenced by nobody and only serve to surface\n      // type check errors.\n      if (diagnostic.code === /* ... is declared but never used */ 6133) {\n        return;\n      }\n      const span = sourceSpanOf(host, diagnostic.file, diagnostic.start);\n      if (span) {\n        const fileName = span.start.file.url;\n        ng.push({\n          messageText: diagnosticMessageToString(diagnostic.messageText),\n          category: diagnostic.category, span,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        });\n      }\n    } else {\n      ts.push(diagnostic);\n    }\n  });\n  return {ts, ng};\n}\n\nfunction sourceSpanOf(host: TypeCheckHost, source: ts.SourceFile, start: number): ParseSourceSpan|\n    null {\n  const {line, character} = ts.getLineAndCharacterOfPosition(source, start);\n  return host.parseSourceSpanOf(source.fileName, line, character);\n}\n\nfunction diagnosticMessageToString(message: ts.DiagnosticMessageChain | string): string {\n  return ts.flattenDiagnosticMessageText(message, '\\n');\n}\n"]}