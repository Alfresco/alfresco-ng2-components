{"version":3,"file":"program.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/program.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotCompiler, AotCompilerHost, AotCompilerOptions, EmitterVisitorContext, FormattedMessageChain, GeneratedFile, MessageBundle, NgAnalyzedFile, NgAnalyzedModules, ParseSourceSpan, Position, Serializer, TypeScriptEmitter, Xliff, Xliff2, Xmb, core, createAotCompiler, getParseErrors, isFormattedError, isSyntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {TypeCheckHost, translateDiagnostics} from '../diagnostics/translate_diagnostics';\nimport {ModuleMetadata, createBundleIndexHost} from '../metadata/index';\n\nimport {CompilerHost, CompilerOptions, CustomTransformers, DEFAULT_ERROR_CODE, Diagnostic, DiagnosticMessageChain, EmitFlags, LazyRoute, LibrarySummary, Program, SOURCE, TsEmitArguments, TsEmitCallback} from './api';\nimport {CodeGenerator, TsCompilerAotCompilerTypeCheckHostAdapter, getOriginalReferences} from './compiler_host';\nimport {LowerMetadataCache, getExpressionLoweringTransformFactory} from './lower_expressions';\nimport {getAngularEmitterTransformFactory} from './node_emitter_transform';\nimport {GENERATED_FILES, StructureIsReused, createMessageDiagnostic, isInRootDir, ngToTsDiagnostic, tsStructureIsReused} from './util';\n\n\n/**\n * Maximum number of files that are emitable via calling ts.Program.emit\n * passing individual targetSourceFiles.\n */\nconst MAX_FILE_COUNT_FOR_SINGLE_FILE_EMIT = 20;\n\nconst emptyModules: NgAnalyzedModules = {\n  ngModules: [],\n  ngModuleByPipeOrDirective: new Map(),\n  files: []\n};\n\nconst defaultEmitCallback: TsEmitCallback =\n    ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) =>\n        program.emit(\n            targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n\nclass AngularCompilerProgram implements Program {\n  private rootNames: string[];\n  private metadataCache: LowerMetadataCache;\n  private oldProgramLibrarySummaries: Map<string, LibrarySummary>|undefined;\n  private oldProgramEmittedGeneratedFiles: Map<string, GeneratedFile>|undefined;\n  private oldProgramEmittedSourceFiles: Map<string, ts.SourceFile>|undefined;\n  // Note: This will be cleared out as soon as we create the _tsProgram\n  private oldTsProgram: ts.Program|undefined;\n  private emittedLibrarySummaries: LibrarySummary[]|undefined;\n  private emittedGeneratedFiles: GeneratedFile[]|undefined;\n  private emittedSourceFiles: ts.SourceFile[]|undefined;\n\n  // Lazily initialized fields\n  private _compiler: AotCompiler;\n  private _hostAdapter: TsCompilerAotCompilerTypeCheckHostAdapter;\n  private _tsProgram: ts.Program;\n  private _analyzedModules: NgAnalyzedModules|undefined;\n  private _structuralDiagnostics: Diagnostic[]|undefined;\n  private _programWithStubs: ts.Program|undefined;\n  private _optionsDiagnostics: Diagnostic[] = [];\n\n  constructor(\n      rootNames: ReadonlyArray<string>, private options: CompilerOptions,\n      private host: CompilerHost, oldProgram?: Program) {\n    this.rootNames = [...rootNames];\n    const [major, minor] = ts.version.split('.');\n    if (Number(major) < 2 || (Number(major) === 2 && Number(minor) < 4)) {\n      throw new Error('The Angular Compiler requires TypeScript >= 2.4.');\n    }\n    this.oldTsProgram = oldProgram ? oldProgram.getTsProgram() : undefined;\n    if (oldProgram) {\n      this.oldProgramLibrarySummaries = oldProgram.getLibrarySummaries();\n      this.oldProgramEmittedGeneratedFiles = oldProgram.getEmittedGeneratedFiles();\n      this.oldProgramEmittedSourceFiles = oldProgram.getEmittedSourceFiles();\n    }\n\n    if (options.flatModuleOutFile) {\n      const {host: bundleHost, indexName, errors} =\n          createBundleIndexHost(options, this.rootNames, host);\n      if (errors) {\n        // TODO(tbosch): once we move MetadataBundler from tsc_wrapped into compiler_cli,\n        // directly create ng.Diagnostic instead of using ts.Diagnostic here.\n        this._optionsDiagnostics.push(...errors.map(e => ({\n                                                      category: e.category,\n                                                      messageText: e.messageText as string,\n                                                      source: SOURCE,\n                                                      code: DEFAULT_ERROR_CODE\n                                                    })));\n      } else {\n        this.rootNames.push(indexName !);\n        this.host = bundleHost;\n      }\n    }\n    this.metadataCache = new LowerMetadataCache({quotedNames: true}, !!options.strictMetadataEmit);\n  }\n\n  getLibrarySummaries(): Map<string, LibrarySummary> {\n    const result = new Map<string, LibrarySummary>();\n    if (this.oldProgramLibrarySummaries) {\n      this.oldProgramLibrarySummaries.forEach((summary, fileName) => result.set(fileName, summary));\n    }\n    if (this.emittedLibrarySummaries) {\n      this.emittedLibrarySummaries.forEach(\n          (summary, fileName) => result.set(summary.fileName, summary));\n    }\n    return result;\n  }\n\n  getEmittedGeneratedFiles(): Map<string, GeneratedFile> {\n    const result = new Map<string, GeneratedFile>();\n    if (this.oldProgramEmittedGeneratedFiles) {\n      this.oldProgramEmittedGeneratedFiles.forEach(\n          (genFile, fileName) => result.set(fileName, genFile));\n    }\n    if (this.emittedGeneratedFiles) {\n      this.emittedGeneratedFiles.forEach((genFile) => result.set(genFile.genFileUrl, genFile));\n    }\n    return result;\n  }\n\n  getEmittedSourceFiles(): Map<string, ts.SourceFile> {\n    const result = new Map<string, ts.SourceFile>();\n    if (this.oldProgramEmittedSourceFiles) {\n      this.oldProgramEmittedSourceFiles.forEach((sf, fileName) => result.set(fileName, sf));\n    }\n    if (this.emittedSourceFiles) {\n      this.emittedSourceFiles.forEach((sf) => result.set(sf.fileName, sf));\n    }\n    return result;\n  }\n\n  getTsProgram(): ts.Program { return this.tsProgram; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken) {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<Diagnostic> {\n    return [...this._optionsDiagnostics, ...getNgOptionDiagnostics(this.options)];\n  }\n\n  getTsSyntacticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<Diagnostic> {\n    return this.structuralDiagnostics;\n  }\n\n  getTsSemanticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<ts.Diagnostic> {\n    const sourceFiles = sourceFile ? [sourceFile] : this.tsProgram.getSourceFiles();\n    let diags: ts.Diagnostic[] = [];\n    sourceFiles.forEach(sf => {\n      if (!GENERATED_FILES.test(sf.fileName)) {\n        diags.push(...this.tsProgram.getSemanticDiagnostics(sf, cancellationToken));\n      }\n    });\n    return diags;\n  }\n\n  getNgSemanticDiagnostics(fileName?: string, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<Diagnostic> {\n    let diags: ts.Diagnostic[] = [];\n    this.tsProgram.getSourceFiles().forEach(sf => {\n      if (GENERATED_FILES.test(sf.fileName) && !sf.isDeclarationFile) {\n        diags.push(...this.tsProgram.getSemanticDiagnostics(sf, cancellationToken));\n      }\n    });\n    const {ng} = translateDiagnostics(this.hostAdapter, diags);\n    return ng;\n  }\n\n  loadNgStructureAsync(): Promise<void> {\n    if (this._analyzedModules) {\n      throw new Error('Angular structure already loaded');\n    }\n    return Promise.resolve()\n        .then(() => {\n          const {tmpProgram, sourceFiles, rootNames} = this._createProgramWithBasicStubs();\n          return this.compiler.loadFilesAsync(sourceFiles).then(analyzedModules => {\n            if (this._analyzedModules) {\n              throw new Error('Angular structure loaded both synchronously and asynchronsly');\n            }\n            this._updateProgramWithTypeCheckStubs(tmpProgram, analyzedModules, rootNames);\n          });\n        })\n        .catch(e => this._createProgramOnError(e));\n  }\n\n  listLazyRoutes(route?: string): LazyRoute[] {\n    // Note: Don't analyzedModules if a route is given\n    // to be fast enough.\n    return this.compiler.listLazyRoutes(route, route ? undefined : this.analyzedModules);\n  }\n\n  emit(\n      {emitFlags = EmitFlags.Default, cancellationToken, customTransformers,\n       emitCallback = defaultEmitCallback}: {\n        emitFlags?: EmitFlags,\n        cancellationToken?: ts.CancellationToken,\n        customTransformers?: CustomTransformers,\n        emitCallback?: TsEmitCallback\n      } = {}): ts.EmitResult {\n    const emitStart = Date.now();\n    if (emitFlags & EmitFlags.I18nBundle) {\n      const locale = this.options.i18nOutLocale || null;\n      const file = this.options.i18nOutFile || null;\n      const format = this.options.i18nOutFormat || null;\n      const bundle = this.compiler.emitMessageBundle(this.analyzedModules, locale);\n      i18nExtract(format, file, this.host, this.options, bundle);\n    }\n    if ((emitFlags & (EmitFlags.JS | EmitFlags.DTS | EmitFlags.Metadata | EmitFlags.Codegen)) ===\n        0) {\n      return {emitSkipped: true, diagnostics: [], emittedFiles: []};\n    }\n    let {genFiles, genDiags} = this.generateFilesForEmit(emitFlags);\n    if (genDiags.length) {\n      return {\n        diagnostics: genDiags,\n        emitSkipped: true,\n        emittedFiles: [],\n      };\n    }\n    this.emittedGeneratedFiles = genFiles;\n    const outSrcMapping: Array<{sourceFile: ts.SourceFile, outFileName: string}> = [];\n    const genFileByFileName = new Map<string, GeneratedFile>();\n    genFiles.forEach(genFile => genFileByFileName.set(genFile.genFileUrl, genFile));\n    this.emittedLibrarySummaries = [];\n    const emittedSourceFiles = [] as ts.SourceFile[];\n    const writeTsFile: ts.WriteFileCallback =\n        (outFileName, outData, writeByteOrderMark, onError?, sourceFiles?) => {\n          const sourceFile = sourceFiles && sourceFiles.length == 1 ? sourceFiles[0] : null;\n          let genFile: GeneratedFile|undefined;\n          if (sourceFile) {\n            outSrcMapping.push({outFileName: outFileName, sourceFile});\n            genFile = genFileByFileName.get(sourceFile.fileName);\n            if (!sourceFile.isDeclarationFile && !GENERATED_FILES.test(sourceFile.fileName)) {\n              // Note: sourceFile is the transformed sourcefile, not the original one!\n              emittedSourceFiles.push(this.tsProgram.getSourceFile(sourceFile.fileName));\n            }\n          }\n          this.writeFile(outFileName, outData, writeByteOrderMark, onError, genFile, sourceFiles);\n        };\n    const tsCustomTansformers = this.calculateTransforms(genFileByFileName, customTransformers);\n    const emitOnlyDtsFiles = (emitFlags & (EmitFlags.DTS | EmitFlags.JS)) == EmitFlags.DTS;\n    // Restore the original references before we emit so TypeScript doesn't emit\n    // a reference to the .d.ts file.\n    const augmentedReferences = new Map<ts.SourceFile, ReadonlyArray<ts.FileReference>>();\n    for (const sourceFile of this.tsProgram.getSourceFiles()) {\n      const originalReferences = getOriginalReferences(sourceFile);\n      if (originalReferences) {\n        augmentedReferences.set(sourceFile, sourceFile.referencedFiles);\n        sourceFile.referencedFiles = originalReferences;\n      }\n    }\n    const genTsFiles: GeneratedFile[] = [];\n    const genJsonFiles: GeneratedFile[] = [];\n    genFiles.forEach(gf => {\n      if (gf.stmts) {\n        genTsFiles.push(gf);\n      }\n      if (gf.source) {\n        genJsonFiles.push(gf);\n      }\n    });\n    let emitResult: ts.EmitResult;\n    let emittedUserTsCount: number;\n    try {\n      const sourceFilesToEmit = this.getSourceFilesForEmit();\n      if (sourceFilesToEmit &&\n          (sourceFilesToEmit.length + genTsFiles.length) < MAX_FILE_COUNT_FOR_SINGLE_FILE_EMIT) {\n        const fileNamesToEmit =\n            [...sourceFilesToEmit.map(sf => sf.fileName), ...genTsFiles.map(gf => gf.genFileUrl)];\n        emitResult = mergeEmitResults(\n            fileNamesToEmit.map((fileName) => emitResult = emitCallback({\n                                  program: this.tsProgram,\n                                  host: this.host,\n                                  options: this.options,\n                                  writeFile: writeTsFile, emitOnlyDtsFiles,\n                                  customTransformers: tsCustomTansformers,\n                                  targetSourceFile: this.tsProgram.getSourceFile(fileName),\n                                })));\n        emittedUserTsCount = sourceFilesToEmit.length;\n      } else {\n        emitResult = emitCallback({\n          program: this.tsProgram,\n          host: this.host,\n          options: this.options,\n          writeFile: writeTsFile, emitOnlyDtsFiles,\n          customTransformers: tsCustomTansformers\n        });\n        emittedUserTsCount = this.tsProgram.getSourceFiles().length - genTsFiles.length;\n      }\n    } finally {\n      // Restore the references back to the augmented value to ensure that the\n      // checks that TypeScript makes for project structure reuse will succeed.\n      for (const [sourceFile, references] of Array.from(augmentedReferences)) {\n        // TODO(chuckj): Remove any cast after updating build to 2.6\n        (sourceFile as any).referencedFiles = references;\n      }\n    }\n    this.emittedSourceFiles = emittedSourceFiles;\n\n    // Match behavior of tsc: only produce emit diagnostics if it would block\n    // emit. If noEmitOnError is false, the emit will happen in spite of any\n    // errors, so we should not report them.\n    if (this.options.noEmitOnError === true) {\n      // translate the diagnostics in the emitResult as well.\n      const translatedEmitDiags = translateDiagnostics(this.hostAdapter, emitResult.diagnostics);\n      emitResult.diagnostics = translatedEmitDiags.ts.concat(\n          this.structuralDiagnostics.concat(translatedEmitDiags.ng).map(ngToTsDiagnostic));\n    }\n\n    if (!outSrcMapping.length) {\n      // if no files were emitted by TypeScript, also don't emit .json files\n      emitResult.diagnostics =\n          emitResult.diagnostics.concat([createMessageDiagnostic(`Emitted no files.`)]);\n      return emitResult;\n    }\n\n    let sampleSrcFileName: string|undefined;\n    let sampleOutFileName: string|undefined;\n    if (outSrcMapping.length) {\n      sampleSrcFileName = outSrcMapping[0].sourceFile.fileName;\n      sampleOutFileName = outSrcMapping[0].outFileName;\n    }\n    const srcToOutPath =\n        createSrcToOutPathMapper(this.options.outDir, sampleSrcFileName, sampleOutFileName);\n    if (emitFlags & EmitFlags.Codegen) {\n      genJsonFiles.forEach(gf => {\n        const outFileName = srcToOutPath(gf.genFileUrl);\n        this.writeFile(outFileName, gf.source !, false, undefined, gf);\n      });\n    }\n    let metadataJsonCount = 0;\n    if (emitFlags & EmitFlags.Metadata) {\n      this.tsProgram.getSourceFiles().forEach(sf => {\n        if (!sf.isDeclarationFile && !GENERATED_FILES.test(sf.fileName)) {\n          metadataJsonCount++;\n          const metadata = this.metadataCache.getMetadata(sf);\n          if (metadata) {\n            const metadataText = JSON.stringify([metadata]);\n            const outFileName = srcToOutPath(sf.fileName.replace(/\\.tsx?$/, '.metadata.json'));\n            this.writeFile(outFileName, metadataText, false, undefined, undefined, [sf]);\n          }\n        }\n      });\n    }\n    const emitEnd = Date.now();\n    if (this.options.diagnostics) {\n      emitResult.diagnostics = emitResult.diagnostics.concat([createMessageDiagnostic([\n        `Emitted in ${emitEnd - emitStart}ms`,\n        `- ${emittedUserTsCount} user ts files`,\n        `- ${genTsFiles.length} generated ts files`,\n        `- ${genJsonFiles.length + metadataJsonCount} generated json files`,\n      ].join('\\n'))]);\n    }\n    return emitResult;\n  }\n\n  // Private members\n  private get compiler(): AotCompiler {\n    if (!this._compiler) {\n      this._createCompiler();\n    }\n    return this._compiler !;\n  }\n\n  private get hostAdapter(): TsCompilerAotCompilerTypeCheckHostAdapter {\n    if (!this._hostAdapter) {\n      this._createCompiler();\n    }\n    return this._hostAdapter !;\n  }\n\n  private get analyzedModules(): NgAnalyzedModules {\n    if (!this._analyzedModules) {\n      this.initSync();\n    }\n    return this._analyzedModules !;\n  }\n\n  private get structuralDiagnostics(): ReadonlyArray<Diagnostic> {\n    let diagnostics = this._structuralDiagnostics;\n    if (!diagnostics) {\n      this.initSync();\n      diagnostics = (this._structuralDiagnostics = this._structuralDiagnostics || []);\n    }\n    return diagnostics;\n  }\n\n  private get tsProgram(): ts.Program {\n    if (!this._tsProgram) {\n      this.initSync();\n    }\n    return this._tsProgram !;\n  }\n\n  private calculateTransforms(\n      genFiles: Map<string, GeneratedFile>,\n      customTransformers?: CustomTransformers): ts.CustomTransformers {\n    const beforeTs: ts.TransformerFactory<ts.SourceFile>[] = [];\n    if (!this.options.disableExpressionLowering) {\n      beforeTs.push(getExpressionLoweringTransformFactory(this.metadataCache, this.tsProgram));\n    }\n    beforeTs.push(getAngularEmitterTransformFactory(genFiles, this.getTsProgram()));\n    if (customTransformers && customTransformers.beforeTs) {\n      beforeTs.push(...customTransformers.beforeTs);\n    }\n    const afterTs = customTransformers ? customTransformers.afterTs : undefined;\n    return {before: beforeTs, after: afterTs};\n  }\n\n  private initSync() {\n    if (this._analyzedModules) {\n      return;\n    }\n    try {\n      const {tmpProgram, sourceFiles, rootNames} = this._createProgramWithBasicStubs();\n      const analyzedModules = this.compiler.loadFilesSync(sourceFiles);\n      this._updateProgramWithTypeCheckStubs(tmpProgram, analyzedModules, rootNames);\n    } catch (e) {\n      this._createProgramOnError(e);\n    }\n  }\n\n  private _createCompiler() {\n    const codegen: CodeGenerator = {\n      generateFile: (genFileName, baseFileName) =>\n                        this._compiler.emitBasicStub(genFileName, baseFileName),\n      findGeneratedFileNames: (fileName) => this._compiler.findGeneratedFileNames(fileName),\n    };\n\n    this._hostAdapter = new TsCompilerAotCompilerTypeCheckHostAdapter(\n        this.rootNames, this.options, this.host, this.metadataCache, codegen,\n        this.oldProgramLibrarySummaries);\n    const aotOptions = getAotCompilerOptions(this.options);\n    const errorCollector = (this.options.collectAllErrors || this.options.fullTemplateTypeCheck) ?\n        (err: any) => this._addStructuralDiagnostics(err) :\n        undefined;\n    this._compiler = createAotCompiler(this._hostAdapter, aotOptions, errorCollector).compiler;\n  }\n\n  private _createProgramWithBasicStubs(): {\n    tmpProgram: ts.Program,\n    rootNames: string[],\n    sourceFiles: string[],\n  } {\n    if (this._analyzedModules) {\n      throw new Error(`Internal Error: already initalized!`);\n    }\n    // Note: This is important to not produce a memory leak!\n    const oldTsProgram = this.oldTsProgram;\n    this.oldTsProgram = undefined;\n\n    const codegen: CodeGenerator = {\n      generateFile: (genFileName, baseFileName) =>\n                        this.compiler.emitBasicStub(genFileName, baseFileName),\n      findGeneratedFileNames: (fileName) => this.compiler.findGeneratedFileNames(fileName),\n    };\n\n\n    let rootNames = [...this.rootNames];\n    if (this.options.generateCodeForLibraries !== false) {\n      // if we should generateCodeForLibraries, never include\n      // generated files in the program as otherwise we will\n      // ovewrite them and typescript will report the error\n      // TS5055: Cannot write file ... because it would overwrite input file.\n      rootNames = rootNames.filter(fn => !GENERATED_FILES.test(fn));\n    }\n    if (this.options.noResolve) {\n      this.rootNames.forEach(rootName => {\n        if (this.hostAdapter.shouldGenerateFilesFor(rootName)) {\n          rootNames.push(...this.compiler.findGeneratedFileNames(rootName));\n        }\n      });\n    }\n\n    const tmpProgram = ts.createProgram(rootNames, this.options, this.hostAdapter, oldTsProgram);\n    const sourceFiles: string[] = [];\n    tmpProgram.getSourceFiles().forEach(sf => {\n      if (this.hostAdapter.isSourceFile(sf.fileName)) {\n        sourceFiles.push(sf.fileName);\n      }\n    });\n    return {tmpProgram, sourceFiles, rootNames};\n  }\n\n  private _updateProgramWithTypeCheckStubs(\n      tmpProgram: ts.Program, analyzedModules: NgAnalyzedModules, rootNames: string[]) {\n    this._analyzedModules = analyzedModules;\n    tmpProgram.getSourceFiles().forEach(sf => {\n      if (sf.fileName.endsWith('.ngfactory.ts')) {\n        const {generate, baseFileName} = this.hostAdapter.shouldGenerateFile(sf.fileName);\n        if (generate) {\n          // Note: ! is ok as hostAdapter.shouldGenerateFile will always return a basefileName\n          // for .ngfactory.ts files.\n          const genFile = this.compiler.emitTypeCheckStub(sf.fileName, baseFileName !);\n          if (genFile) {\n            this.hostAdapter.updateGeneratedFile(genFile);\n          }\n        }\n      }\n    });\n    this._tsProgram = ts.createProgram(rootNames, this.options, this.hostAdapter, tmpProgram);\n    // Note: the new ts program should be completely reusable by TypeScript as:\n    // - we cache all the files in the hostAdapter\n    // - new new stubs use the exactly same imports/exports as the old once (we assert that in\n    // hostAdapter.updateGeneratedFile).\n    if (tsStructureIsReused(tmpProgram) !== StructureIsReused.Completely) {\n      throw new Error(`Internal Error: The structure of the program changed during codegen.`);\n    }\n  }\n\n  private _createProgramOnError(e: any) {\n    // Still fill the analyzedModules and the tsProgram\n    // so that we don't cause other errors for users who e.g. want to emit the ngProgram.\n    this._analyzedModules = emptyModules;\n    this.oldTsProgram = undefined;\n    this._hostAdapter.isSourceFile = () => false;\n    this._tsProgram = ts.createProgram(this.rootNames, this.options, this.hostAdapter);\n    if (isSyntaxError(e)) {\n      this._addStructuralDiagnostics(e);\n      return;\n    }\n    throw e;\n  }\n\n  private _addStructuralDiagnostics(error: Error) {\n    const diagnostics = this._structuralDiagnostics || (this._structuralDiagnostics = []);\n    if (isSyntaxError(error)) {\n      diagnostics.push(...syntaxErrorToDiagnostics(error));\n    } else {\n      diagnostics.push({\n        messageText: error.toString(),\n        category: ts.DiagnosticCategory.Error,\n        source: SOURCE,\n        code: DEFAULT_ERROR_CODE\n      });\n    }\n  }\n\n  // Note: this returns a ts.Diagnostic so that we\n  // can return errors in a ts.EmitResult\n  private generateFilesForEmit(emitFlags: EmitFlags):\n      {genFiles: GeneratedFile[], genDiags: ts.Diagnostic[]} {\n    try {\n      if (!(emitFlags & EmitFlags.Codegen)) {\n        return {genFiles: [], genDiags: []};\n      }\n      // TODO(tbosch): allow generating files that are not in the rootDir\n      // See https://github.com/angular/angular/issues/19337\n      let genFiles = this.compiler.emitAllImpls(this.analyzedModules)\n                         .filter(genFile => isInRootDir(genFile.genFileUrl, this.options));\n      if (this.oldProgramEmittedGeneratedFiles) {\n        const oldProgramEmittedGeneratedFiles = this.oldProgramEmittedGeneratedFiles;\n        genFiles = genFiles.filter(genFile => {\n          const oldGenFile = oldProgramEmittedGeneratedFiles.get(genFile.genFileUrl);\n          return !oldGenFile || !genFile.isEquivalent(oldGenFile);\n        });\n      }\n      return {genFiles, genDiags: []};\n    } catch (e) {\n      // TODO(tbosch): check whether we can actually have syntax errors here,\n      // as we already parsed the metadata and templates before to create the type check block.\n      if (isSyntaxError(e)) {\n        const genDiags: ts.Diagnostic[] = [{\n          file: undefined,\n          start: undefined,\n          length: undefined,\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n        return {genFiles: [], genDiags};\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Returns undefined if all files should be emitted.\n   */\n  private getSourceFilesForEmit(): ts.SourceFile[]|undefined {\n    // TODO(tbosch): if one of the files contains a `const enum`\n    // always emit all files -> return undefined!\n    let sourceFilesToEmit: ts.SourceFile[]|undefined;\n    if (this.oldProgramEmittedSourceFiles) {\n      sourceFilesToEmit = this.tsProgram.getSourceFiles().filter(sf => {\n        const oldFile = this.oldProgramEmittedSourceFiles !.get(sf.fileName);\n        return !sf.isDeclarationFile && !GENERATED_FILES.test(sf.fileName) && sf !== oldFile;\n      });\n    }\n    return sourceFilesToEmit;\n  }\n\n  private writeFile(\n      outFileName: string, outData: string, writeByteOrderMark: boolean,\n      onError?: (message: string) => void, genFile?: GeneratedFile,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>) {\n    // collect emittedLibrarySummaries\n    let baseFile: ts.SourceFile|undefined;\n    if (genFile) {\n      baseFile = this.tsProgram.getSourceFile(genFile.srcFileUrl);\n      if (baseFile) {\n        if (!this.emittedLibrarySummaries) {\n          this.emittedLibrarySummaries = [];\n        }\n        if (genFile.genFileUrl.endsWith('.ngsummary.json') && baseFile.fileName.endsWith('.d.ts')) {\n          this.emittedLibrarySummaries.push({\n            fileName: baseFile.fileName,\n            text: baseFile.text,\n            sourceFile: baseFile,\n          });\n          this.emittedLibrarySummaries.push({fileName: genFile.genFileUrl, text: outData});\n          if (!this.options.declaration) {\n            // If we don't emit declarations, still record an empty .ngfactory.d.ts file,\n            // as we might need it lateron for resolving module names from summaries.\n            const ngFactoryDts =\n                genFile.genFileUrl.substring(0, genFile.genFileUrl.length - 15) + '.ngfactory.d.ts';\n            this.emittedLibrarySummaries.push({fileName: ngFactoryDts, text: ''});\n          }\n        } else if (outFileName.endsWith('.d.ts') && baseFile.fileName.endsWith('.d.ts')) {\n          const dtsSourceFilePath = genFile.genFileUrl.replace(/\\.ts$/, '.d.ts');\n          // Note: Don't use sourceFiles here as the created .d.ts has a path in the outDir,\n          // but we need one that is next to the .ts file\n          this.emittedLibrarySummaries.push({fileName: dtsSourceFilePath, text: outData});\n        }\n      }\n    }\n    // Filter out generated files for which we didn't generate code.\n    // This can happen as the stub caclulation is not completely exact.\n    // Note: sourceFile refers to the .ngfactory.ts / .ngsummary.ts file\n    // node_emitter_transform already set the file contents to be empty,\n    //  so this code only needs to skip the file if !allowEmptyCodegenFiles.\n    const isGenerated = GENERATED_FILES.test(outFileName);\n    if (isGenerated && !this.options.allowEmptyCodegenFiles &&\n        (!genFile || !genFile.stmts || genFile.stmts.length === 0)) {\n      return;\n    }\n    if (baseFile) {\n      sourceFiles = sourceFiles ? [...sourceFiles, baseFile] : [baseFile];\n    }\n    // TODO: remove any when TS 2.4 support is removed.\n    this.host.writeFile(outFileName, outData, writeByteOrderMark, onError, sourceFiles as any);\n  }\n}\n\nexport function createProgram({rootNames, options, host, oldProgram}: {\n  rootNames: ReadonlyArray<string>,\n  options: CompilerOptions,\n  host: CompilerHost, oldProgram?: Program\n}): Program {\n  return new AngularCompilerProgram(rootNames, options, host, oldProgram);\n}\n\n// Compute the AotCompiler options\nfunction getAotCompilerOptions(options: CompilerOptions): AotCompilerOptions {\n  let missingTranslation = core.MissingTranslationStrategy.Warning;\n\n  switch (options.i18nInMissingTranslations) {\n    case 'ignore':\n      missingTranslation = core.MissingTranslationStrategy.Ignore;\n      break;\n    case 'error':\n      missingTranslation = core.MissingTranslationStrategy.Error;\n      break;\n  }\n\n  let translations: string = '';\n\n  if (options.i18nInFile) {\n    if (!options.i18nInLocale) {\n      throw new Error(`The translation file (${options.i18nInFile}) locale must be provided.`);\n    }\n    translations = fs.readFileSync(options.i18nInFile, 'utf8');\n  } else {\n    // No translations are provided, ignore any errors\n    // We still go through i18n to remove i18n attributes\n    missingTranslation = core.MissingTranslationStrategy.Ignore;\n  }\n\n  return {\n    locale: options.i18nInLocale,\n    i18nFormat: options.i18nInFormat || options.i18nOutFormat, translations, missingTranslation,\n    enableLegacyTemplate: options.enableLegacyTemplate,\n    enableSummariesForJit: options.enableSummariesForJit,\n    preserveWhitespaces: options.preserveWhitespaces,\n    fullTemplateTypeCheck: options.fullTemplateTypeCheck,\n    allowEmptyCodegenFiles: options.allowEmptyCodegenFiles,\n  };\n}\n\nfunction getNgOptionDiagnostics(options: CompilerOptions): ReadonlyArray<Diagnostic> {\n  if (options.annotationsAs) {\n    switch (options.annotationsAs) {\n      case 'decorators':\n      case 'static fields':\n        break;\n      default:\n        return [{\n          messageText:\n              'Angular compiler options \"annotationsAs\" only supports \"static fields\" and \"decorators\"',\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n    }\n  }\n  return [];\n}\n\nfunction normalizeSeparators(path: string): string {\n  return path.replace(/\\\\/g, '/');\n}\n\n/**\n * Returns a function that can adjust a path from source path to out path,\n * based on an existing mapping from source to out path.\n *\n * TODO(tbosch): talk to the TypeScript team to expose their logic for calculating the `rootDir`\n * if none was specified.\n *\n * Note: This function works on normalized paths from typescript.\n *\n * @param outDir\n * @param outSrcMappings\n */\nexport function createSrcToOutPathMapper(\n    outDir: string | undefined, sampleSrcFileName: string | undefined,\n    sampleOutFileName: string | undefined, host: {\n      dirname: typeof path.dirname,\n      resolve: typeof path.resolve,\n      relative: typeof path.relative\n    } = path): (srcFileName: string) => string {\n  let srcToOutPath: (srcFileName: string) => string;\n  if (outDir) {\n    let path: {} = {};  // Ensure we error if we use `path` instead of `host`.\n    if (sampleSrcFileName == null || sampleOutFileName == null) {\n      throw new Error(`Can't calculate the rootDir without a sample srcFileName / outFileName. `);\n    }\n    const srcFileDir = normalizeSeparators(host.dirname(sampleSrcFileName));\n    const outFileDir = normalizeSeparators(host.dirname(sampleOutFileName));\n    if (srcFileDir === outFileDir) {\n      return (srcFileName) => srcFileName;\n    }\n    // calculate the common suffix, stopping\n    // at `outDir`.\n    const srcDirParts = srcFileDir.split('/');\n    const outDirParts = normalizeSeparators(host.relative(outDir, outFileDir)).split('/');\n    let i = 0;\n    while (i < Math.min(srcDirParts.length, outDirParts.length) &&\n           srcDirParts[srcDirParts.length - 1 - i] === outDirParts[outDirParts.length - 1 - i])\n      i++;\n    const rootDir = srcDirParts.slice(0, srcDirParts.length - i).join('/');\n    srcToOutPath = (srcFileName) => host.resolve(outDir, host.relative(rootDir, srcFileName));\n  } else {\n    srcToOutPath = (srcFileName) => srcFileName;\n  }\n  return srcToOutPath;\n}\n\nexport function i18nExtract(\n    formatName: string | null, outFile: string | null, host: ts.CompilerHost,\n    options: CompilerOptions, bundle: MessageBundle): string[] {\n  formatName = formatName || 'xlf';\n  // Checks the format and returns the extension\n  const ext = i18nGetExtension(formatName);\n  const content = i18nSerialize(bundle, formatName, options);\n  const dstFile = outFile || `messages.${ext}`;\n  const dstPath = path.resolve(options.outDir || options.basePath, dstFile);\n  host.writeFile(dstPath, content, false, undefined, []);\n  return [dstPath];\n}\n\nexport function i18nSerialize(\n    bundle: MessageBundle, formatName: string, options: CompilerOptions): string {\n  const format = formatName.toLowerCase();\n  let serializer: Serializer;\n\n  switch (format) {\n    case 'xmb':\n      serializer = new Xmb();\n      break;\n    case 'xliff2':\n    case 'xlf2':\n      serializer = new Xliff2();\n      break;\n    case 'xlf':\n    case 'xliff':\n    default:\n      serializer = new Xliff();\n  }\n\n  return bundle.write(serializer, getPathNormalizer(options.basePath));\n}\n\nfunction getPathNormalizer(basePath?: string) {\n  // normalize sourcepaths by removing the base path and always using \"/\" as a separator\n  return (sourcePath: string) => {\n    sourcePath = basePath ? path.relative(basePath, sourcePath) : sourcePath;\n    return sourcePath.split(path.sep).join('/');\n  };\n}\n\nexport function i18nGetExtension(formatName: string): string {\n  const format = formatName.toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return 'xmb';\n    case 'xlf':\n    case 'xlif':\n    case 'xliff':\n    case 'xlf2':\n    case 'xliff2':\n      return 'xlf';\n  }\n\n  throw new Error(`Unsupported format \"${formatName}\"`);\n}\n\nfunction mergeEmitResults(emitResults: ts.EmitResult[]): ts.EmitResult {\n  const diagnostics: ts.Diagnostic[] = [];\n  let emitSkipped = false;\n  const emittedFiles: string[] = [];\n  for (const er of emitResults) {\n    diagnostics.push(...er.diagnostics);\n    emitSkipped = emitSkipped || er.emitSkipped;\n    emittedFiles.push(...er.emittedFiles);\n  }\n  return {diagnostics, emitSkipped, emittedFiles};\n}\n\nfunction diagnosticSourceOfSpan(span: ParseSourceSpan): ts.SourceFile {\n  // For diagnostics, TypeScript only uses the fileName and text properties.\n  // The redundant '()' are here is to avoid having clang-format breaking the line incorrectly.\n  return ({ fileName: span.start.file.url, text: span.start.file.content } as any);\n}\n\nfunction diagnosticSourceOfFileName(fileName: string, program: ts.Program): ts.SourceFile {\n  const sourceFile = program.getSourceFile(fileName);\n  if (sourceFile) return sourceFile;\n\n  // If we are reporting diagnostics for a source file that is not in the project then we need\n  // to fake a source file so the diagnostic formatting routines can emit the file name.\n  // The redundant '()' are here is to avoid having clang-format breaking the line incorrectly.\n  return ({ fileName, text: '' } as any);\n}\n\n\nfunction diagnosticChainFromFormattedDiagnosticChain(chain: FormattedMessageChain):\n    DiagnosticMessageChain {\n  return {\n    messageText: chain.message,\n    next: chain.next && diagnosticChainFromFormattedDiagnosticChain(chain.next),\n    position: chain.position\n  };\n}\n\nfunction syntaxErrorToDiagnostics(error: Error): Diagnostic[] {\n  const parserErrors = getParseErrors(error);\n  if (parserErrors && parserErrors.length) {\n    return parserErrors.map<Diagnostic>(e => ({\n                                          messageText: e.contextualMessage(),\n                                          file: diagnosticSourceOfSpan(e.span),\n                                          start: e.span.start.offset,\n                                          length: e.span.end.offset - e.span.start.offset,\n                                          category: ts.DiagnosticCategory.Error,\n                                          source: SOURCE,\n                                          code: DEFAULT_ERROR_CODE\n                                        }));\n  } else if (isFormattedError(error)) {\n    return [{\n      messageText: error.message,\n      chain: error.chain && diagnosticChainFromFormattedDiagnosticChain(error.chain),\n      category: ts.DiagnosticCategory.Error,\n      source: SOURCE,\n      code: DEFAULT_ERROR_CODE,\n      position: error.position\n    }];\n  }\n  // Produce a Diagnostic anyway since we know for sure `error` is a SyntaxError\n  return [{\n    messageText: error.message,\n    category: ts.DiagnosticCategory.Error,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  }];\n}\n"]}