{"version":3,"file":"node_emitter_transform.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/node_emitter_transform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GeneratedFile} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {TypeScriptNodeEmitter} from './node_emitter';\nimport {GENERATED_FILES} from './util';\n\nfunction getPreamble(original: string) {\n  return `/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n * ${original}\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */`;\n}\n\n/**\n * Returns a transformer that does two things for generated files (ngfactory etc):\n * - adds a fileoverview JSDoc comment containing Closure Compiler specific \"suppress\"ions in JSDoc.\n *   The new comment will contain any fileoverview comment text from the original source file this\n *   file was generated from.\n * - updates generated files that are not in the given map of generatedFiles to have an empty\n *   list of statements as their body.\n */\nexport function getAngularEmitterTransformFactory(\n    generatedFiles: Map<string, GeneratedFile>, program: ts.Program): () =>\n    (sourceFile: ts.SourceFile) => ts.SourceFile {\n  return function() {\n    const emitter = new TypeScriptNodeEmitter();\n    return function(sourceFile: ts.SourceFile): ts.SourceFile {\n      const g = generatedFiles.get(sourceFile.fileName);\n      const orig = g && program.getSourceFile(g.srcFileUrl);\n      let originalComment = '';\n      if (orig) originalComment = getFileoverviewComment(orig);\n      const preamble = getPreamble(originalComment);\n      if (g && g.stmts) {\n        const orig = program.getSourceFile(g.srcFileUrl);\n        let originalComment = '';\n        if (orig) originalComment = getFileoverviewComment(orig);\n        const [newSourceFile] = emitter.updateSourceFile(sourceFile, g.stmts, preamble);\n        return newSourceFile;\n      } else if (GENERATED_FILES.test(sourceFile.fileName)) {\n        // The file should be empty, but emitter.updateSourceFile would still add imports\n        // and various minutiae.\n        // Clear out the source file entirely, only including the preamble comment, so that\n        // ngc produces an empty .js file.\n        return ts.updateSourceFileNode(\n            sourceFile, [emitter.createCommentStatement(sourceFile, preamble)]);\n      }\n      return sourceFile;\n    };\n  };\n}\n\n/**\n * Parses and returns the comment text (without start and end markers) of a \\@fileoverview comment\n * in the given source file. Returns the empty string if no such comment can be found.\n */\nfunction getFileoverviewComment(sourceFile: ts.SourceFile): string {\n  const trivia = sourceFile.getFullText().substring(0, sourceFile.getStart());\n  const leadingComments = ts.getLeadingCommentRanges(trivia, 0);\n  if (!leadingComments || leadingComments.length === 0) return '';\n  const comment = leadingComments[0];\n  if (comment.kind !== ts.SyntaxKind.MultiLineCommentTrivia) return '';\n  // Only comments separated with a \\n\\n from the file contents are considered file-level comments\n  // in TypeScript.\n  if (sourceFile.getFullText().substring(comment.end, comment.end + 2) !== '\\n\\n') return '';\n  const commentText = sourceFile.getFullText().substring(comment.pos, comment.end);\n  // Closure Compiler ignores @suppress and similar if the comment contains @license.\n  if (commentText.indexOf('@license') !== -1) return '';\n  return commentText.replace(/^\\/\\*\\*/, '').replace(/ ?\\*\\/$/, '');\n}\n"]}