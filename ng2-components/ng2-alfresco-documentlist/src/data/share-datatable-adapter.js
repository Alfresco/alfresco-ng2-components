/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var common_1 = require("@angular/common");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var ShareDataTableAdapter = (function () {
    function ShareDataTableAdapter(documentListService, basePath, schema) {
        this.documentListService = documentListService;
        this.basePath = basePath;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.DEFAULT_ROOT_ID = '-root-';
        this.DEFAULT_DATE_FORMAT = 'medium';
        this.DEFAULT_PAGE_SIZE = 20;
        this.MIN_PAGE_SIZE = 5;
        this._count = 0;
        this._hasMoreItems = false;
        this._totalItems = 0;
        this._skipCount = 0;
        this._maxItems = this.DEFAULT_PAGE_SIZE;
        this.thumbnails = false;
        this.rootFolderId = this.DEFAULT_ROOT_ID;
        this.dataLoaded = new ng2_alfresco_datatable_1.DataLoadedEventEmitter();
        this.rows = [];
        this.columns = schema || [];
        this.resetPagination();
    }
    Object.defineProperty(ShareDataTableAdapter.prototype, "count", {
        get: function () {
            return this._count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShareDataTableAdapter.prototype, "hasMoreItems", {
        get: function () {
            return this._hasMoreItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShareDataTableAdapter.prototype, "totalItems", {
        get: function () {
            return this._totalItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShareDataTableAdapter.prototype, "skipCount", {
        get: function () {
            return this._skipCount;
        },
        set: function (value) {
            if (value !== this._skipCount) {
                this._skipCount = value > 0 ? value : 0;
                this.loadPath(this.currentPath);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShareDataTableAdapter.prototype, "maxItems", {
        get: function () {
            return this._maxItems;
        },
        set: function (value) {
            if (value !== this._maxItems) {
                this._maxItems = value > this.MIN_PAGE_SIZE ? value : this.MIN_PAGE_SIZE;
                this.loadPath(this.currentPath);
            }
        },
        enumerable: true,
        configurable: true
    });
    ShareDataTableAdapter.prototype.getRows = function () {
        return this.rows;
    };
    ShareDataTableAdapter.prototype.setRows = function (rows) {
        this.rows = rows || [];
        this.sort();
    };
    ShareDataTableAdapter.prototype.getColumns = function () {
        return this.columns;
    };
    ShareDataTableAdapter.prototype.setColumns = function (columns) {
        this.columns = columns || [];
    };
    ShareDataTableAdapter.prototype.getValue = function (row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        var dataRow = row;
        var value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.type === 'date') {
            var datePipe = new common_1.DatePipe('en-US');
            var format = col.format || this.DEFAULT_DATE_FORMAT;
            try {
                var result = datePipe.transform(value, format);
                return dataRow.cacheValue(col.key, result);
            }
            catch (err) {
                console.error("Error parsing date " + value + " to format " + format);
                return 'Error';
            }
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                var resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            if (col.key === '$thumbnail') {
                var node = row.node;
                if (node.entry.isFolder) {
                    return this.getImagePath('ft_ic_folder.svg');
                }
                if (node.entry.isFile) {
                    if (this.thumbnails) {
                        if (this.documentListService) {
                            return this.documentListService.getDocumentThumbnailUrl(node);
                        }
                        return null;
                    }
                    if (node.entry.content) {
                        var mimeType = node.entry.content.mimeType;
                        if (mimeType) {
                            var icon = this.documentListService.getMimeTypeIcon(mimeType);
                            if (icon) {
                                return this.getImagePath(icon);
                            }
                        }
                    }
                }
                return this.getImagePath('ft_ic_miscellaneous.svg');
            }
        }
        return dataRow.cacheValue(col.key, value);
    };
    ShareDataTableAdapter.prototype.getSorting = function () {
        return this.sorting;
    };
    ShareDataTableAdapter.prototype.setSorting = function (sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    };
    ShareDataTableAdapter.prototype.sort = function (key, direction) {
        var sorting = this.sorting || new ng2_alfresco_datatable_1.DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    };
    ShareDataTableAdapter.prototype.loadPath = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (path && _this.documentListService) {
                _this.documentListService
                    .getFolder(path, {
                    maxItems: _this._maxItems,
                    skipCount: _this._skipCount,
                    rootFolderId: _this.rootFolderId
                })
                    .subscribe(function (val) {
                    _this.currentPath = path;
                    _this.loadPage(val);
                    _this.dataLoaded.emit(null);
                    resolve(true);
                }, function (error) {
                    reject(error);
                });
            }
            else {
                resolve(false);
            }
        });
    };
    ShareDataTableAdapter.prototype.loadById = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (id && _this.documentListService) {
                _this.documentListService
                    .getFolder(null, {
                    maxItems: _this._maxItems,
                    skipCount: _this._skipCount,
                    rootFolderId: id
                })
                    .subscribe(function (val) {
                    _this.loadPage(val);
                    _this.dataLoaded.emit(null);
                    resolve(true);
                }, function (error) {
                    reject(error);
                });
            }
            else {
                resolve(false);
            }
        });
    };
    ShareDataTableAdapter.prototype.setFilter = function (filter) {
        this.filter = filter;
        if (this.filter && this.currentPath) {
            this.loadPath(this.currentPath);
        }
    };
    ShareDataTableAdapter.prototype.setImageResolver = function (resolver) {
        this.imageResolver = resolver;
    };
    ShareDataTableAdapter.prototype.sortRows = function (rows, sorting) {
        if (sorting && sorting.key && rows && rows.length > 0) {
            rows.sort(function (a, b) {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                var left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                var right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right)
                    : right.localeCompare(left);
            });
        }
    };
    ShareDataTableAdapter.prototype.loadPage = function (page) {
        this.page = page;
        this.resetPagination();
        var rows = [];
        if (page && page.list) {
            var data = page.list.entries;
            if (data && data.length > 0) {
                rows = data.map(function (item) { return new ShareDataRow(item); });
                if (this.filter) {
                    rows = rows.filter(this.filter);
                }
                if (this.columns && this.columns.length > 0) {
                    var sorting = this.getSorting();
                    if (sorting) {
                        this.sortRows(rows, sorting);
                    }
                    else {
                        var sortable = this.columns.filter(function (c) { return c.sortable; });
                        if (sortable.length > 0) {
                            this.sort(sortable[0].key, 'asc');
                        }
                        else {
                            this.sort(this.columns[0].key, 'asc');
                        }
                    }
                }
            }
            var pagination = page.list.pagination;
            if (pagination) {
                this._count = pagination.count;
                this._hasMoreItems = pagination.hasMoreItems;
                this._maxItems = pagination.maxItems;
                this._skipCount = pagination.skipCount;
                this._totalItems = pagination.totalItems;
            }
        }
        this.rows = rows;
    };
    ShareDataTableAdapter.prototype.getImagePath = function (id) {
        return this.basePath + "/assets/images/" + id;
    };
    ShareDataTableAdapter.prototype.resetPagination = function () {
        this._count = 0;
        this._hasMoreItems = false;
        this._totalItems = 0;
        this._skipCount = 0;
        this._maxItems = this.DEFAULT_PAGE_SIZE;
    };
    return ShareDataTableAdapter;
}());
exports.ShareDataTableAdapter = ShareDataTableAdapter;
var ShareDataRow = (function () {
    function ShareDataRow(obj) {
        this.obj = obj;
        this.cache = {};
        this.isSelected = false;
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
    }
    Object.defineProperty(ShareDataRow.prototype, "node", {
        get: function () {
            return this.obj;
        },
        enumerable: true,
        configurable: true
    });
    ShareDataRow.prototype.cacheValue = function (key, value) {
        this.cache[key] = value;
        return value;
    };
    ShareDataRow.prototype.getValue = function (key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ng2_alfresco_core_1.ObjectUtils.getValue(this.obj.entry, key);
    };
    ShareDataRow.prototype.hasValue = function (key) {
        return this.getValue(key) ? true : false;
    };
    return ShareDataRow;
}());
ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
exports.ShareDataRow = ShareDataRow;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGEvc2hhcmUtZGF0YXRhYmxlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOztBQUVILDBDQUEyQztBQUMzQyx1REFBZ0Q7QUFDaEQsaUVBSWdDO0FBS2hDO0lBNkJJLCtCQUFvQixtQkFBd0MsRUFDeEMsUUFBZ0IsRUFDeEIsTUFBb0I7UUFGWix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLGFBQVEsR0FBUixRQUFRLENBQVE7UUE1QnBDLHNCQUFpQixHQUFXLGVBQWUsQ0FBQztRQUM1QyxzQkFBaUIsR0FBVyxrQkFBa0IsQ0FBQztRQUUvQyxvQkFBZSxHQUFXLFFBQVEsQ0FBQztRQUNuQyx3QkFBbUIsR0FBVyxRQUFRLENBQUM7UUFDdkMsc0JBQWlCLEdBQVcsRUFBRSxDQUFDO1FBQy9CLGtCQUFhLEdBQVcsQ0FBQyxDQUFDO1FBV2xCLFdBQU0sR0FBVyxDQUFDLENBQUM7UUFDbkIsa0JBQWEsR0FBWSxLQUFLLENBQUM7UUFDL0IsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUN2QixjQUFTLEdBQVcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBRW5ELGVBQVUsR0FBWSxLQUFLLENBQUM7UUFFNUIsaUJBQVksR0FBVyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBS3hDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwrQ0FBc0IsRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsc0JBQUksd0NBQUs7YUFBVDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0NBQVk7YUFBaEI7WUFD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QUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFDRCxNQUFNLENBQUMsK0JBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELCtCQUFRLEdBQVIsVUFBUyxHQUFXO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7SUFDN0MsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0FoQ0EsQUFnQ0M7QUE5QlUsaUNBQW9CLEdBQVcseUJBQXlCLENBQUM7QUFGdkQsb0NBQVkiLCJmaWxlIjoiZGF0YS9zaGFyZS1kYXRhdGFibGUtYWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE9iamVjdFV0aWxzIH0gZnJvbSAnbmcyLWFsZnJlc2NvLWNvcmUnO1xuaW1wb3J0IHtcbiAgICBQYWdpbmF0aW9uUHJvdmlkZXIsIERhdGFMb2FkZWRFdmVudEVtaXR0ZXIsXG4gICAgRGF0YVRhYmxlQWRhcHRlcixcbiAgICBEYXRhUm93LCBEYXRhQ29sdW1uLCBEYXRhU29ydGluZ1xufSBmcm9tICduZzItYWxmcmVzY28tZGF0YXRhYmxlJztcblxuaW1wb3J0IHsgTm9kZVBhZ2luZywgTm9kZU1pbmltYWxFbnRyeSB9IGZyb20gJy4vLi4vbW9kZWxzL2RvY3VtZW50LWxpYnJhcnkubW9kZWwnO1xuaW1wb3J0IHsgRG9jdW1lbnRMaXN0U2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZG9jdW1lbnQtbGlzdC5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFNoYXJlRGF0YVRhYmxlQWRhcHRlciBpbXBsZW1lbnRzIERhdGFUYWJsZUFkYXB0ZXIsIFBhZ2luYXRpb25Qcm92aWRlciB7XG5cbiAgICBFUlJfUk9XX05PVF9GT1VORDogc3RyaW5nID0gJ1JvdyBub3QgZm91bmQnO1xuICAgIEVSUl9DT0xfTk9UX0ZPVU5EOiBzdHJpbmcgPSAnQ29sdW1uIG5vdCBmb3VuZCc7XG5cbiAgICBERUZBVUxUX1JPT1RfSUQ6IHN0cmluZyA9ICctcm9vdC0nO1xuICAgIERFRkFVTFRfREFURV9GT1JNQVQ6IHN0cmluZyA9ICdtZWRpdW0nO1xuICAgIERFRkFVTFRfUEFHRV9TSVpFOiBudW1iZXIgPSAyMDtcbiAgICBNSU5fUEFHRV9TSVpFOiBudW1iZXIgPSA1O1xuXG4gICAgcHJpdmF0ZSBzb3J0aW5nOiBEYXRhU29ydGluZztcbiAgICBwcml2YXRlIHJvd3M6IERhdGFSb3dbXTtcbiAgICBwcml2YXRlIGNvbHVtbnM6IERhdGFDb2x1bW5bXTtcbiAgICBwcml2YXRlIHBhZ2U6IE5vZGVQYWdpbmc7XG4gICAgcHJpdmF0ZSBjdXJyZW50UGF0aDogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBmaWx0ZXI6IFJvd0ZpbHRlcjtcbiAgICBwcml2YXRlIGltYWdlUmVzb2x2ZXI6IEltYWdlUmVzb2x2ZXI7XG5cbiAgICBwcml2YXRlIF9jb3VudDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9oYXNNb3JlSXRlbXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF90b3RhbEl0ZW1zOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX3NraXBDb3VudDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9tYXhJdGVtczogbnVtYmVyID0gdGhpcy5ERUZBVUxUX1BBR0VfU0laRTtcblxuICAgIHRodW1ibmFpbHM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBkYXRhTG9hZGVkOiBEYXRhTG9hZGVkRXZlbnRFbWl0dGVyO1xuICAgIHJvb3RGb2xkZXJJZDogc3RyaW5nID0gdGhpcy5ERUZBVUxUX1JPT1RfSUQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvY3VtZW50TGlzdFNlcnZpY2U6IERvY3VtZW50TGlzdFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBiYXNlUGF0aDogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHNjaGVtYTogRGF0YUNvbHVtbltdKSB7XG4gICAgICAgIHRoaXMuZGF0YUxvYWRlZCA9IG5ldyBEYXRhTG9hZGVkRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMucm93cyA9IFtdO1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSBzY2hlbWEgfHwgW107XG4gICAgICAgIHRoaXMucmVzZXRQYWdpbmF0aW9uKCk7XG4gICAgfVxuXG4gICAgZ2V0IGNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3VudDtcbiAgICB9XG5cbiAgICBnZXQgaGFzTW9yZUl0ZW1zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW9yZUl0ZW1zO1xuICAgIH1cblxuICAgIGdldCB0b3RhbEl0ZW1zKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbEl0ZW1zO1xuICAgIH1cblxuICAgIGdldCBza2lwQ291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NraXBDb3VudDtcbiAgICB9XG5cbiAgICBzZXQgc2tpcENvdW50KHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLl9za2lwQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NraXBDb3VudCA9IHZhbHVlID4gMCA/IHZhbHVlIDogMDtcbiAgICAgICAgICAgIHRoaXMubG9hZFBhdGgodGhpcy5jdXJyZW50UGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbWF4SXRlbXMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heEl0ZW1zO1xuICAgIH1cblxuICAgIHNldCBtYXhJdGVtcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fbWF4SXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMuX21heEl0ZW1zID0gdmFsdWUgPiB0aGlzLk1JTl9QQUdFX1NJWkUgPyB2YWx1ZSA6IHRoaXMuTUlOX1BBR0VfU0laRTtcbiAgICAgICAgICAgIHRoaXMubG9hZFBhdGgodGhpcy5jdXJyZW50UGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRSb3dzKCk6IEFycmF5PERhdGFSb3c+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBkaXNhYmxlIHRoaXMgYXBpXG4gICAgc2V0Um93cyhyb3dzOiBBcnJheTxEYXRhUm93Pikge1xuICAgICAgICB0aGlzLnJvd3MgPSByb3dzIHx8IFtdO1xuICAgICAgICB0aGlzLnNvcnQoKTtcbiAgICB9XG5cbiAgICBnZXRDb2x1bW5zKCk6IEFycmF5PERhdGFDb2x1bW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1ucztcbiAgICB9XG5cbiAgICBzZXRDb2x1bW5zKGNvbHVtbnM6IEFycmF5PERhdGFDb2x1bW4+KSB7XG4gICAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUocm93OiBEYXRhUm93LCBjb2w6IERhdGFDb2x1bW4pOiBhbnkge1xuICAgICAgICBpZiAoIXJvdykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuRVJSX1JPV19OT1RfRk9VTkQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29sKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5FUlJfQ09MX05PVF9GT1VORCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGFSb3c6IFNoYXJlRGF0YVJvdyA9IDxTaGFyZURhdGFSb3c+IHJvdztcbiAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSByb3cuZ2V0VmFsdWUoY29sLmtleSk7XG4gICAgICAgIGlmIChkYXRhUm93LmNhY2hlW2NvbC5rZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhUm93LmNhY2hlW2NvbC5rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbC50eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgIGxldCBkYXRlUGlwZSA9IG5ldyBEYXRlUGlwZSgnZW4tVVMnKTtcbiAgICAgICAgICAgIGxldCBmb3JtYXQgPSBjb2wuZm9ybWF0IHx8IHRoaXMuREVGQVVMVF9EQVRFX0ZPUk1BVDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVJvdy5jYWNoZVZhbHVlKGNvbC5rZXksIHJlc3VsdCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwYXJzaW5nIGRhdGUgJHt2YWx1ZX0gdG8gZm9ybWF0ICR7Zm9ybWF0fWApO1xuICAgICAgICAgICAgICAgIHJldHVybiAnRXJyb3InO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbC50eXBlID09PSAnaW1hZ2UnKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmltYWdlUmVzb2x2ZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZWQgPSB0aGlzLmltYWdlUmVzb2x2ZXIocm93LCBjb2wpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29sLmtleSA9PT0gJyR0aHVtYm5haWwnKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGUgPSAoPFNoYXJlRGF0YVJvdz4gcm93KS5ub2RlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZW50cnkuaXNGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW1hZ2VQYXRoKCdmdF9pY19mb2xkZXIuc3ZnJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZW50cnkuaXNGaWxlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGh1bWJuYWlscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRMaXN0U2VydmljZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50TGlzdFNlcnZpY2UuZ2V0RG9jdW1lbnRUaHVtYm5haWxVcmwobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmVudHJ5LmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaW1lVHlwZSA9IG5vZGUuZW50cnkuY29udGVudC5taW1lVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpY29uID0gdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmdldE1pbWVUeXBlSWNvbihtaW1lVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGljb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW1hZ2VQYXRoKGljb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEltYWdlUGF0aCgnZnRfaWNfbWlzY2VsbGFuZW91cy5zdmcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGFSb3cuY2FjaGVWYWx1ZShjb2wua2V5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0U29ydGluZygpOiBEYXRhU29ydGluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRpbmc7XG4gICAgfVxuXG4gICAgc2V0U29ydGluZyhzb3J0aW5nOiBEYXRhU29ydGluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnNvcnRpbmcgPSBzb3J0aW5nO1xuICAgICAgICB0aGlzLnNvcnRSb3dzKHRoaXMucm93cywgdGhpcy5zb3J0aW5nKTtcbiAgICB9XG5cbiAgICBzb3J0KGtleT86IHN0cmluZywgZGlyZWN0aW9uPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCBzb3J0aW5nID0gdGhpcy5zb3J0aW5nIHx8IG5ldyBEYXRhU29ydGluZygpO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBzb3J0aW5nLmtleSA9IGtleTtcbiAgICAgICAgICAgIHNvcnRpbmcuZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8ICdhc2MnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U29ydGluZyhzb3J0aW5nKTtcbiAgICB9XG5cbiAgICBsb2FkUGF0aChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhdGggJiYgdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgIC5nZXRGb2xkZXIocGF0aCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuX21heEl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcENvdW50OiB0aGlzLl9za2lwQ291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICByb290Rm9sZGVySWQ6IHRoaXMucm9vdEZvbGRlcklkXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkUGFnZSg8Tm9kZVBhZ2luZz52YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhTG9hZGVkLmVtaXQobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgbG9hZEJ5SWQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoaWQgJiYgdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgIC5nZXRGb2xkZXIobnVsbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuX21heEl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcENvdW50OiB0aGlzLl9za2lwQ291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICByb290Rm9sZGVySWQ6IGlkXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRQYWdlKDxOb2RlUGFnaW5nPnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhTG9hZGVkLmVtaXQobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBzZXRGaWx0ZXIoZmlsdGVyOiBSb3dGaWx0ZXIpIHtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG5cbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyICYmIHRoaXMuY3VycmVudFBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBhdGgodGhpcy5jdXJyZW50UGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRJbWFnZVJlc29sdmVyKHJlc29sdmVyOiBJbWFnZVJlc29sdmVyKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VSZXNvbHZlciA9IHJlc29sdmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgc29ydFJvd3Mocm93czogRGF0YVJvd1tdLCBzb3J0aW5nOiBEYXRhU29ydGluZykge1xuICAgICAgICBpZiAoc29ydGluZyAmJiBzb3J0aW5nLmtleSAmJiByb3dzICYmIHJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcm93cy5zb3J0KChhOiBTaGFyZURhdGFSb3csIGI6IFNoYXJlRGF0YVJvdykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhLm5vZGUuZW50cnkuaXNGb2xkZXIgIT09IGIubm9kZS5lbnRyeS5pc0ZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5ub2RlLmVudHJ5LmlzRm9sZGVyID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gYS5nZXRWYWx1ZShzb3J0aW5nLmtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IChsZWZ0IGluc3RhbmNlb2YgRGF0ZSkgPyBsZWZ0LnZhbHVlT2YoKS50b1N0cmluZygpIDogbGVmdC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSAnJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcmlnaHQgPSBiLmdldFZhbHVlKHNvcnRpbmcua2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSAocmlnaHQgaW5zdGFuY2VvZiBEYXRlKSA/IHJpZ2h0LnZhbHVlT2YoKS50b1N0cmluZygpIDogcmlnaHQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByaWdodCA9ICcnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0aW5nLmRpcmVjdGlvbiA9PT0gJ2FzYydcbiAgICAgICAgICAgICAgICAgICAgPyBsZWZ0LmxvY2FsZUNvbXBhcmUocmlnaHQpXG4gICAgICAgICAgICAgICAgICAgIDogcmlnaHQubG9jYWxlQ29tcGFyZShsZWZ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkUGFnZShwYWdlOiBOb2RlUGFnaW5nKSB7XG4gICAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gICAgICAgIHRoaXMucmVzZXRQYWdpbmF0aW9uKCk7XG5cbiAgICAgICAgbGV0IHJvd3MgPSBbXTtcblxuICAgICAgICBpZiAocGFnZSAmJiBwYWdlLmxpc3QpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gcGFnZS5saXN0LmVudHJpZXM7XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByb3dzID0gZGF0YS5tYXAoaXRlbSA9PiBuZXcgU2hhcmVEYXRhUm93KGl0ZW0pKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICByb3dzID0gcm93cy5maWx0ZXIodGhpcy5maWx0ZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNvcnQgYnkgZmlyc3Qgc29ydGFibGUgb3IganVzdCBmaXJzdCBjb2x1bW5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5zICYmIHRoaXMuY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzb3J0aW5nID0gdGhpcy5nZXRTb3J0aW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRSb3dzKHJvd3MsIHNvcnRpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNvcnRhYmxlID0gdGhpcy5jb2x1bW5zLmZpbHRlcihjID0+IGMuc29ydGFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnQoc29ydGFibGVbMF0ua2V5LCAnYXNjJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydCh0aGlzLmNvbHVtbnNbMF0ua2V5LCAnYXNjJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBwYWdpbmF0aW9uID0gcGFnZS5saXN0LnBhZ2luYXRpb247XG4gICAgICAgICAgICBpZiAocGFnaW5hdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvdW50ID0gcGFnaW5hdGlvbi5jb3VudDtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNNb3JlSXRlbXMgPSBwYWdpbmF0aW9uLmhhc01vcmVJdGVtcztcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhJdGVtcyA9IHBhZ2luYXRpb24ubWF4SXRlbXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2tpcENvdW50ID0gcGFnaW5hdGlvbi5za2lwQ291bnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG90YWxJdGVtcyA9IHBhZ2luYXRpb24udG90YWxJdGVtcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucm93cyA9IHJvd3M7XG4gICAgfVxuXG4gICAgZ2V0SW1hZ2VQYXRoKGlkOiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5iYXNlUGF0aH0vYXNzZXRzL2ltYWdlcy8ke2lkfWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldFBhZ2luYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5faGFzTW9yZUl0ZW1zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3RvdGFsSXRlbXMgPSAwO1xuICAgICAgICB0aGlzLl9za2lwQ291bnQgPSAwO1xuICAgICAgICB0aGlzLl9tYXhJdGVtcyA9IHRoaXMuREVGQVVMVF9QQUdFX1NJWkU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2hhcmVEYXRhUm93IGltcGxlbWVudHMgRGF0YVJvdyB7XG5cbiAgICBzdGF0aWMgRVJSX09CSkVDVF9OT1RfRk9VTkQ6IHN0cmluZyA9ICdPYmplY3Qgc291cmNlIG5vdCBmb3VuZCc7XG5cbiAgICBjYWNoZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGdldCBub2RlKCk6IE5vZGVNaW5pbWFsRW50cnkge1xuICAgICAgICByZXR1cm4gdGhpcy5vYmo7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBvYmo6IE5vZGVNaW5pbWFsRW50cnkpIHtcbiAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihTaGFyZURhdGFSb3cuRVJSX09CSkVDVF9OT1RfRk9VTkQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FjaGVWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdFV0aWxzLmdldFZhbHVlKHRoaXMub2JqLmVudHJ5LCBrZXkpO1xuICAgIH1cblxuICAgIGhhc1ZhbHVlKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKGtleSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvd0ZpbHRlciB7XG4gICAgKHZhbHVlOiBTaGFyZURhdGFSb3csIGluZGV4OiBudW1iZXIsIGFycmF5OiBTaGFyZURhdGFSb3dbXSk6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZVJlc29sdmVyIHtcbiAgICAocm93OiBEYXRhUm93LCBjb2x1bW46IERhdGFDb2x1bW4pOiBzdHJpbmc7XG59XG4iXX0=
