/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var FileUploadingListComponent = (function () {
    function FileUploadingListComponent(el) {
        this.el = el;
        console.log('filesUploadingList constructor', el);
    }
    FileUploadingListComponent.prototype.abort = function (id) {
        var file = this.filesUploadingList.filter(function (uploadingFileModel) {
            return uploadingFileModel.id === id;
        });
        file[0].emitAbort();
    };
    FileUploadingListComponent.prototype.cancelAllFiles = function ($event) {
        if ($event) {
            $event.preventDefault();
        }
        this.filesUploadingList.forEach(function (uploadingFileModel) {
            uploadingFileModel.emitAbort();
        });
    };
    FileUploadingListComponent.prototype.isUploadCompleted = function () {
        var isPending = false;
        var isAllCompleted = true;
        for (var i = 0; i < this.filesUploadingList.length && !isPending; i++) {
            var uploadingFileModel = this.filesUploadingList[i];
            if (!uploadingFileModel.done && !uploadingFileModel.abort) {
                isPending = true;
                isAllCompleted = false;
            }
        }
        return isAllCompleted;
    };
    return FileUploadingListComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], FileUploadingListComponent.prototype, "filesUploadingList", void 0);
FileUploadingListComponent = __decorate([
    core_1.Component({
        selector: 'alfresco-file-uploading-list',
        moduleId: module.id,
        template: "<div [ngClass]=\"{hide:  isUploadCompleted()}\" [ngClass]=\"{show:   !isUploadCompleted()}\"      class=\"body-dialog-header\">     <div class=\"body-dialog-action\"></div>     <div class=\"body-dialog-cancel\"><a data-automation-id=\"cancel_upload_all\" href=\"#\" (click)=\"cancelAllFiles($event)\">{{'FILE_UPLOAD.BUTTON.CANCEL' | translate}}</a></div> </div> <table class=\"mdl-data-table mdl-js-data-table mdl-shadow--2dp\">     <tr>         <th>{{'FILE_UPLOAD.FILE_INFO.NAME' | translate}}</th>         <th>{{'FILE_UPLOAD.FILE_INFO.PROGRESS' | translate}}</th>         <th class=\"mdl-cell--hide-phone size-column\">{{'FILE_UPLOAD.FILE_INFO.SIZE' | translate}}</th>         <th>{{'FILE_UPLOAD.FILE_INFO.ACTION' | translate}}</th>     </tr>     <tr *ngFor=\"let file of filesUploadingList\" tabindex=\"0\">         <td attr.data-automation-id=\"dialog_{{file.name}}\" class=\"mdl-data-table__cell--non-numeric\"><div class=\"truncate\">{{file.name}}</div></td>         <td _ngcontent-hvq-3=\"\">             <div _ngcontent-hvq-3=\"\" class=\"mdl-progress mdl-js-progress is-upgraded\" id=\"{{file.id}}\"                  data-upgraded=\",MaterialProgress\">                 <div class=\"progressbar bar bar1\" attr.data-automation-id=\"dialog_progress_{{file.name}}\" [style.width.%]=\"file.progress.percent\"></div>                 <div class=\"bufferbar bar bar2\" style=\"width: 100%;\"></div>                 <div class=\"auxbar bar bar3\" style=\"width: 0%;\"></div>             </div>         </td>         <td class=\"mdl-data-table__cell--non-numeric mdl-cell--hide-phone size-column\" attr.data-automation-id=\"{{file.name}}_filesize\">{{file.size}}</td>         <td>             <span *ngIf=\"file.done && !file.abort\" ><i data-automation-id=\"done_icon\" class=\"material-icons action-icons\">done</i></span>             <span *ngIf=\"file.uploading\" (click)=\"abort(file.id)\" class=\"cursor\" tabindex=\"0\"><i data-automation-id=\"abort_cancel_upload\"                                                                                      class=\"material-icons action-icons\">                 remove_circle_outline</i></span>             <span *ngIf=\"file.abort\"><i class=\"material-icons action-icons\" data-automation-id=\"upload_stopped\" tabindex=\"0\">remove_circle</i></span>         </td>     </tr> </table>",
        styles: [".mdl-data-table {     width: 100%;     border: 0px; }  .cursor {     cursor: pointer; }  .body-dialog-header {     display: -webkit-box;     display: -moz-box;     display: -ms-flexbox;     display: -webkit-flex;     display: flex;     background-color: #f5f5f5;     border-bottom: solid 1px #eee;     height: 30px;     line-height: 30px; }  .body-dialog-action {     -webkit-flex: 1 1 auto;     flex: 1 1 auto;     overflow: hidden;     padding: 0 18px;     text-overflow: ellipsis;     white-space: nowrap;     word-wrap: break-word; }  .body-dialog-cancel {     -webkit-flex: none;     flex: none;     display: inline;     padding-right: 13px;     text-align: right; }  .action-icons {     text-align: center;     width: 100%; } :host .truncate {     margin-left: auto;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis; }  :host .mdl-progress{     width: 150px; }  @media (max-device-width: 360px){     .truncate {         max-width: 50px;         margin-left: 0px;     } }  @media (max-device-width: 568px) {     .truncate {         width: 60px;     }     .mdl-progress {         width: 60px;     } }  @media (max-width: 740px) {     .truncate {         max-width: 80px;     }      .mdl-progress {         max-width: 70px;     }      .size-column {         display: none;     } }  @media (min-width: 740px) {     .truncate {         width: 249px;     }      .size-column {         display: table-cell;     } }"]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], FileUploadingListComponent);
exports.FileUploadingListComponent = FileUploadingListComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
