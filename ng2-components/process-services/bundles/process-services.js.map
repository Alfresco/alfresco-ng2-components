{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap ac2d9a2b9ae4ba8797aa","webpack:///external \"@angular/core\"","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///external \"rxjs/Rx\"","webpack:///external \"ng2-alfresco-core\"","webpack:///external \"@angular/material\"","webpack:///./process-services/form/components/widgets/widget.component.ts","webpack:///external \"moment\"","webpack:///./process-services/form/services/form.service.ts","webpack:///external \"ng2-alfresco-datatable\"","webpack:///./process-services/form/components/widgets/core/form-widget.model.ts","webpack:///external \"@angular/forms\"","webpack:///./process-services/form/components/widgets/core/index.ts","webpack:///./process-services/form/components/widgets/core/form-field-types.ts","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./process-services/form/events/form.event.ts","webpack:///./process-services/form/services/ecm-model.service.ts","webpack:///./process-services/form/components/widgets/core/form-field-validator.ts","webpack:///./process-services/form/components/form.component.ts","webpack:///./process-services/form/events/index.ts","webpack:///./process-services/form/events/form-field.event.ts","webpack:///./process-services/form/components/widgets/core/container.model.ts","webpack:///./process-services/form/services/node.service.ts","webpack:///./process-services/form/services/widget-visibility.service.ts","webpack:///./process-services/form/components/widgets/index.ts","webpack:///external \"@angular/cdk/keycodes\"","webpack:///./process-services/form/events/validate-dynamic-table-row.event.ts","webpack:///./process-services/form/components/widgets/core/form-field.model.ts","webpack:///./process-services/form/components/widgets/core/container-column.model.ts","webpack:///./process-services/form/components/widgets/core/error-message.model.ts","webpack:///./process-services/form/components/widgets/core/form-outcome.model.ts","webpack:///./process-services/form/components/widgets/core/tab.model.ts","webpack:///./process-services/form/components/widgets/core/content-link.model.ts","webpack:///./process-services/form/components/form.component.scss?636d","webpack:///./process-services/form/components/form-list.component.ts","webpack:///./process-services/form/components/widgets/content/content.widget.ts","webpack:///./process-services/form/services/process-content.service.ts","webpack:///./process-services/form/components/start-form.component.ts","webpack:///./process-services/form/components/widgets/container/container.widget.ts","webpack:///./process-services/form/components/widgets/tabs/tabs.widget.ts","webpack:///./process-services/form/components/widgets/unknown/unknown.widget.ts","webpack:///./process-services/form/components/widgets/amount/amount.widget.ts","webpack:///./process-services/form/components/widgets/attach/attach.widget.ts","webpack:///./process-services/form/components/widgets/checkbox/checkbox.widget.ts","webpack:///./process-services/form/components/widgets/date/date.widget.ts","webpack:///./process-services/form/components/widgets/display-text/display-text.widget.ts","webpack:///./process-services/form/components/widgets/document/document.widget.ts","webpack:///./process-services/form/components/widgets/dropdown/dropdown.widget.ts","webpack:///./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.ts","webpack:///./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.model.ts","webpack:///./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.ts","webpack:///./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.ts","webpack:///./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.ts","webpack:///./process-services/form/components/widgets/dynamic-table/editors/row.editor.ts","webpack:///./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.ts","webpack:///./process-services/form/components/widgets/error/error.component.ts","webpack:///./process-services/form/components/widgets/functional-group/functional-group.widget.ts","webpack:///./process-services/form/components/widgets/hyperlink/hyperlink.widget.ts","webpack:///./process-services/form/components/widgets/multiline-text/multiline-text.widget.ts","webpack:///./process-services/form/components/widgets/number/number.widget.ts","webpack:///./process-services/form/components/widgets/people/people.widget.ts","webpack:///./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.ts","webpack:///./process-services/form/components/widgets/text/text-mask.component.ts","webpack:///./process-services/form/components/widgets/text/text.widget.ts","webpack:///./process-services/form/components/widgets/typeahead/typeahead.widget.ts","webpack:///./process-services/form/components/widgets/upload/upload.widget.ts","webpack:///./process-services/form/services/form-rendering.service.ts","webpack:///./process-services/index.ts","webpack:///./process-services/form/index.ts","webpack:///./process-services/form/events/form-error.event.ts","webpack:///./process-services/form/events/validate-form-field.event.ts","webpack:///./process-services/form/events/validate-form.event.ts","webpack:///./process-services/form/models/form-definition.model.ts","webpack:///./process-services/form/components/widgets/core/form.model.ts","webpack:///./process-services/form/components/widgets/core/form-outcome-event.model.ts","webpack:///./process-services/form/models/node-metadata.model.ts","webpack:///./process-services/form/components/form.component.html","webpack:///./process-services/form/components/form.component.scss","webpack:///./process-services/form/components/form-list.component.html","webpack:///./process-services/form/components/form-list.component.scss?d3f9","webpack:///./process-services/form/components/form-list.component.scss","webpack:///./process-services/form/components/widgets/content/content.widget.html","webpack:///./process-services/form/components/widgets/content/content.widget.scss?5518","webpack:///./process-services/form/components/widgets/content/content.widget.scss","webpack:///./process-services/form/components/start-form.component.html","webpack:///./process-services/form/components/widgets/container/container.widget.model.ts","webpack:///./process-services/form/components/widgets/container/container.widget.html","webpack:///./process-services/form/components/widgets/container/container.widget.scss?71d7","webpack:///./process-services/form/components/widgets/container/container.widget.scss","webpack:///./process-services/form/components/widgets/tabs/tabs.widget.html","webpack:///./process-services/form/components/widgets/unknown/unknown.widget.scss?1410","webpack:///./process-services/form/components/widgets/unknown/unknown.widget.scss","webpack:///./process-services/form/components/widgets/amount/amount.widget.html","webpack:///./process-services/form/components/widgets/amount/amount.widget.scss?7364","webpack:///./process-services/form/components/widgets/amount/amount.widget.scss","webpack:///./process-services/form/components/widgets/attach/attach.widget.html","webpack:///./process-services/form/components/widgets/attach/attach.widget.css?9c90","webpack:///./process-services/form/components/widgets/attach/attach.widget.css","webpack:///./process-services/form/components/widgets/checkbox/checkbox.widget.html","webpack:///./process-services/form/components/widgets/date/date.widget.html","webpack:///./process-services/form/components/widgets/date/date.widget.scss?75cb","webpack:///./process-services/form/components/widgets/date/date.widget.scss","webpack:///./process-services/form/components/widgets/display-text/display-text.widget.html","webpack:///./process-services/form/components/widgets/display-text/display-text.widget.scss?7c14","webpack:///./process-services/form/components/widgets/display-text/display-text.widget.scss","webpack:///./process-services/form/components/widgets/document/document.widget.html","webpack:///./process-services/form/components/widgets/dropdown/dropdown.widget.html","webpack:///./process-services/form/components/widgets/dropdown/dropdown.widget.scss?176c","webpack:///./process-services/form/components/widgets/dropdown/dropdown.widget.scss","webpack:///./process-services/form/components/widgets/dynamic-table/date-cell-validator-model.ts","webpack:///./process-services/form/components/widgets/dynamic-table/number-cell-validator.model.ts","webpack:///./process-services/form/components/widgets/dynamic-table/required-cell-validator.model.ts","webpack:///./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.html","webpack:///./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.scss?3b41","webpack:///./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.scss","webpack:///./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.html","webpack:///./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss?fa7e","webpack:///./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss","webpack:///./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.html","webpack:///./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.scss?c901","webpack:///./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.scss","webpack:///./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.html","webpack:///./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss?a821","webpack:///./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss","webpack:///./process-services/form/components/widgets/dynamic-table/editors/row.editor.html","webpack:///./process-services/form/components/widgets/dynamic-table/editors/row.editor.css?8686","webpack:///./process-services/form/components/widgets/dynamic-table/editors/row.editor.css","webpack:///./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.html","webpack:///./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.scss?263d","webpack:///./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.scss","webpack:///external \"@angular/animations\"","webpack:///./process-services/form/components/widgets/error/error.component.html","webpack:///./process-services/form/components/widgets/error/error.component.scss?11a4","webpack:///./process-services/form/components/widgets/error/error.component.scss","webpack:///./process-services/form/components/widgets/functional-group/functional-group.widget.html","webpack:///./process-services/form/components/widgets/functional-group/functional-group.widget.scss?e79d","webpack:///./process-services/form/components/widgets/functional-group/functional-group.widget.scss","webpack:///./process-services/form/components/widgets/hyperlink/hyperlink.widget.html","webpack:///./process-services/form/components/widgets/hyperlink/hyperlink.widget.scss?1a53","webpack:///./process-services/form/components/widgets/hyperlink/hyperlink.widget.scss","webpack:///./process-services/form/components/widgets/multiline-text/multiline-text.widget.html","webpack:///./process-services/form/components/widgets/multiline-text/multiline-text.widget.scss?d774","webpack:///./process-services/form/components/widgets/multiline-text/multiline-text.widget.scss","webpack:///./process-services/form/components/widgets/number/number.widget.html","webpack:///./process-services/form/components/widgets/number/number.widget.scss?cf92","webpack:///./process-services/form/components/widgets/number/number.widget.scss","webpack:///./process-services/form/components/widgets/people/people.widget.html","webpack:///./process-services/form/components/widgets/people/people.widget.scss?7984","webpack:///./process-services/form/components/widgets/people/people.widget.scss","webpack:///./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.html","webpack:///./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.scss?9227","webpack:///./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.scss","webpack:///./process-services/form/components/widgets/text/text.widget.html","webpack:///./process-services/form/components/widgets/text/text.widget.scss?204f","webpack:///./process-services/form/components/widgets/text/text.widget.scss","webpack:///./process-services/form/components/widgets/typeahead/typeahead.widget.html","webpack:///./process-services/form/components/widgets/typeahead/typeahead.widget.scss?6d01","webpack:///./process-services/form/components/widgets/typeahead/typeahead.widget.scss","webpack:///./process-services/form/components/widgets/upload/upload.widget.html","webpack:///./process-services/form/components/widgets/upload/upload.widget.scss?3c48","webpack:///./process-services/form/components/widgets/upload/upload.widget.scss","webpack:///./process-services/form/form-module.ts","webpack:///external \"@angular/http\"","webpack:///./process-services/form/components/material.module.ts","webpack:///./process-services/form/components/form-custom-button.directive.ts","webpack:///./process-services/form/components/form-field/form-field.component.ts","webpack:///./process-services/form/services/activiti-alfresco.service.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_2__","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_15__","__WEBPACK_EXTERNAL_MODULE_55__","__WEBPACK_EXTERNAL_MODULE_342__","__WEBPACK_EXTERNAL_MODULE_375__","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","decorators","target","key","desc","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","paramIndex","decorator","setPrototypeOf","Array","assign","__WEBPACK_IMPORTED_MODULE_1__angular_core__","baseHost","(click)","(blur)","(change)","(focus)","(focusin)","(focusout)","(input)","(invalid)","(select)","__webpack_exports__","WidgetComponent","WidgetComponent_1","[object Object]","formService","readOnly","fieldChanged","field","required","validationSummary","value","undefined","isValid","isRequired","emit","url","DEFAULT_HYPERLINK_URL","hyperlinkUrl","test","DEFAULT_HYPERLINK_SCHEME","displayText","event","formEvents","next","__WEBPACK_IMPORTED_MODULE_0_tslib__","selector","template","host","encapsulation","None","__WEBPACK_IMPORTED_MODULE_5__ecm_model_service__","FormService","FormService_1","ecmModelService","apiService","logService","formLoaded","__WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__","formDataRefreshed","formFieldValueChanged","taskCompleted","taskCompletedError","taskSaved","taskSavedError","formContentClicked","validateForm","validateFormField","validateDynamicTableRow","executeOutcome","taskApi","getInstance","activiti","modelsApi","editorApi","processApi","processInstanceVariablesApi","usersWorkflowApi","groupsApi","json","data","form","__WEBPACK_IMPORTED_MODULE_4__components_widgets_core_index__","fields","outcomes","id","SAVE_ACTION","isSystem","formName","create","observer","createForm","subscribe","searchEcmType","MODEL_NAME","customType","formDefinitionModel","__WEBPACK_IMPORTED_MODULE_3__models_form_definition_model__","lastUpdatedByFullName","lastUpdated","entry","properties","addFieldsToAForm","formData","complete","err","handleError","dataModel","description","modelType","stencilSet","fromPromise","createModel","formId","formModel","saveForm","log","getModels","map","forms","find","formdata","catch","toJsonArray","getProcessDefinitions","processInstanceId","getProcessInstanceVariables","toJson","listTasks","taskId","getTask","formValues","body","JSON","stringify","values","saveTaskForm","outcome","completeTaskForm","getTaskForm","getForm","opts","filter","filterText","getFormId","processId","getProcessInstanceStartForm","getProcessInstance","getProcessDefinitionStartForm","getRestFieldValues","processDefinitionId","column","getRestTableFieldValues","getRestFieldValuesColumn","userId","userApi","getUserProfilePictureUrl","groupId","option","getUsers","switchMap","response","user","userImage","getUserProfileImageApi","of","combineAll","defaultIfEmpty","getGroups","res","result","error","errMsg","UNKNOWN_ERROR_MESSAGE","message","status","statusText","GENERIC_ERROR_MESSAGE","throw","FormWidgetModel","fieldType","type","tab","__WEBPACK_IMPORT_KEY__","__WEBPACK_IMPORTED_MODULE_15__error_message_model__","indexOf","FormFieldTypes","isReadOnlyType","READONLY_TYPES","isContainerType","CONTAINER","GROUP","DYNAMIC_TABLE","TEXT","MULTILINE_TEXT","DROPDOWN","HYPERLINK","RADIO_BUTTONS","DISPLAY_VALUE","READONLY_TEXT","UPLOAD","TYPEAHEAD","FUNCTIONAL_GROUP","PEOPLE","BOOLEAN","NUMBER","DATE","AMOUNT","DOCUMENT","list","toString","item","push","join","mediaQuery","alreadyImportedModules","FormEvent","isDefaultPrevented","defaultPrevented","core_1","ng2_alfresco_core_1","Rx_1","EcmModelService","createEcmTypeForActivitiForm","_this","Observable","searchActivitiEcmModel","model","saveFomType","typeForm","createActivitiEcmModel","getEcmModels","ecmModels","entries","EcmModelService_1","createEcmModel","MODEL_NAMESPACE","info","activeEcmModel","modelActive","createEcmTypeWithProperties","typeCreated","ecmType","createEcmType","TYPE_MODEL","addPropertyToAType","properyAdded","typeName","modelName","getEcmType","customTypes","prefixedName","title","core","customModelApi","activateCustomModel","nameSpace","createCustomModel","getAllCustomModel","getAllCustomType","parentType","cleanNameType","createCustomType","formFields","dataType","multiValued","mandatory","mandatoryEnforced","addPropertyToType","cleanName","split","replace","__decorate","Injectable","AlfrescoApiService","_a","_b","LogService","__WEBPACK_IMPORTED_MODULE_1__form_field_types__","RequiredFieldValidator","supportedTypes","isSupported","hasEmptyValue","emptyOption","options","opt","NumberFieldValidator","isNaN","valueStr","pattern","RegExp","enableFractions","match","DateFieldValidator","inputDate","dateFormat","__WEBPACK_IMPORTED_MODULE_0_moment__","isValidDate","dateDisplayFormat","MinDateFieldValidator","MIN_DATE_FORMAT","minValue","min","isBefore","attributes","set","toLocaleString","MaxDateFieldValidator","MAX_DATE_FORMAT","maxValue","max","isAfter","MinLengthFieldValidator","minLength","MaxLengthFieldValidator","maxLength","MinValueFieldValidator","isNumber","MaxValueFieldValidator","RegExFieldValidator","regexPattern","FixedValueFieldValidator","hasValidName","hasValidId","toLocaleLowerCase","hasStringValue","hasOptions","hasValidNameOrValidId","FORM_FIELD_VALIDATORS","index_1","ecm_model_service_1","form_service_1","node_service_1","index_2","widget_visibility_service_1","FormComponent","visibilityService","nodeService","saveMetadata","showTitle","showCompleteButton","disableCompleteButton","disableStartProcessButton","showSaveButton","showDebugButton","showRefreshButton","showValidationIcon","fieldValidators","formSaved","EventEmitter","formCompleted","onError","debugMode","hasForm","isTitleEnabled","taskName","isOutcomeButtonEnabled","FormOutcomeModel","COMPLETE_ACTION","START_PROCESS_ACTION","isOutcomeButtonVisible","isFormReadOnly","isSelected","ngOnInit","content","ngOnChanges","changes","currentValue","getFormByTaskId","getFormDefinitionByFormId","getFormDefinitionByFormName","nodeId","loadFormForEcmNode","refreshFormData","onOutcomeClicked","onExecuteOutcome","FormComponent_1","SAVE_OUTCOME_ID","COMPLETE_OUTCOME_ID","START_PROCESS_OUTCOME_ID","CUSTOM_OUTCOME_ID","onTaskSaved","storeFormAsMetadata","onRefreshClicked","loadForm","findProcessVariablesByTaskId","task","isAProcessTask","getTaskProcessVariable","taskRepresentation","processDefinitionDeploymentId","Promise","resolve","reject","processVariables","parsedForm","parseForm","refreshVisibility","onFormLoaded","getFormDefinitionById","getFormDefinitionByName","onTaskSavedError","onTaskCompleted","onTaskCompletedError","FormModel","getFormDefinitionOutcomes","checkVisibility","onFormDataRefreshed","getNodeMetadata","metadata","loadFormFromActiviti","nodeType","searchFrom","loadFormFromFormId","createFormFromANode","formMetadata","createNodeMetadata","path","nameNode","FormErrorEvent","args","FormOutcomeEvent","Input","FormValues","Output","_c","_d","_e","_f","_g","_h","_j","Component","styles","ViewEncapsulation","_k","_l","WidgetVisibilityService","_m","_o","NodeService","__WEBPACK_IMPORTED_MODULE_5__validate_dynamic_table_row_event__","__WEBPACK_IMPORTED_MODULE_0__form_event__","FormFieldEvent","super","__WEBPACK_IMPORTED_MODULE_0__form_widget_model__","ContainerModel","isVisible","__WEBPACK_IMPORTED_MODULE_3__models_node_metadata_model__","nodes","getNodeInfo","cleanMetadataFromSemicolon","createNode","generateUuid","relativePath","addNode","Math","random","moment","tabs","tabModel","refreshEntityVisibility","getFormFields","element","visible","evaluateVisibility","visibilityCondition","visibilityObj","isLeftFieldPresent","leftFormFieldId","leftRestResponseId","isFieldVisible","leftValue","getLeftValue","rightValue","getRightValue","actualResult","evaluateCondition","operator","nextCondition","evaluateLogicalOperation","nextConditionOperator","getVariableValue","processVarList","getFormValue","rightRestResponseId","rightFormFieldId","fieldId","getFieldValue","searchValueInForm","valueList","dropDownFilterByName","valueFound","substring","fieldValue","forEach","formField","isSearchedField","getObjectValue","fieldToFind","formattedFieldName","removeLabel","toUpperCase","getFormVariableValue","getProcessVariableValue","variables","formVariable","formVar","processVariable","variable","logicOp","previousValue","newValue","cleanProcessVariable","taskFormsApi","getTaskFormVariables","jsonRes","__WEBPACK_IMPORTED_MODULE_23__text_text_mask_component__","WIDGET_DIRECTIVES","__WEBPACK_IMPORTED_MODULE_2__unknown_unknown_widget__","__WEBPACK_IMPORTED_MODULE_1__tabs_tabs_widget__","__WEBPACK_IMPORTED_MODULE_0__container_container_widget__","__WEBPACK_IMPORTED_MODULE_24__text_text_widget__","__WEBPACK_IMPORTED_MODULE_20__number_number_widget__","__WEBPACK_IMPORTED_MODULE_5__checkbox_checkbox_widget__","__WEBPACK_IMPORTED_MODULE_19__multiline_text_multiline_text_widget__","__WEBPACK_IMPORTED_MODULE_9__dropdown_dropdown_widget__","__WEBPACK_IMPORTED_MODULE_18__hyperlink_hyperlink_widget__","__WEBPACK_IMPORTED_MODULE_22__radio_buttons_radio_buttons_widget__","__WEBPACK_IMPORTED_MODULE_7__display_text_display_text_widget__","__WEBPACK_IMPORTED_MODULE_26__upload_upload_widget__","__WEBPACK_IMPORTED_MODULE_4__attach_attach_widget__","__WEBPACK_IMPORTED_MODULE_25__typeahead_typeahead_widget__","__WEBPACK_IMPORTED_MODULE_17__functional_group_functional_group_widget__","__WEBPACK_IMPORTED_MODULE_21__people_people_widget__","__WEBPACK_IMPORTED_MODULE_6__date_date_widget__","__WEBPACK_IMPORTED_MODULE_3__amount_amount_widget__","__WEBPACK_IMPORTED_MODULE_10__dynamic_table_dynamic_table_widget__","__WEBPACK_IMPORTED_MODULE_12__dynamic_table_editors_date_date_editor__","__WEBPACK_IMPORTED_MODULE_13__dynamic_table_editors_dropdown_dropdown_editor__","__WEBPACK_IMPORTED_MODULE_11__dynamic_table_editors_boolean_boolean_editor__","__WEBPACK_IMPORTED_MODULE_15__dynamic_table_editors_text_text_editor__","__WEBPACK_IMPORTED_MODULE_14__dynamic_table_editors_row_editor__","__WEBPACK_IMPORTED_MODULE_16__error_error_component__","__WEBPACK_IMPORTED_MODULE_8__document_document_widget__","MASK_DIRECTIVE","__WEBPACK_IMPORTED_MODULE_0__form_field_event__","ValidateDynamicTableRowEvent","row","summary","container_column_model_1","error_message_model_1","form_field_types_1","form_field_validator_1","FormFieldModel","_super","_readOnly","_isValid","_required","defaultDateFormat","rowspan","colspan","placeholder","params","currency","numberOfColumns","columns","overrideId","restUrl","restResponsePath","restIdProperty","restLabelProperty","className","optionType","_value","parseValue","ErrorMessageModel","responseVariable","getVariablesValue","containerFactory","updateForm","__extends","v","validate","markAsInvalid","_i","validators_1","isTypeaHeadFieldType","getFieldNameWithLabel","fieldName","findProcessVariableValue","variableName","currentVariable","parse","currentField","col","ContainerColumnModel","f","colFields","dateValue","format","rbEntry","elem","taEntry","parseInt","parseFloat","isInvalidFieldType","onFormFieldChanged","getOptionName","size","hasFields","obj","Map","isActive","getAttributesAsJsonObj","obj_1","selectedOutcome","TabModel","ContentLinkModel","contentAvailable","created","createdBy","link","mimeType","previewStatus","relatedContent","simpleType","thumbnailStatus","isTypeImage","isTypePdf","isTypeDoc","isThumbnailReady","FormListComponent","getForms","process_content_service_1","content_link_model_1","ContentWidgetComponent","contentService","processContentService","showDocumentContent","contentClick","thumbnailLoaded","contentLoaded","contentId","loadContent","getFileContent","loadThumbnailUrl","isThumbnailSupported","observable","getFileRawContent","getContentThumbnailUrl","thumbnailUrl","createTrustedUrl","openViewer","blob","contentBlob","download","downloadBlob","ContentService","ProcessContentService","ProcessContentService_1","contentApi","file","createTemporaryRawRelatedContent","getContent","getRawContent","getRawContentUrl","getRelatedContentForTask","getRelatedContentForProcessInstance","deleteContent","createRelatedContentOnProcessInstance","createRelatedContentOnTask","__WEBPACK_IMPORTED_MODULE_3__widgets_core_index__","StartFormComponent","__WEBPACK_IMPORTED_MODULE_2__form_component__","showOutcomeButtons","readOnlyForm","outcomeClick","outcomesContainer","getStartFormDefinition","loadStartForm","getProcessIntance","intance","getStartFormInstance","processDefinitionName","__WEBPACK_IMPORTED_MODULE_3__container_widget_model__","ContainerWidgetComponent","__WEBPACK_IMPORTED_MODULE_2__widget_component__","isCollapsible","isExpanded","rowContainsElement","rowIndex","TabsWidgetComponent","formTabChanged","visibleTabs","filterVisibleTabs","widget_component_1","UnknownWidgetComponent","AmountWidgetComponent","AmountWidgetComponent_1","DEFAULT_CURRENCY","AttachWidgetComponent","fileSource","selectedFolder","selectedFolderSiteId","siteId","selectedFolderSiteName","site","setupFileBrowser","getExternalContentNodes","selectedFolderPathId","pathId","selectedFolderAccountId","accountId","fileName","selectedFile","getAlfrescoNodes","selectedFolderNodes","node","$event","linkAlfrescoNode","closeDialog","dialog","nativeElement","close","CheckboxWidgetComponent","__WEBPACK_IMPORTED_MODULE_5__widget_component__","DateWidgetComponent","dateAdapter","preferences","locale$","locale","setLocale","overrideDisplyaFormat","minDate","__WEBPACK_IMPORTED_MODULE_3_moment__","maxDate","displayDate","newDateValue","providers","provide","__WEBPACK_IMPORTED_MODULE_2__angular_material__","useClass","__WEBPACK_IMPORTED_MODULE_4_ng2_alfresco_core__","useValue","DisplayTextWidgetComponentComponent","DocumentWidgetComponent","fileId","hasFile","DropdownWidgetComponent","getValuesByTaskId","getValuesByProcessDefinitionId","concat","getRestFieldValuesByProcessId","optionValue","dynamic_table_widget_model_1","DynamicTableWidgetComponent","elementRef","cd","ERROR_MODEL_NOT_FOUND","editMode","editRow","selectArrayCode","DynamicTableModel","forceFocusOnAddButton","detectChanges","buttonAddRow","querySelector","isDynamicTableReady","focus","onRowClicked","selectedRow","onKeyPressed","isEnterOrSpacePressed","keyCode","keycode","hasSelection","moveSelectionUp","moveRow","moveSelectionDown","deleteSelection","deleteRow","addNewRow","isNew","selected","editSelection","copyRow","getCellValue","amountCurrency","onSaveChanges","addRow","copyObject","flushValue","onCancelChanges","keys","ElementRef","ChangeDetectorRef","__WEBPACK_IMPORTED_MODULE_5__required_cell_validator_model__","__WEBPACK_IMPORTED_MODULE_2__core_form_widget_model__","visibleColumns","rows","_validators","getColumns","__WEBPACK_IMPORTED_MODULE_3__date_cell_validator_model__","__WEBPACK_IMPORTED_MODULE_4__number_cell_validator_model__","_selectedRow","definitions","columnDefinitions","offset","oldIndex","newIndex","arr","slice","splice","idx","text","__WEBPACK_IMPORTED_MODULE_1__events_validate_dynamic_table_row_event__","validator","BooleanEditorComponent","checked","DateEditorComponent","DATE_FORMAT","table","momentDate","DropdownEditorComponent","getRestFieldValuesColumnByProcessId","RowEditorComponent","save","cancel","validateRow","TextEditorComponent","displayName","getDisplayText","animations_1","ErrorWidgetComponent","translateParameters","_subscriptAnimationState","animations","trigger","state","style","opacity","transform","transition","animate","__WEBPACK_IMPORTED_MODULE_3__widget_component__","FunctionalGroupWidgetComponent","groups","minTermLength","group","restrictWithGroup","getWorkflowGroups","oldValue","__WEBPACK_IMPORTED_MODULE_1__angular_cdk_keycodes__","preventDefault","__WEBPACK_IMPORTED_MODULE_2__angular_core__","HyperlinkWidgetComponent","linkUrl","linkText","getHyperlinkUrl","getHyperlinkText","MultilineTextWidgetComponentComponent","NumberWidgetComponent","PeopleWidgetComponent","peopleProcessService","users","input","searchUsers","validateValue","userName","getWorkflowUsers","isValidUser","getDisplayName","firstName","lastName","trim","RadioButtonsWidgetComponent","getOptionsByTaskId","getOptionsByProcessDefinitionId","optionSelected","__WEBPACK_IMPORTED_MODULE_2__angular_forms__","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","useExisting","InputMaskDirective","multi","el","render","translationMask","0","9","optional","#","recursive","A","S","byPassKeys","invalidCharacters","_onChange","_","_onTouched","inputMask","mask","maskValue","selectionStart","isReversed","fn","actualValue","startCaret","maskToApply","isMaskReversed","getMasked","calculatedCaret","calculateCaretPosition","setElementAttribute","setValue","setCaretPosition","caretPosition","moveStart","moveEnd","newValueLength","getValue","oldValueLength","skipMaskChars","val","lastMaskChar","lastUntranslatedMaskChar","check","buf","maskIndex","maskLen","valueIndex","valueLength","addMethod","resetPos","isToCheck","maskDigit","charAt","valDigit","translation","index","digit","translated","lastMaskCharDigit","TextWidgetComponent","TypeaheadWidgetComponent","toSelect","optionName","getOptions","isValidOptionName","isValueDefined","UploadWidgetComponent","thumbnailService","multipleOption","getMultipleFileParam","removeElementFromList","files","filesSaved","from","flatMap","uploadRawContent","multiple","resetFormValueWithNoFiles","getMimeTypeIcon","__WEBPACK_IMPORTED_MODULE_3__components_widgets_index__","FormRenderingService","__WEBPACK_IMPORTED_MODULE_2_ng2_alfresco_core__","defaultValue","types","fromType","string","integer","multi-line-text","boolean","dropdown","date","amount","radio-buttons","hyperlink","readonly-text","typeahead","people","functional-group","dynamic-table","container","document","__WEBPACK_IMPORTED_MODULE_0__form__","__WEBPACK_IMPORTED_MODULE_12__form_module__","ValidateFormFieldEvent","ValidateFormEvent","FormDefinitionModel","reusable","newVersion","formImageBase64","formRepresentation","version","lastUpdatedBy","stencilSetId","referenceId","formDefinition","sizeX","sizeY","1","metadataToFields","gridsterForm","javascriptEvents","existingColspan","maxColspan","layout","__WEBPACK_IMPORTED_MODULE_6__form_field_validator__","UNSET_TASK_NAME","customFieldTemplates","tabCache","t","__WEBPACK_IMPORTED_MODULE_5__tab_model__","parseRootFields","loadData","saveOutcome","__WEBPACK_IMPORTED_MODULE_4__form_outcome_model__","SAVE_OUTCOME","completeOutcome","COMPLETE_OUTCOME","startProcessOutcome","START_PROCESS_OUTCOME","customOutcomes","validateField","__WEBPACK_IMPORTED_MODULE_0__events_index__","__WEBPACK_IMPORTED_MODULE_1__container_model__","validateFormEvent","validateFieldEvent","__WEBPACK_IMPORTED_MODULE_2__form_field_types__","__WEBPACK_IMPORTED_MODULE_3__form_field_model__","_defaultPrevented","_outcome","NodeMetadata","__WEBPACK_IMPORTED_MODULE_1__core_form_field_types__","ContainerWidgetComponentModel","__WEBPACK_IMPORTED_MODULE_0__core_container_model__","isCollapsedByDefault","allowCollapse","isGroup","collapseByDefault","DateCellValidator","editable","NumberCellValidator","RequiredCellValidator","__WEBPACK_IMPORTED_MODULE_20__services_widget_visibility_service__","FormModule","imports","__WEBPACK_IMPORTED_MODULE_3_ng2_alfresco_core__","__WEBPACK_IMPORTED_MODULE_4_ng2_alfresco_datatable__","__WEBPACK_IMPORTED_MODULE_2__angular_http__","__WEBPACK_IMPORTED_MODULE_5__components_material_module__","declarations","__WEBPACK_IMPORTED_MODULE_12__components_widgets_content_content_widget__","__WEBPACK_IMPORTED_MODULE_8__components_form_field_form_field_component__","__WEBPACK_IMPORTED_MODULE_10__components_form_component__","__WEBPACK_IMPORTED_MODULE_9__components_form_list_component__","__WEBPACK_IMPORTED_MODULE_11__components_start_form_component__","__WEBPACK_IMPORTED_MODULE_7__components_form_custom_button_directive__","__WEBPACK_IMPORTED_MODULE_6__components_widgets_index__","__WEBPACK_IMPORTED_MODULE_13__components_widgets_widget_component__","entryComponents","__WEBPACK_IMPORTED_MODULE_14__services_activiti_alfresco_service__","__WEBPACK_IMPORTED_MODULE_15__services_ecm_model_service__","__WEBPACK_IMPORTED_MODULE_16__services_form_rendering_service__","__WEBPACK_IMPORTED_MODULE_17__services_form_service__","__WEBPACK_IMPORTED_MODULE_18__services_node_service__","__WEBPACK_IMPORTED_MODULE_19__services_process_content_service__","source","MaterialModule","float","StartFormCustomButtonDirective","Directive","FormFieldComponent","formRenderingService","componentFactoryResolver","compiler","originalField","getField","customTemplate","hasController","getComponentFactorySync","componentRef","createComponent","instance","componentType","resolveComponentType","resolveComponentFactory","destroy","wrappedField","adf","components","componentInfo","createComponentFactorySync","class","componentClass","cmpClass","decoratedCmp","RuntimeComponentModule","compileModuleAndAllComponentsSync","componentFactories","x","read","ActivitiAlfrescoContentService","ActivitiAlfrescoContentService_1","folderId","accountShortId","alfrescoApi","getContentInFolder","createTemporaryRelatedContent","sourceId"],"mappings":"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","file":"process-services/bundles/process-services.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"rxjs/Rx\"), require(\"ng2-alfresco-core\"), require(\"@angular/material\"), require(\"moment\"), require(\"ng2-alfresco-datatable\"), require(\"@angular/forms\"), require(\"@angular/cdk/keycodes\"), require(\"@angular/animations\"), require(\"@angular/http\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"rxjs/Rx\", \"ng2-alfresco-core\", \"@angular/material\", \"moment\", \"ng2-alfresco-datatable\", \"@angular/forms\", \"@angular/cdk/keycodes\", \"@angular/animations\", \"@angular/http\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"process-services\"] = factory(require(\"@angular/core\"), require(\"rxjs/Rx\"), require(\"ng2-alfresco-core\"), require(\"@angular/material\"), require(\"moment\"), require(\"ng2-alfresco-datatable\"), require(\"@angular/forms\"), require(\"@angular/cdk/keycodes\"), require(\"@angular/animations\"), require(\"@angular/http\"));\n\telse\n\t\troot[\"process-services\"] = factory(root[\"@angular/core\"], root[\"rxjs/Rx\"], root[\"ng2-alfresco-core\"], root[\"@angular/material\"], root[\"moment\"], root[\"ng2-alfresco-datatable\"], root[\"@angular/forms\"], root[\"@angular/cdk/keycodes\"], root[\"@angular/animations\"], root[\"@angular/http\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_342__, __WEBPACK_EXTERNAL_MODULE_375__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 275);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ac2d9a2b9ae4ba8797aa","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0 1 2","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 1\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 2\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 3\n// module chunks = 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 4\n// module chunks = 0 1 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { AfterViewInit, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../services/form.service';\nimport { FormFieldModel } from './core/index';\n\nexport const baseHost = {\n    '(click)': 'event($event)',\n    '(blur)': 'event($event)',\n    '(change)': 'event($event)',\n    '(focus)': 'event($event)',\n    '(focusin)': 'event($event)',\n    '(focusout)': 'event($event)',\n    '(input)': 'event($event)',\n    '(invalid)': 'event($event)',\n    '(select)': 'event($event)'\n};\n\n/**\n * Base widget component.\n */\n@Component({\n    selector: 'base-widget',\n    template: '',\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class WidgetComponent implements AfterViewInit {\n\n    static DEFAULT_HYPERLINK_URL: string = '#';\n    static DEFAULT_HYPERLINK_SCHEME: string = 'http://';\n\n    @Input()\n    readOnly: boolean = false;\n\n    @Input()\n    field: FormFieldModel;\n\n    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */\n    @Output()\n    fieldChanged: EventEmitter<FormFieldModel> = new EventEmitter<FormFieldModel>();\n\n    constructor(public formService?: FormService) {\n    }\n\n    hasField() {\n        return this.field ? true : false;\n    }\n\n    // Note for developers:\n    // returns <any> object to be able binding it to the <element reguired=\"required\"> attribute\n    isRequired(): any {\n        if (this.field && this.field.required) {\n            return true;\n        }\n        return null;\n    }\n\n    isValid(): boolean {\n        return this.field.validationSummary ? true : false;\n    }\n\n    hasValue(): boolean {\n        return this.field &&\n            this.field.value !== null &&\n            this.field.value !== undefined;\n    }\n\n    isInvalidFieldRequired() {\n        return !this.field.isValid && !this.field.validationSummary && this.isRequired();\n    }\n\n    ngAfterViewInit() {\n        this.fieldChanged.emit(this.field);\n    }\n\n    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */\n    checkVisibility(field: FormFieldModel) {\n        this.fieldChanged.emit(field);\n    }\n\n    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */\n    onFieldChanged(field: FormFieldModel) {\n        this.fieldChanged.emit(field);\n    }\n\n    protected getHyperlinkUrl(field: FormFieldModel) {\n        let url = WidgetComponent.DEFAULT_HYPERLINK_URL;\n        if (field && field.hyperlinkUrl) {\n            url = field.hyperlinkUrl;\n            if (!/^https?:\\/\\//i.test(url)) {\n                url = `${WidgetComponent.DEFAULT_HYPERLINK_SCHEME}${url}`;\n            }\n        }\n        return url;\n    }\n\n    protected getHyperlinkText(field: FormFieldModel) {\n        if (field) {\n            return field.displayText || field.hyperlinkUrl;\n        }\n        return null;\n    }\n\n    protected event(event: Event): void {\n        this.formService.formEvents.next(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/widget.component.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 6\n// module chunks = 0 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService, UserProcessModel } from 'ng2-alfresco-core';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { FormDefinitionModel } from '../models/form-definition.model';\nimport { ContentLinkModel } from './../components/widgets/core/content-link.model';\nimport { GroupModel } from './../components/widgets/core/group.model';\nimport { FormModel, FormOutcomeEvent, FormOutcomeModel, FormValues } from './../components/widgets/core/index';\nimport {\n    FormErrorEvent, FormEvent, FormFieldEvent,\n    ValidateDynamicTableRowEvent, ValidateFormEvent, ValidateFormFieldEvent\n} from './../events/index';\nimport { EcmModelService } from './ecm-model.service';\n\n@Injectable()\nexport class FormService {\n\n    static UNKNOWN_ERROR_MESSAGE: string = 'Unknown error';\n    static GENERIC_ERROR_MESSAGE: string = 'Server error';\n\n    formLoaded = new Subject<FormEvent>();\n    formDataRefreshed = new Subject<FormEvent>();\n    formFieldValueChanged = new Subject<FormFieldEvent>();\n    formEvents = new Subject<Event>();\n    taskCompleted = new Subject<FormEvent>();\n    taskCompletedError = new Subject<FormErrorEvent>();\n    taskSaved = new Subject<FormEvent>();\n    taskSavedError = new Subject<FormErrorEvent>();\n    formContentClicked = new Subject<ContentLinkModel>();\n\n    validateForm = new Subject<ValidateFormEvent>();\n    validateFormField = new Subject<ValidateFormFieldEvent>();\n    validateDynamicTableRow = new Subject<ValidateDynamicTableRowEvent>();\n\n    executeOutcome = new Subject<FormOutcomeEvent>();\n\n    constructor(private ecmModelService: EcmModelService,\n                private apiService: AlfrescoApiService,\n                protected logService: LogService) {\n    }\n\n    private get taskApi(): any {\n        return this.apiService.getInstance().activiti.taskApi;\n    }\n\n    private get modelsApi(): any {\n        return this.apiService.getInstance().activiti.modelsApi;\n    }\n\n    private get editorApi(): any {\n        return this.apiService.getInstance().activiti.editorApi;\n    }\n\n    private get processApi(): any {\n        return this.apiService.getInstance().activiti.processApi;\n    }\n\n    private get processInstanceVariablesApi(): any {\n        return this.apiService.getInstance().activiti.processInstanceVariablesApi;\n    }\n\n    private get usersWorkflowApi(): any {\n        return this.apiService.getInstance().activiti.usersWorkflowApi;\n    }\n\n    private get groupsApi(): any {\n        return this.apiService.getInstance().activiti.groupsApi;\n    }\n\n    parseForm(json: any, data?: FormValues, readOnly: boolean = false): FormModel {\n        if (json) {\n            let form = new FormModel(json, data, readOnly, this);\n            if (!json.fields) {\n                form.outcomes = [\n                    new FormOutcomeModel(form, {\n                        id: '$custom',\n                        name: FormOutcomeModel.SAVE_ACTION,\n                        isSystem: true\n                    })\n                ];\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Create a Form with a fields for each metadata properties\n     * @returns {Observable<any>}\n     */\n    createFormFromANode(formName: string): Observable<any> {\n        return Observable.create(observer => {\n            this.createForm(formName).subscribe(\n                form => {\n                    this.ecmModelService.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(\n                        customType => {\n                            let formDefinitionModel = new FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);\n                            this.addFieldsToAForm(form.id, formDefinitionModel).subscribe(formData => {\n                                observer.next(formData);\n                                observer.complete();\n                            }, err => this.handleError(err));\n                        },\n                        err => this.handleError(err));\n                },\n                err => this.handleError(err));\n        });\n    }\n\n    /**\n     * Create a Form\n     * @returns {Observable<any>}\n     */\n    createForm(formName: string): Observable<any> {\n        let dataModel = {\n            name: formName,\n            description: '',\n            modelType: 2,\n            stencilSet: 0\n        };\n\n        return Observable.fromPromise(\n            this.modelsApi.createModel(dataModel)\n        );\n    }\n\n    saveForm(formId: string, formModel: FormDefinitionModel): Observable<any> {\n        return Observable.fromPromise(\n            this.editorApi.saveForm(formId, formModel)\n        );\n    }\n\n    /**\n     * @deprecated in 1.7.0, use saveForm API instead\n     * Add Fileds to A form\n     * @returns {Observable<any>}\n     */\n    addFieldsToAForm(formId: string, formModel: FormDefinitionModel): Observable<any> {\n        this.logService.log('addFieldsToAForm is deprecated in 1.7.0, use saveForm API instead');\n        return Observable.fromPromise(\n            this.editorApi.saveForm(formId, formModel)\n        );\n    }\n\n    /**\n     * Search For A Form by name\n     * @returns {Observable<any>}\n     */\n    searchFrom(name: string): Observable<any> {\n        let opts = {\n            'modelType': 2\n        };\n\n        return Observable.fromPromise(\n            this.modelsApi.getModels(opts)\n        )\n            .map(function (forms: any) {\n                return forms.data.find(formdata => formdata.name === name);\n            })\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get All the forms\n     * @returns {Observable<any>}\n     */\n    getForms(): Observable<any> {\n        let opts = {\n            'modelType': 2\n        };\n\n        return Observable.fromPromise(this.modelsApi.getModels(opts))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Process Definitions\n     * @returns {Observable<any>}\n     */\n    getProcessDefinitions(): Observable<any> {\n        return Observable.fromPromise(this.processApi.getProcessDefinitions({}))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    getProcessVarablesById(processInstanceId: string): Observable<any[]> {\n        return Observable.fromPromise(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get All the Tasks\n     * @returns {Observable<any>}\n     */\n    getTasks(): Observable<any> {\n        return Observable.fromPromise(this.taskApi.listTasks({}))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Task\n     * @param taskId Task Id\n     * @returns {Observable<any>}\n     */\n    getTask(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getTask(taskId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Save Task Form\n     * @param taskId Task Id\n     * @param formValues Form Values\n     * @returns {Observable<any>}\n     */\n    saveTaskForm(taskId: string, formValues: FormValues): Observable<any> {\n        let body = JSON.stringify({values: formValues});\n\n        return Observable.fromPromise(this.taskApi.saveTaskForm(taskId, body))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Complete Task Form\n     * @param taskId Task Id\n     * @param formValues Form Values\n     * @param outcome Form Outcome\n     * @returns {Observable<any>}\n     */\n    completeTaskForm(taskId: string, formValues: FormValues, outcome?: string): Observable<any> {\n        let data: any = {values: formValues};\n        if (outcome) {\n            data.outcome = outcome;\n        }\n        let body = JSON.stringify(data);\n\n        return Observable.fromPromise(this.taskApi.completeTaskForm(taskId, body))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Form related to a taskId\n     * @param taskId Task Id\n     * @returns {Observable<any>}\n     */\n    getTaskForm(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getTaskForm(taskId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Form Definition\n     * @param formId Form Id\n     * @returns {Observable<any>}\n     */\n    getFormDefinitionById(formId: string): Observable<any> {\n        return Observable.fromPromise(this.editorApi.getForm(formId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Returns form definition by a given name.\n     * @param name\n     * @returns {Promise<T>|Promise<ErrorObservable>}\n     */\n    getFormDefinitionByName(name: string): Observable<any> {\n        let opts = {\n            'filter': 'myReusableForms',\n            'filterText': name,\n            'modelType': 2\n        };\n\n        return Observable.fromPromise(this.modelsApi.getModels(opts))\n            .map(this.getFormId)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get start form instance for a given processId\n     * @param processId Process definition ID\n     * @returns {Observable<any>}\n     */\n    getStartFormInstance(processId: string): Observable<any> {\n        return Observable.fromPromise(\n            this.processApi.getProcessInstanceStartForm(processId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    getProcessIntance(processId: string): Observable<any> {\n        return Observable.fromPromise(this.processApi.getProcessInstance(processId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get start form definition for a given process\n     * @param processId Process definition ID\n     * @returns {Observable<any>}\n     */\n    getStartFormDefinition(processId: string): Observable<any> {\n        return Observable.fromPromise(\n            this.processApi.getProcessDefinitionStartForm(processId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    getRestFieldValues(taskId: string, field: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getRestFieldValues(taskId, field)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValuesByProcessId(processDefinitionId: string, field: string): Observable<any> {\n        return Observable.fromPromise(this.processApi.getRestFieldValues(processDefinitionId, field)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValuesColumnByProcessId(processDefinitionId: string, field: string, column?: string): Observable<any> {\n        return Observable.fromPromise(this.processApi.getRestTableFieldValues(processDefinitionId, field, column)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValuesColumn(taskId: string, field: string, column?: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getRestFieldValuesColumn(taskId, field, column)).catch(err => this.handleError(err));\n    }\n\n    private getUserProfileImageApi(userId: number): string {\n        return this.apiService.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);\n    }\n\n    getWorkflowUsers(filter: string, groupId?: string): Observable<UserProcessModel[]> {\n        let option: any = {filter: filter};\n        if (groupId) {\n            option.groupId = groupId;\n        }\n        return Observable.fromPromise(this.usersWorkflowApi.getUsers(option))\n            .switchMap((response: any) => <UserProcessModel[]> response.data || [])\n            .map((user: any) => {\n                user.userImage = this.getUserProfileImageApi(user.id);\n                return Observable.of(user);\n            })\n            .combineAll()\n            .defaultIfEmpty([])\n            .catch(err => this.handleError(err));\n    }\n\n    getWorkflowGroups(filter: string, groupId?: string): Observable<GroupModel[]> {\n        let option: any = {filter: filter};\n        if (groupId) {\n            option.groupId = groupId;\n        }\n        return Observable.fromPromise(this.groupsApi.getGroups(option))\n            .map((response: any) => <GroupModel[]> response.data || [])\n            .catch(err => this.handleError(err));\n    }\n\n    getFormId(res: any): string {\n        let result = null;\n\n        if (res && res.data && res.data.length > 0) {\n            result = res.data[0].id;\n        }\n\n        return result;\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    toJsonArray(res: any) {\n        if (res) {\n            return res.data || [];\n        }\n        return [];\n    }\n\n    handleError(error: any): Observable<any> {\n        let errMsg = FormService.UNKNOWN_ERROR_MESSAGE;\n        if (error) {\n            errMsg = (error.message) ? error.message :\n                error.status ? `${error.status} - ${error.statusText}` : FormService.GENERIC_ERROR_MESSAGE;\n        }\n        this.logService.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/form.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-datatable\"\n// module id = 11\n// module chunks = 1 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormModel } from './form.model';\n\nexport abstract class FormWidgetModel {\n\n    readonly fieldType: string;\n    readonly id: string;\n    readonly name: string;\n    readonly type: string;\n    readonly tab: string;\n\n    readonly form: FormModel;\n    readonly json: any;\n\n    constructor(form: FormModel, json: any) {\n        this.form = form;\n        this.json = json;\n\n        if (json) {\n            this.fieldType = json.fieldType;\n            this.id = json.id;\n            this.name = json.name;\n            this.type = json.type;\n            this.tab = json.tab;\n        }\n    }\n}\n\nexport interface FormWidgetModelCache<T extends FormWidgetModel> {\n    [key: string]: T;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form-widget.model.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/forms\"\n// module id = 15\n// module chunks = 0 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport * from './form-field-metadata';\nexport * from './form-values';\nexport * from './form-field-types';\nexport * from './form-field-option';\nexport * from './form-field-templates';\nexport * from './form-widget.model';\nexport * from './form-field.model';\nexport * from './form.model';\nexport * from './container.model';\nexport * from './container-column.model';\nexport * from './tab.model';\nexport * from './form-outcome.model';\nexport * from './form-outcome-event.model';\nexport * from './form-field-validator';\nexport * from './content-link.model';\nexport * from './error-message.model';\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport class FormFieldTypes {\n    static CONTAINER: string = 'container';\n    static GROUP: string = 'group';\n    static DYNAMIC_TABLE: string = 'dynamic-table';\n    static TEXT: string = 'text';\n    static MULTILINE_TEXT: string = 'multi-line-text';\n    static DROPDOWN: string = 'dropdown';\n    static HYPERLINK: string = 'hyperlink';\n    static RADIO_BUTTONS: string = 'radio-buttons';\n    static DISPLAY_VALUE: string = 'readonly';\n    static READONLY_TEXT: string = 'readonly-text';\n    static UPLOAD: string = 'upload';\n    static TYPEAHEAD: string = 'typeahead';\n    static FUNCTIONAL_GROUP: string = 'functional-group';\n    static PEOPLE: string = 'people';\n    static BOOLEAN: string = 'boolean';\n    static NUMBER: string = 'integer';\n    static DATE: string = 'date';\n    static AMOUNT: string = 'amount';\n    static DOCUMENT: string = 'document';\n\n    static READONLY_TYPES: string[] = [\n        FormFieldTypes.HYPERLINK,\n        FormFieldTypes.DISPLAY_VALUE,\n        FormFieldTypes.READONLY_TEXT\n    ];\n\n    static isReadOnlyType(type: string) {\n        return FormFieldTypes.READONLY_TYPES.indexOf(type) > -1;\n    }\n\n    static isContainerType(type: string) {\n        return type === FormFieldTypes.CONTAINER || type === FormFieldTypes.GROUP;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form-field-types.ts","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 31\n// module chunks = 1 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormModel } from './../components/widgets/core/index';\n\nexport class FormEvent {\n\n    private isDefaultPrevented: boolean = false;\n\n    readonly form: FormModel;\n\n    constructor(form: FormModel) {\n        this.form = form;\n    }\n\n    get defaultPrevented() {\n        return this.isDefaultPrevented;\n    }\n\n    preventDefault() {\n        this.isDefaultPrevented = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/form.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { FormModel } from '../components/widgets/core/form.model';\n\n@Injectable()\nexport class EcmModelService {\n\n    public static MODEL_NAMESPACE: string = 'activitiForms';\n    public static MODEL_NAME: string = 'activitiFormsModel';\n    public static TYPE_MODEL: string = 'cm:folder';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    public createEcmTypeForActivitiForm(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.searchActivitiEcmModel().subscribe(\n                model => {\n                    if (!model) {\n                        this.createActivitiEcmModel(formName, form).subscribe(typeForm => {\n                            observer.next(typeForm);\n                            observer.complete();\n                        });\n                    } else {\n                        this.saveFomType(formName, form).subscribe(typeForm => {\n                            observer.next(typeForm);\n                            observer.complete();\n                        });\n                    }\n                },\n                err => this.handleError(err)\n            );\n        });\n\n    }\n\n    searchActivitiEcmModel() {\n        return this.getEcmModels().map(function (ecmModels: any) {\n            return ecmModels.list.entries.find(model => model.entry.name === EcmModelService.MODEL_NAME);\n        });\n    }\n\n    createActivitiEcmModel(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.createEcmModel(EcmModelService.MODEL_NAME, EcmModelService.MODEL_NAMESPACE).subscribe(\n                model => {\n                    this.logService.info('model created', model);\n                    this.activeEcmModel(EcmModelService.MODEL_NAME).subscribe(\n                        modelActive => {\n                            this.logService.info('model active', modelActive);\n                            this.createEcmTypeWithProperties(formName, form).subscribe(typeCreated => {\n                                observer.next(typeCreated);\n                                observer.complete();\n                            });\n                        },\n                        err => this.handleError(err)\n                    );\n                },\n                err => this.handleError(err)\n            );\n        });\n    }\n\n    saveFomType(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(\n                ecmType => {\n                    this.logService.info('custom types', ecmType);\n                    if (!ecmType) {\n                        this.createEcmTypeWithProperties(formName, form).subscribe(typeCreated => {\n                            observer.next(typeCreated);\n                            observer.complete();\n                        });\n                    } else {\n                        observer.next(ecmType);\n                        observer.complete();\n                    }\n                },\n                err => this.handleError(err)\n            );\n        });\n    }\n\n    public createEcmTypeWithProperties(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.createEcmType(formName, EcmModelService.MODEL_NAME, EcmModelService.TYPE_MODEL).subscribe(\n                typeCreated => {\n                    this.logService.info('type Created', typeCreated);\n                    this.addPropertyToAType(EcmModelService.MODEL_NAME, formName, form).subscribe(\n                        properyAdded => {\n                            this.logService.info('property Added', properyAdded);\n                            observer.next(typeCreated);\n                            observer.complete();\n                        },\n                        err => this.handleError(err));\n                },\n                err => this.handleError(err));\n        });\n    }\n\n    public searchEcmType(typeName: string, modelName: string): Observable<any> {\n        return this.getEcmType(modelName).map(function (customTypes: any) {\n            return customTypes.list.entries.find(type => type.entry.prefixedName === typeName || type.entry.title === typeName);\n        });\n    }\n\n    public activeEcmModel(modelName: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.activateCustomModel(modelName))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public createEcmModel(modelName: string, nameSpace: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.createCustomModel('DRAFT', '', modelName, modelName, nameSpace))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public getEcmModels(): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.getAllCustomModel())\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public getEcmType(modelName: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.getAllCustomType(modelName))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public createEcmType(typeName: string, modelName: string, parentType: string): Observable<any> {\n        let name = this.cleanNameType(typeName);\n\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.createCustomType(modelName, name, parentType, typeName, ''))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public addPropertyToAType(modelName: string, typeName: string, formFields: any) {\n        let name = this.cleanNameType(typeName);\n\n        let properties = [];\n        if (formFields && formFields.values) {\n            for (let key in formFields.values) {\n                if (key) {\n                    properties.push({\n                        name: key,\n                        title: key,\n                        description: key,\n                        dataType: 'd:text',\n                        multiValued: false,\n                        mandatory: false,\n                        mandatoryEnforced: false\n                    });\n                }\n            }\n        }\n\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.addPropertyToType(modelName, name, properties))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n\n    }\n\n    cleanNameType(name: string): string {\n        let cleanName = name;\n        if (name.indexOf(':') !== -1) {\n            cleanName = name.split(':')[1];\n        }\n        return cleanName.replace(/[^a-zA-Z ]/g, '');\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    handleError(err: any): any {\n        this.logService.error(err);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/ecm-model.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport * as moment from 'moment';\nimport { FormFieldTypes } from './form-field-types';\nimport { FormFieldModel } from './form-field.model';\n\nexport interface FormFieldValidator {\n\n    isSupported(field: FormFieldModel): boolean;\n    validate(field: FormFieldModel): boolean;\n\n}\n\nexport class RequiredFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT,\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.TYPEAHEAD,\n        FormFieldTypes.DROPDOWN,\n        FormFieldTypes.PEOPLE,\n        FormFieldTypes.FUNCTIONAL_GROUP,\n        FormFieldTypes.RADIO_BUTTONS,\n        FormFieldTypes.UPLOAD,\n        FormFieldTypes.AMOUNT,\n        FormFieldTypes.DYNAMIC_TABLE,\n        FormFieldTypes.DATE\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            field.required;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field)) {\n\n            if (field.type === FormFieldTypes.DROPDOWN) {\n                if (field.hasEmptyValue && field.emptyOption) {\n                    if (field.value === field.emptyOption.id) {\n                        return false;\n                    }\n                }\n            }\n\n            if (field.type === FormFieldTypes.RADIO_BUTTONS) {\n                let option = field.options.find(opt => opt.id === field.value);\n                return !!option;\n            }\n\n            if (field.type === FormFieldTypes.UPLOAD) {\n                return field.value && field.value.length > 0;\n            }\n\n            if (field.type === FormFieldTypes.DYNAMIC_TABLE) {\n                return field.value && field.value instanceof Array && field.value.length > 0;\n            }\n\n            if (field.value === null || field.value === undefined || field.value === '') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nexport class NumberFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.AMOUNT\n    ];\n\n    static isNumber(value: any): boolean {\n        if (value === null || value === undefined || value === '') {\n            return false;\n        }\n\n        return !isNaN(+value);\n    }\n\n    isSupported(field: FormFieldModel): boolean {\n        return field && this.supportedTypes.indexOf(field.type) > -1;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field)) {\n            if (field.value === null ||\n                field.value === undefined ||\n                field.value === '') {\n                return true;\n            }\n            let valueStr = '' + field.value;\n            let pattern = new RegExp(/^-?\\d+$/);\n            if (field.enableFractions) {\n                pattern = new RegExp(/^-?[0-9]+(\\.[0-9]{1,2})?$/);\n            }\n            if (valueStr.match(pattern)) {\n                return true;\n            }\n            field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_NUMBER';\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class DateFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.DATE\n    ];\n\n    // Validates that the input string is a valid date formatted as <dateFormat> (default D-M-YYYY)\n    static isValidDate(inputDate: string, dateFormat: string = 'D-M-YYYY'): boolean {\n        if (inputDate) {\n            let d = moment(inputDate, dateFormat, true);\n            return d.isValid();\n        }\n\n        return false;\n    }\n\n    isSupported(field: FormFieldModel): boolean {\n        return field && this.supportedTypes.indexOf(field.type) > -1;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (DateFieldValidator.isValidDate(field.value, field.dateDisplayFormat)) {\n                return true;\n            }\n            field.validationSummary.message = field.dateDisplayFormat;\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class MinDateFieldValidator implements FormFieldValidator {\n\n    MIN_DATE_FORMAT = 'DD-MM-YYYY';\n\n    private supportedTypes = [\n        FormFieldTypes.DATE\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 && !!field.minValue;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            const dateFormat = field.dateDisplayFormat;\n\n            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {\n                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_DATE';\n                return false;\n            }\n\n            // remove time and timezone info\n            let d;\n            if (typeof field.value === 'string') {\n                d = moment(field.value.split('T')[0], dateFormat);\n            } else {\n                d = field.value;\n            }\n            let min = moment(field.minValue, this.MIN_DATE_FORMAT);\n\n            if (d.isBefore(min)) {\n                field.validationSummary.message = `FORM.FIELD.VALIDATOR.NOT_LESS_THAN`;\n                field.validationSummary.attributes.set('minValue', field.minValue.toLocaleString());\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport class MaxDateFieldValidator implements FormFieldValidator {\n\n    MAX_DATE_FORMAT = 'DD-MM-YYYY';\n\n    private supportedTypes = [\n        FormFieldTypes.DATE\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 && !!field.maxValue;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            const dateFormat = field.dateDisplayFormat;\n\n            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {\n                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_DATE';\n                return false;\n            }\n\n            // remove time and timezone info\n            let d;\n            if (typeof field.value === 'string') {\n                d = moment(field.value.split('T')[0], dateFormat);\n            } else {\n                d = field.value;\n            }\n            let max = moment(field.maxValue, this.MAX_DATE_FORMAT);\n\n            if (d.isAfter(max)) {\n                field.validationSummary.message = `FORM.FIELD.VALIDATOR.NOT_GREATER_THAN`;\n                field.validationSummary.attributes.set('maxValue', field.maxValue.toLocaleString());\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport class MinLengthFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            field.minLength > 0;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (field.value.length >= field.minLength) {\n                return true;\n            }\n            field.validationSummary.message = `FORM.FIELD.VALIDATOR.AT_LEAST_LONG`;\n            field.validationSummary.attributes.set('minLength', field.minLength.toLocaleString());\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class MaxLengthFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            field.maxLength > 0;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (field.value.length <= field.maxLength) {\n                return true;\n            }\n            field.validationSummary.message = `FORM.FIELD.VALIDATOR.NO_LONGER_THAN`;\n            field.validationSummary.attributes.set('maxLength', field.maxLength.toLocaleString());\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class MinValueFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.AMOUNT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            NumberFieldValidator.isNumber(field.minValue);\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            let value: number = +field.value;\n            let minValue: number = +field.minValue;\n\n            if (value >= minValue) {\n                return true;\n            }\n            field.validationSummary.message = `FORM.FIELD.VALIDATOR.NOT_LESS_THAN`;\n            field.validationSummary.attributes.set('minValue', field.minValue.toLocaleString());\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport class MaxValueFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.AMOUNT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            NumberFieldValidator.isNumber(field.maxValue);\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            let value: number = +field.value;\n            let maxValue: number = +field.maxValue;\n\n            if (value <= maxValue) {\n                return true;\n            }\n            field.validationSummary.message = `FORM.FIELD.VALIDATOR.NOT_GREATER_THAN`;\n            field.validationSummary.attributes.set('maxValue', field.maxValue.toLocaleString());\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport class RegExFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 && !!field.regexPattern;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (field.value.length > 0 && field.value.match(new RegExp('^' + field.regexPattern + '$'))) {\n                return true;\n            }\n            field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';\n            return false;\n        }\n        return true;\n    }\n\n}\n\nexport class FixedValueFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TYPEAHEAD\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field && this.supportedTypes.indexOf(field.type) > -1;\n    }\n\n    hasValidNameOrValidId(field: FormFieldModel): boolean {\n        return this.hasValidName(field) || this.hasValidId(field);\n    }\n\n    hasValidName(field: FormFieldModel) {\n        return field.options.find(item => item.name && item.name.toLocaleLowerCase() === field.value.toLocaleLowerCase()) ? true : false;\n    }\n\n    hasValidId(field: FormFieldModel) {\n        return field.options[field.value - 1] ? true : false;\n    }\n\n    hasStringValue(field: FormFieldModel) {\n        return field.value && typeof field.value === 'string';\n    }\n\n    hasOptions(field: FormFieldModel) {\n        return field.options && field.options.length > 0;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field)) {\n            if (this.hasStringValue(field) && this.hasOptions(field) && !this.hasValidNameOrValidId(field)) {\n                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport const FORM_FIELD_VALIDATORS = [\n    new RequiredFieldValidator(),\n    new NumberFieldValidator(),\n    new MinLengthFieldValidator(),\n    new MaxLengthFieldValidator(),\n    new MinValueFieldValidator(),\n    new MaxValueFieldValidator(),\n    new RegExFieldValidator(),\n    new DateFieldValidator(),\n    new MinDateFieldValidator(),\n    new MaxDateFieldValidator(),\n    new FixedValueFieldValidator()\n];\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form-field-validator.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable */\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { FormErrorEvent, FormEvent } from './../events/index';\nimport { EcmModelService } from './../services/ecm-model.service';\nimport { FormService } from './../services/form.service';\nimport { NodeService } from './../services/node.service';\nimport { ContentLinkModel } from './widgets/core/content-link.model';\nimport { FormFieldModel, FormModel, FormOutcomeEvent, FormOutcomeModel, FormValues, FormFieldValidator } from './widgets/core/index';\nimport { Observable } from 'rxjs/Rx';\nimport { WidgetVisibilityService } from './../services/widget-visibility.service';\n\n@Component({\n    selector: 'adf-form',\n    template: require('./form.component.html'),\n    styles: [require('./form.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnChanges {\n\n    static SAVE_OUTCOME_ID: string = '$save';\n    static COMPLETE_OUTCOME_ID: string = '$complete';\n    static START_PROCESS_OUTCOME_ID: string = '$startProcess';\n    static CUSTOM_OUTCOME_ID: string = '$custom';\n\n    @Input()\n    form: FormModel;\n\n    @Input()\n    taskId: string;\n\n    @Input()\n    nodeId: string;\n\n    @Input()\n    formId: string;\n\n    @Input()\n    formName: string;\n\n    @Input()\n    saveMetadata: boolean = false;\n\n    @Input()\n    data: FormValues;\n\n    @Input()\n    path: string;\n\n    @Input()\n    nameNode: string;\n\n    @Input()\n    showTitle: boolean = true;\n\n    @Input()\n    showCompleteButton: boolean = true;\n\n    @Input()\n    disableCompleteButton: boolean = false;\n\n    @Input()\n    disableStartProcessButton: boolean = false;\n\n    @Input()\n    showSaveButton: boolean = true;\n\n    @Input()\n    showDebugButton: boolean = false;\n\n    @Input()\n    readOnly: boolean = false;\n\n    @Input()\n    showRefreshButton: boolean = true;\n\n    @Input()\n    showValidationIcon: boolean = true;\n\n    @Input()\n    fieldValidators: FormFieldValidator[] = [];\n\n    @Output()\n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    @Output()\n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formDataRefreshed: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    executeOutcome: EventEmitter<FormOutcomeEvent> = new EventEmitter<FormOutcomeEvent>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    debugMode: boolean = false;\n\n    constructor(protected formService: FormService,\n                protected visibilityService: WidgetVisibilityService,\n                private ecmModelService: EcmModelService,\n                private nodeService: NodeService) {\n    }\n\n    hasForm(): boolean {\n        return this.form ? true : false;\n    }\n\n    isTitleEnabled(): boolean {\n        if (this.showTitle) {\n            if (this.form && this.form.taskName) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isOutcomeButtonEnabled(outcome: FormOutcomeModel): boolean {\n        if (this.form.readOnly) {\n            return false;\n        }\n\n        if (outcome) {\n            // Make 'Save' button always available\n            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {\n                return true;\n            }\n            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {\n                return this.disableCompleteButton ? false : this.form.isValid;\n            }\n            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {\n                return this.disableStartProcessButton ? false : this.form.isValid;\n            }\n            return this.form.isValid;\n        }\n        return false;\n    }\n\n    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean {\n        if (outcome && outcome.name) {\n            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {\n                return this.showCompleteButton;\n            }\n            if (isFormReadOnly) {\n                return outcome.isSelected;\n            }\n            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {\n                return this.showSaveButton;\n            }\n            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    ngOnInit() {\n        this.formService.formContentClicked.subscribe((content: ContentLinkModel) => {\n            this.formContentClicked.emit(content);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getFormByTaskId(taskId.currentValue);\n            return;\n        }\n\n        let formId = changes['formId'];\n        if (formId && formId.currentValue) {\n            this.getFormDefinitionByFormId(formId.currentValue);\n            return;\n        }\n\n        let formName = changes['formName'];\n        if (formName && formName.currentValue) {\n            this.getFormDefinitionByFormName(formName.currentValue);\n            return;\n        }\n\n        let nodeId = changes['nodeId'];\n        if (nodeId && nodeId.currentValue) {\n            this.loadFormForEcmNode(nodeId.currentValue);\n            return;\n        }\n\n        let data = changes['data'];\n        if (data && data.currentValue) {\n            this.refreshFormData();\n            return;\n        }\n    }\n\n    /**\n     * Invoked when user clicks outcome button.\n     * @param outcome Form outcome model\n     * @returns {boolean} True if outcome action was executed, otherwise false.\n     */\n    onOutcomeClicked(outcome: FormOutcomeModel): boolean {\n        if (!this.readOnly && outcome && this.form) {\n\n            if (!this.onExecuteOutcome(outcome)) {\n                return false;\n            }\n\n            if (outcome.isSystem) {\n                if (outcome.id === FormComponent.SAVE_OUTCOME_ID) {\n                    this.saveTaskForm();\n                    return true;\n                }\n\n                if (outcome.id === FormComponent.COMPLETE_OUTCOME_ID) {\n                    this.completeTaskForm();\n                    return true;\n                }\n\n                if (outcome.id === FormComponent.START_PROCESS_OUTCOME_ID) {\n                    this.completeTaskForm();\n                    return true;\n                }\n\n                if (outcome.id === FormComponent.CUSTOM_OUTCOME_ID) {\n                    this.onTaskSaved(this.form);\n                    this.storeFormAsMetadata();\n                    return true;\n                }\n            } else {\n                // Note: Activiti is using NAME field rather than ID for outcomes\n                if (outcome.name) {\n                    this.onTaskSaved(this.form);\n                    this.completeTaskForm(outcome.name);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Invoked when user clicks form refresh button.\n     */\n    onRefreshClicked() {\n        this.loadForm();\n    }\n\n    loadForm() {\n        if (this.taskId) {\n            this.getFormByTaskId(this.taskId);\n            return;\n        }\n\n        if (this.formId) {\n            this.getFormDefinitionByFormId(this.formId);\n            return;\n        }\n\n        if (this.formName) {\n            this.getFormDefinitionByFormName(this.formName);\n            return;\n        }\n    }\n\n    findProcessVariablesByTaskId(taskId: string): Observable<any> {\n        return this.formService.getTask(taskId).\n        switchMap((task: any) => {\n            if (this.isAProcessTask(task)) {\n                return this.visibilityService.getTaskProcessVariable(taskId);\n            } else {\n                return Observable.of({});\n            }\n        });\n    }\n\n    isAProcessTask(taskRepresentation) {\n        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';\n    }\n\n    getFormByTaskId(taskId: string): Promise<FormModel> {\n        return new Promise<FormModel>((resolve, reject) => {\n            this.findProcessVariablesByTaskId(taskId).subscribe( (processVariables) => {\n                this.formService\n                    .getTaskForm(taskId)\n                    .subscribe(\n                        form => {\n                            const parsedForm =  this.parseForm(form);\n                            this.visibilityService.refreshVisibility(parsedForm);\n                            this.form = parsedForm;\n                            this.onFormLoaded(this.form);\n                            resolve(this.form);\n                        },\n                        error => {\n                            this.handleError(error);\n                            // reject(error);\n                            resolve(null);\n                        }\n                    );\n            });\n        });\n    }\n\n    getFormDefinitionByFormId(formId: string) {\n        this.formService\n            .getFormDefinitionById(formId)\n            .subscribe(\n            form => {\n                this.formName = form.name;\n                this.form = this.parseForm(form);\n                this.onFormLoaded(this.form);\n            },\n            (error) => {\n                this.handleError(error);\n            }\n            );\n    }\n\n    getFormDefinitionByFormName(formName: string) {\n        this.formService\n            .getFormDefinitionByName(formName)\n            .subscribe(\n            id => {\n                this.formService.getFormDefinitionById(id).subscribe(\n                    form => {\n                        this.form = this.parseForm(form);\n                        this.onFormLoaded(this.form);\n                    },\n                    (error) => {\n                        this.handleError(error);\n                    }\n                );\n            },\n            (error) => {\n                this.handleError(error);\n            }\n            );\n    }\n\n    saveTaskForm() {\n        if (this.form && this.form.taskId) {\n            this.formService\n                .saveTaskForm(this.form.taskId, this.form.values)\n                .subscribe(\n                () => {\n                    this.onTaskSaved(this.form);\n                    this.storeFormAsMetadata();\n                },\n                error => this.onTaskSavedError(this.form, error)\n                );\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        if (this.form && this.form.taskId) {\n            this.formService\n                .completeTaskForm(this.form.taskId, this.form.values, outcome)\n                .subscribe(\n                () => {\n                    this.onTaskCompleted(this.form);\n                    this.storeFormAsMetadata();\n                },\n                error => this.onTaskCompletedError(this.form, error)\n                );\n        }\n    }\n\n    handleError(err: any): any {\n        this.onError.emit(err);\n    }\n\n    parseForm(json: any): FormModel {\n        if (json) {\n            let form = new FormModel(json, this.data, this.readOnly, this.formService);\n            if (!json.fields) {\n                form.outcomes = this.getFormDefinitionOutcomes(form);\n            }\n            if (this.fieldValidators && this.fieldValidators.length > 0) {\n                form.fieldValidators = this.fieldValidators;\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Get custom set of outcomes for a Form Definition.\n     * @param form Form definition model.\n     * @returns {FormOutcomeModel[]} Outcomes for a given form definition.\n     */\n    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[] {\n        return [\n            new FormOutcomeModel(form, { id: '$custom', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })\n        ];\n    }\n\n    checkVisibility(field: FormFieldModel) {\n        if (field && field.form) {\n            this.visibilityService.refreshVisibility(field.form);\n        }\n    }\n\n    private refreshFormData() {\n        this.form = this.parseForm(this.form.json);\n        this.onFormLoaded(this.form);\n        this.onFormDataRefreshed(this.form);\n    }\n\n    private loadFormForEcmNode(nodeId: string): void {\n        this.nodeService.getNodeMetadata(nodeId).subscribe(data => {\n            this.data = data.metadata;\n            this.loadFormFromActiviti(data.nodeType);\n        },\n            this.handleError);\n    }\n\n    loadFormFromActiviti(nodeType: string): any {\n        this.formService.searchFrom(nodeType).subscribe(\n            form => {\n                if (!form) {\n                    this.formService.createFormFromANode(nodeType).subscribe(formMetadata => {\n                        this.loadFormFromFormId(formMetadata.id);\n                    });\n                } else {\n                    this.loadFormFromFormId(form.id);\n                }\n            },\n            (error) => {\n                this.handleError(error);\n            }\n        );\n    }\n\n    private loadFormFromFormId(formId: string) {\n        this.formId = formId;\n        this.loadForm();\n    }\n\n    private storeFormAsMetadata() {\n        if (this.saveMetadata) {\n            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(type => {\n                this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);\n            },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n        }\n    }\n\n    protected onFormLoaded(form: FormModel) {\n        this.formLoaded.emit(form);\n        this.formService.formLoaded.next(new FormEvent(form));\n    }\n\n    protected onFormDataRefreshed(form: FormModel) {\n        this.formDataRefreshed.emit(form);\n        this.formService.formDataRefreshed.next(new FormEvent(form));\n    }\n\n    protected onTaskSaved(form: FormModel) {\n        this.formSaved.emit(form);\n        this.formService.taskSaved.next(new FormEvent(form));\n    }\n\n    protected onTaskSavedError(form: FormModel, error: any) {\n        this.handleError(error);\n        this.formService.taskSavedError.next(new FormErrorEvent(form, error));\n    }\n\n    protected onTaskCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n        this.formService.taskCompleted.next(new FormEvent(form));\n    }\n\n    protected onTaskCompletedError(form: FormModel, error: any) {\n        this.handleError(error);\n        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));\n    }\n\n    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean {\n        let args = new FormOutcomeEvent(outcome);\n\n        this.formService.executeOutcome.next(args);\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        this.executeOutcome.emit(args);\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/form.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { FormEvent } from './form.event';\nexport { FormErrorEvent } from './form-error.event';\nexport { FormFieldEvent } from './form-field.event';\nexport { ValidateFormFieldEvent } from './validate-form-field.event';\nexport { ValidateFormEvent } from './validate-form.event';\nexport { ValidateDynamicTableRowEvent } from './validate-dynamic-table-row.event';\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormFieldModel, FormModel } from './../components/widgets/core/index';\nimport { FormEvent } from './form.event';\n\nexport class FormFieldEvent extends FormEvent {\n\n    readonly field: FormFieldModel;\n\n    constructor(form: FormModel, field: FormFieldModel) {\n        super(form);\n        this.field = field;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/form-field.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormFieldModel } from './form-field.model';\nimport { FormWidgetModel } from './form-widget.model';\n\nexport class ContainerModel extends FormWidgetModel {\n\n    field: FormFieldModel;\n\n    get isVisible(): boolean {\n        return this.field.isVisible;\n    }\n\n    constructor(field: FormFieldModel) {\n        if (field) {\n            super(field.form, field.json);\n            this.field = field;\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/container.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { NodeMetadata } from '../models/node-metadata.model';\n\n@Injectable()\nexport class NodeService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Get All the metadata and the nodeType for a nodeId cleaned by the prefix\n     * @param nodeId Node Id\n     * @returns NodeMetadata\n     */\n    public getNodeMetadata(nodeId: string): Observable<NodeMetadata> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.getNodeInfo(nodeId)).map(this.cleanMetadataFromSemicolon);\n    }\n\n    /**\n     * Create a new Node from form metadata\n     * @param path path\n     * @param nodeType node type\n     * @param nameSpace namespace node\n     * @param data data to store\n     * @returns NodeMetadata\n     */\n    public createNodeMetadata(nodeType: string, nameSpace: any, data: any, path: string, name?: string): Observable<any> {\n        let properties = {};\n        for (let key in data) {\n            if (data[key]) {\n                properties[nameSpace + ':' + key] = data[key];\n            }\n        }\n\n        return this.createNode(name || this.generateUuid(), nodeType, properties, path);\n    }\n\n    /**\n     * Create a new Node from form metadata\n     * @param name path\n     * @param nodeType node type\n     * @param properties namespace node\n     * @param path path\n     * @returns NodeMetadata\n     */\n    public createNode(name: string, nodeType: string, properties: any, path: string): Observable<any> {\n        let body = {\n            name: name,\n            nodeType: nodeType,\n            properties: properties,\n            relativePath: path\n        };\n\n        // TODO: requires update to alfresco-js-api typings\n        let apiService: any = this.apiService.getInstance();\n        return Observable.fromPromise(apiService.nodes.addNode('-root-', body, {}));\n    }\n\n    private generateUuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    private cleanMetadataFromSemicolon(data: any): NodeMetadata {\n        let metadata = {};\n\n        if (data && data.properties) {\n            for (let key in data.properties) {\n                if (key) {\n                    if (key.indexOf(':') !== -1) {\n                        metadata [key.split(':')[1]] = data.properties[key];\n                    } else {\n                        metadata [key] = data.properties[key];\n                    }\n                }\n            }\n        }\n\n        return new NodeMetadata(metadata, data.nodeType);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/node.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport * as moment from 'moment';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { FormFieldModel, FormModel, TabModel } from '../components/widgets/core/index';\nimport { TaskProcessVariableModel } from '../models/task-process-variable.model';\nimport { WidgetVisibilityModel } from '../models/widget-visibility.model';\n\n@Injectable()\nexport class WidgetVisibilityService {\n\n    private processVarList: TaskProcessVariableModel[];\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    public refreshVisibility(form: FormModel) {\n        if (form && form.tabs && form.tabs.length > 0) {\n            form.tabs.map(tabModel => this.refreshEntityVisibility(tabModel));\n        }\n\n        if (form) {\n            form.getFormFields().map(field => this.refreshEntityVisibility(field));\n        }\n    }\n\n    refreshEntityVisibility(element: FormFieldModel | TabModel) {\n        let visible = this.evaluateVisibility(element.form, element.visibilityCondition);\n        element.isVisible = visible;\n    }\n\n    evaluateVisibility(form: FormModel, visibilityObj: WidgetVisibilityModel): boolean {\n        let isLeftFieldPresent = visibilityObj && ( visibilityObj.leftFormFieldId || visibilityObj.leftRestResponseId );\n        if (!isLeftFieldPresent || isLeftFieldPresent === 'null') {\n            return true;\n        } else {\n            return this.isFieldVisible(form, visibilityObj);\n        }\n    }\n\n    isFieldVisible(form: FormModel, visibilityObj: WidgetVisibilityModel): boolean {\n        let leftValue = this.getLeftValue(form, visibilityObj);\n        let rightValue = this.getRightValue(form, visibilityObj);\n        let actualResult = this.evaluateCondition(leftValue, rightValue, visibilityObj.operator);\n        if (visibilityObj.nextCondition) {\n            return this.evaluateLogicalOperation(\n                visibilityObj.nextConditionOperator,\n                actualResult,\n                this.isFieldVisible(form, visibilityObj.nextCondition)\n            );\n        } else {\n            return actualResult;\n        }\n    }\n\n    getLeftValue(form: FormModel, visibilityObj: WidgetVisibilityModel) {\n        let leftValue = '';\n        if (visibilityObj.leftRestResponseId && visibilityObj.leftRestResponseId !== 'null') {\n            leftValue = this.getVariableValue(form, visibilityObj.leftRestResponseId, this.processVarList);\n        } else {\n            leftValue = this.getFormValue(form, visibilityObj.leftFormFieldId);\n            leftValue = leftValue ? leftValue : this.getVariableValue(form, visibilityObj.leftFormFieldId, this.processVarList);\n        }\n        return leftValue;\n    }\n\n    getRightValue(form: FormModel, visibilityObj: WidgetVisibilityModel) {\n        let valueFound = '';\n        if (visibilityObj.rightRestResponseId) {\n            valueFound = this.getVariableValue(form, visibilityObj.rightRestResponseId, this.processVarList);\n        } else if (visibilityObj.rightFormFieldId) {\n            valueFound = this.getFormValue(form, visibilityObj.rightFormFieldId);\n        } else {\n            if (moment(visibilityObj.rightValue, 'YYYY-MM-DD', true).isValid()) {\n                valueFound = visibilityObj.rightValue + 'T00:00:00.000Z';\n            } else {\n                valueFound = visibilityObj.rightValue;\n            }\n        }\n        return valueFound;\n    }\n\n    getFormValue(form: FormModel, fieldId: string) {\n        let value = this.getFieldValue(form.values, fieldId);\n\n        if (!value) {\n            value = this.searchValueInForm(form, fieldId);\n        }\n\n        return value;\n    }\n\n    getFieldValue(valueList: any, fieldId: string) {\n        let dropDownFilterByName, valueFound;\n        if (fieldId && fieldId.indexOf('_LABEL') > 0) {\n            dropDownFilterByName = fieldId.substring(0, fieldId.length - 6);\n            if (valueList[dropDownFilterByName]) {\n                valueFound = valueList[dropDownFilterByName].name;\n            }\n        } else if (valueList[fieldId] && valueList[fieldId].id) {\n            valueFound = valueList[fieldId].id;\n        } else {\n            valueFound = valueList[fieldId];\n        }\n        return valueFound;\n    }\n\n    searchValueInForm(form: FormModel, fieldId: string) {\n        let fieldValue = '';\n        form.getFormFields().forEach((formField: FormFieldModel) => {\n            if (this.isSearchedField(formField, fieldId)) {\n                fieldValue = this.getObjectValue(formField);\n                if (!fieldValue) {\n                    if (formField.value && formField.value.id) {\n                        fieldValue = formField.value.id;\n                    } else {\n                        fieldValue = formField.value;\n                    }\n                }\n            }\n        });\n\n        return fieldValue;\n    }\n\n    private getObjectValue(field: FormFieldModel) {\n        let value = '';\n        if (field.value && field.value.name) {\n            value = field.value.name;\n        } else if (field.options) {\n            let option = field.options.find(opt => opt.id === field.value);\n            if (option) {\n                value = option.name;\n            } else {\n\n                value = field.value;\n            }\n        }\n        return value;\n    }\n\n    private isSearchedField(field: FormFieldModel, fieldToFind: string): boolean {\n        let formattedFieldName = this.removeLabel(field, fieldToFind);\n        return field.id ? field.id.toUpperCase() === formattedFieldName.toUpperCase() : false;\n    }\n\n    private removeLabel(field: FormFieldModel, fieldToFind): string {\n        let formattedFieldName = fieldToFind || '';\n        if (field.fieldType === 'RestFieldRepresentation' && fieldToFind.indexOf('_LABEL') > 0) {\n            formattedFieldName = fieldToFind.substring(0, fieldToFind.length - 6);\n        }\n        return formattedFieldName;\n    }\n\n    getVariableValue(form: FormModel, name: string, processVarList: TaskProcessVariableModel[]) {\n        return this.getFormVariableValue(form, name) ||\n            this.getProcessVariableValue(name, processVarList);\n    }\n\n    private getFormVariableValue(form: FormModel, name: string) {\n        if (form.json.variables) {\n            let formVariable = form.json.variables.find(formVar => formVar.name === name);\n            return formVariable ? formVariable.value : formVariable;\n        }\n    }\n\n    private getProcessVariableValue(name: string, processVarList: TaskProcessVariableModel[]) {\n        if (this.processVarList) {\n            let processVariable = this.processVarList.find(variable => variable.id === name);\n            return processVariable ? processVariable.value : processVariable;\n        }\n    }\n\n    evaluateLogicalOperation(logicOp, previousValue, newValue): boolean {\n        switch (logicOp) {\n            case 'and':\n                return previousValue && newValue;\n            case 'or' :\n                return previousValue || newValue;\n            case 'and-not':\n                return previousValue && !newValue;\n            case 'or-not':\n                return previousValue || !newValue;\n            default:\n                this.logService.error('NO valid operation! wrong op request : ' + logicOp);\n                break;\n        }\n    }\n\n    evaluateCondition(leftValue, rightValue, operator): boolean {\n        switch (operator) {\n            case '==':\n                return leftValue + '' === rightValue + '';\n            case '<':\n                return leftValue < rightValue;\n            case '!=':\n                return leftValue + '' !== rightValue + '';\n            case '>':\n                return leftValue > rightValue;\n            case '>=':\n                return leftValue >= rightValue;\n            case '<=':\n                return leftValue <= rightValue;\n            case 'empty':\n                return leftValue ? leftValue === '' : true;\n            case '!empty':\n                return leftValue ? leftValue !== '' : false;\n            default:\n                this.logService.error('NO valid operation!');\n                break;\n        }\n        return;\n    }\n\n    cleanProcessVariable() {\n        this.processVarList = [];\n    }\n\n    getTaskProcessVariable(taskId: string): Observable<TaskProcessVariableModel[]> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskFormsApi.getTaskFormVariables(taskId))\n            .map(res => {\n                let jsonRes = this.toJson(res);\n                this.processVarList = <TaskProcessVariableModel[]> jsonRes;\n                return jsonRes;\n            })\n            .catch(err => this.handleError(err));\n    }\n\n    toJson(res: any) {\n        return res || {};\n    }\n\n    private handleError(err) {\n        this.logService.error('Error while performing a call');\n        return Observable.throw('Error while performing a call - Server error');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/widget-visibility.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerWidgetComponent } from './container/container.widget';\nimport { TabsWidgetComponent } from './tabs/tabs.widget';\nimport { UnknownWidgetComponent } from './unknown/unknown.widget';\n\nimport { AmountWidgetComponent } from './amount/amount.widget';\nimport { AttachWidgetComponent } from './attach/attach.widget';\nimport { CheckboxWidgetComponent } from './checkbox/checkbox.widget';\nimport { DateWidgetComponent } from './date/date.widget';\nimport { DisplayTextWidgetComponentComponent } from './display-text/display-text.widget';\nimport { DocumentWidgetComponent } from './document/document.widget';\nimport { DropdownWidgetComponent } from './dropdown/dropdown.widget';\nimport { DynamicTableWidgetComponent } from './dynamic-table/dynamic-table.widget';\nimport { BooleanEditorComponent } from './dynamic-table/editors/boolean/boolean.editor';\nimport { DateEditorComponent } from './dynamic-table/editors/date/date.editor';\nimport { DropdownEditorComponent } from './dynamic-table/editors/dropdown/dropdown.editor';\nimport { RowEditorComponent } from './dynamic-table/editors/row.editor';\nimport { TextEditorComponent } from './dynamic-table/editors/text/text.editor';\nimport { ErrorWidgetComponent } from './error/error.component';\nimport { FunctionalGroupWidgetComponent } from './functional-group/functional-group.widget';\nimport { HyperlinkWidgetComponent } from './hyperlink/hyperlink.widget';\nimport { MultilineTextWidgetComponentComponent } from './multiline-text/multiline-text.widget';\nimport { NumberWidgetComponent } from './number/number.widget';\nimport { PeopleWidgetComponent } from './people/people.widget';\nimport { RadioButtonsWidgetComponent } from './radio-buttons/radio-buttons.widget';\nimport { InputMaskDirective } from './text/text-mask.component';\nimport { TextWidgetComponent } from './text/text.widget';\nimport { TypeaheadWidgetComponent } from './typeahead/typeahead.widget';\nimport { UploadWidgetComponent } from './upload/upload.widget';\n\n// core\nexport * from './widget.component';\nexport * from './core/index';\n\n// containers\nexport * from './tabs/tabs.widget';\nexport * from './container/container.widget';\n\n// primitives\nexport * from './unknown/unknown.widget';\nexport * from './text/text.widget';\nexport * from './number/number.widget';\nexport * from './checkbox/checkbox.widget';\nexport * from './multiline-text/multiline-text.widget';\nexport * from './dropdown/dropdown.widget';\nexport * from './hyperlink/hyperlink.widget';\nexport * from './radio-buttons/radio-buttons.widget';\nexport * from './display-text/display-text.widget';\nexport * from './upload/upload.widget';\nexport * from './attach/attach.widget';\nexport * from './typeahead/typeahead.widget';\nexport * from './functional-group/functional-group.widget';\nexport * from './people/people.widget';\nexport * from './date/date.widget';\nexport * from './amount/amount.widget';\nexport * from './dynamic-table/dynamic-table.widget';\nexport * from './error/error.component';\nexport { DocumentWidgetComponent } from './document/document.widget';\n\n// editors (dynamic table)\nexport * from './dynamic-table/dynamic-table.widget.model';\nexport * from './dynamic-table/editors/row.editor';\nexport * from './dynamic-table/editors/date/date.editor';\nexport * from './dynamic-table/editors/dropdown/dropdown.editor';\nexport * from './dynamic-table/editors/boolean/boolean.editor';\nexport * from './dynamic-table/editors/text/text.editor';\nexport * from './text/text-mask.component';\n\nexport const WIDGET_DIRECTIVES: any[] = [\n    UnknownWidgetComponent,\n    TabsWidgetComponent,\n    ContainerWidgetComponent,\n    TextWidgetComponent,\n    NumberWidgetComponent,\n    CheckboxWidgetComponent,\n    MultilineTextWidgetComponentComponent,\n    DropdownWidgetComponent,\n    HyperlinkWidgetComponent,\n    RadioButtonsWidgetComponent,\n    DisplayTextWidgetComponentComponent,\n    UploadWidgetComponent,\n    AttachWidgetComponent,\n    TypeaheadWidgetComponent,\n    FunctionalGroupWidgetComponent,\n    PeopleWidgetComponent,\n    DateWidgetComponent,\n    AmountWidgetComponent,\n    DynamicTableWidgetComponent,\n    DateEditorComponent,\n    DropdownEditorComponent,\n    BooleanEditorComponent,\n    TextEditorComponent,\n    RowEditorComponent,\n    ErrorWidgetComponent,\n    DocumentWidgetComponent\n];\n\nexport const MASK_DIRECTIVE: any[] = [\n    InputMaskDirective\n];\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/index.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/cdk/keycodes\"\n// module id = 55\n// module chunks = 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicRowValidationSummary } from '../components/widgets/dynamic-table/dynamic-row-validation-summary.model';\nimport { DynamicTableRow } from '../components/widgets/dynamic-table/dynamic-table-row.model';\n\nimport { FormFieldModel, FormModel } from './../components/widgets/core/index';\nimport { FormFieldEvent } from './form-field.event';\n\nexport class ValidateDynamicTableRowEvent extends FormFieldEvent {\n\n    isValid = true;\n\n    constructor(form: FormModel,\n                field: FormFieldModel,\n                public row: DynamicTableRow,\n                public summary: DynamicRowValidationSummary) {\n        super(form, field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/validate-dynamic-table-row.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\nimport * as moment from 'moment';\nimport { WidgetVisibilityModel } from '../../../models/widget-visibility.model';\nimport { ContainerColumnModel } from './container-column.model';\nimport { ErrorMessageModel } from './error-message.model';\nimport { FormFieldMetadata } from './form-field-metadata';\nimport { FormFieldOption } from './form-field-option';\nimport { FormFieldTypes } from './form-field-types';\nimport { NumberFieldValidator } from './form-field-validator';\nimport { FormWidgetModel } from './form-widget.model';\nimport { FormModel } from './form.model';\n\n// Maps to FormFieldRepresentation\nexport class FormFieldModel extends FormWidgetModel {\n\n    private _value: string;\n    private _readOnly: boolean = false;\n    private _isValid: boolean = true;\n    private _required: boolean = false;\n\n    readonly defaultDateFormat: string = 'D-M-YYYY';\n\n    // model members\n    fieldType: string;\n    id: string;\n    name: string;\n    type: string;\n    overrideId: boolean;\n    tab: string;\n    rowspan: number = 1;\n    colspan: number = 1;\n    placeholder: string = null;\n    minLength: number = 0;\n    maxLength: number = 0;\n    minValue: string;\n    maxValue: string;\n    regexPattern: string;\n    options: FormFieldOption[] = [];\n    restUrl: string;\n    restResponsePath: string;\n    restIdProperty: string;\n    restLabelProperty: string;\n    hasEmptyValue: boolean;\n    className: string;\n    optionType: string;\n    params: FormFieldMetadata = {};\n    hyperlinkUrl: string;\n    displayText: string;\n    isVisible: boolean = true;\n    visibilityCondition: WidgetVisibilityModel = null;\n    enableFractions: boolean = false;\n    currency: string = null;\n    dateDisplayFormat: string = this.dateDisplayFormat || this.defaultDateFormat;\n\n    // container model members\n    numberOfColumns: number = 1;\n    fields: FormFieldModel[] = [];\n    columns: ContainerColumnModel[] = [];\n\n    // util members\n    emptyOption: FormFieldOption;\n    validationSummary: ErrorMessageModel;\n\n    get value(): any {\n        return this._value;\n    }\n\n    set value(v: any) {\n        this._value = v;\n        this.validate();\n        this.updateForm();\n    }\n\n    get readOnly(): boolean {\n        if (this.form && this.form.readOnly) {\n            return true;\n        }\n        return this._readOnly;\n    }\n\n    set readOnly(readOnly: boolean) {\n        this._readOnly = readOnly;\n        this.updateForm();\n    }\n\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = value;\n        this.updateForm();\n    }\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n\n    markAsInvalid() {\n        this._isValid = false;\n    }\n\n    validate(): boolean {\n        this.validationSummary = new ErrorMessageModel();\n\n        let validators = this.form.fieldValidators || [];\n        for (let validator of validators) {\n            if (!validator.validate(this)) {\n                this._isValid = false;\n                return this._isValid;\n            }\n        }\n\n        this._isValid = true;\n        return this._isValid;\n    }\n\n    constructor(form: FormModel, json?: any) {\n        super(form, json);\n\n        if (json) {\n            this.fieldType = json.fieldType;\n            this.id = json.id;\n            this.name = json.name;\n            this.type = json.type;\n            this._required = <boolean> json.required;\n            this._readOnly = <boolean> json.readOnly || json.type === 'readonly';\n            this.overrideId = <boolean> json.overrideId;\n            this.tab = json.tab;\n            this.restUrl = json.restUrl;\n            this.restResponsePath = json.restResponsePath;\n            this.restIdProperty = json.restIdProperty;\n            this.restLabelProperty = json.restLabelProperty;\n            this.colspan = <number> json.colspan;\n            this.minLength = <number> json.minLength || 0;\n            this.maxLength = <number> json.maxLength || 0;\n            this.minValue = json.minValue;\n            this.maxValue = json.maxValue;\n            this.regexPattern = json.regexPattern;\n            this.options = <FormFieldOption[]> json.options || [];\n            this.hasEmptyValue = <boolean> json.hasEmptyValue;\n            this.className = json.className;\n            this.optionType = json.optionType;\n            this.params = <FormFieldMetadata> json.params || {};\n            this.hyperlinkUrl = json.hyperlinkUrl;\n            this.displayText = json.displayText;\n            this.visibilityCondition = <WidgetVisibilityModel> json.visibilityCondition;\n            this.enableFractions = <boolean> json.enableFractions;\n            this.currency = json.currency;\n            this.dateDisplayFormat = json.dateDisplayFormat || this.defaultDateFormat;\n            this._value = this.parseValue(json);\n            this.validationSummary = new ErrorMessageModel();\n\n            if (json.placeholder && json.placeholder !== '' && json.placeholder !== 'null') {\n                this.placeholder = json.placeholder;\n            }\n\n            if (FormFieldTypes.isReadOnlyType(json.type)) {\n                if (json.params && json.params.field) {\n                    if (form.processVariables) {\n                        const processVariable = this.getProcessVariableValue(json.params.field, form);\n                        if (processVariable) {\n                            this.value = processVariable;\n                        }\n                    } else if (json.params.field.responseVariable) {\n                        const formVariable = this.getVariablesValue(json.params.field.name, form);\n                        if (formVariable) {\n                            this.value = formVariable;\n                        }\n                    }\n                }\n            }\n\n            if (FormFieldTypes.isContainerType(json.type)) {\n                this.containerFactory(json, form);\n            }\n        }\n\n        if (this.hasEmptyValue && this.options && this.options.length > 0) {\n            this.emptyOption = this.options[0];\n        }\n\n        this.updateForm();\n    }\n\n    private isTypeaHeadFieldType(type: string): boolean {\n        return type === 'typeahead' ? true : false;\n    }\n\n    private getFieldNameWithLabel(name: string): string {\n        return name += '_LABEL';\n    }\n\n    private getProcessVariableValue(field: any, form: FormModel) {\n        let fieldName = field.name;\n        if (this.isTypeaHeadFieldType(field.type)) {\n            fieldName = this.getFieldNameWithLabel(field.id);\n        }\n        return this.findProcessVariableValue(fieldName, form);\n    }\n\n    private getVariablesValue(variableName: string, form: FormModel) {\n        let variable = form.json.variables.find((currentVariable) => {\n            return currentVariable.name === variableName;\n        });\n\n        if (variable) {\n            if (variable.type === 'boolean') {\n                return JSON.parse(variable.value);\n            }\n\n            return variable.value;\n        }\n\n        return null;\n    }\n\n    private findProcessVariableValue(variableName: string, form: FormModel) {\n        if (form.processVariables) {\n            const variable = form.processVariables.find((currentVariable) => {\n                return currentVariable.name === variableName;\n            });\n\n            if (variable) {\n                return variable.type === 'boolean' ? JSON.parse(variable.value) : variable.value;\n            }\n        }\n\n        return undefined;\n    }\n\n    private containerFactory(json: any, form: FormModel): void {\n        this.numberOfColumns = <number> json.numberOfColumns || 1;\n\n        this.fields = json.fields;\n\n        this.rowspan = 1;\n        this.colspan = 1;\n\n        if (json.fields) {\n            for (let currentField in json.fields) {\n                if (json.fields.hasOwnProperty(currentField)) {\n                    let col = new ContainerColumnModel();\n\n                    let fields: FormFieldModel[] = (json.fields[currentField] || []).map(f => new FormFieldModel(form, f));\n                    col.fields = fields;\n                    col.rowspan = json.fields[currentField].length;\n\n                    col.fields.forEach((colFields: any) => {\n                        this.colspan = colFields.colspan > this.colspan ? colFields.colspan : this.colspan;\n                    });\n\n                    this.rowspan = this.rowspan < col.rowspan ? col.rowspan : this.rowspan;\n                    this.columns.push(col);\n                }\n            }\n        }\n    }\n\n    parseValue(json: any): any {\n        let value = json.value;\n\n        /*\n         This is needed due to Activiti issue related to reading dropdown values as value string\n         but saving back as object: { id: <id>, name: <name> }\n         */\n        if (json.type === FormFieldTypes.DROPDOWN) {\n            if (json.hasEmptyValue && json.options) {\n                let options = <FormFieldOption[]> json.options || [];\n                if (options.length > 0) {\n                    let emptyOption = json.options[0];\n                    if (value === '' || value === emptyOption.id || value === emptyOption.name) {\n                        value = emptyOption.id;\n                    }\n                }\n            }\n        }\n\n        /*\n         This is needed due to Activiti issue related to reading radio button values as value string\n         but saving back as object: { id: <id>, name: <name> }\n         */\n        if (json.type === FormFieldTypes.RADIO_BUTTONS) {\n            // Activiti has a bug with default radio button value where initial selection passed as `name` value\n            // so try resolving current one with a fallback to first entry via name or id\n            // TODO: needs to be reported and fixed at Activiti side\n            let entry: FormFieldOption[] = this.options.filter(opt => opt.id === value || opt.name === value);\n            if (entry.length > 0) {\n                value = entry[0].id;\n            }\n        }\n\n        /*\n         This is needed due to Activiti displaying/editing dates in d-M-YYYY format\n         but storing on server in ISO8601 format (i.e. 2013-02-04T22:44:30.652Z)\n         */\n        if (json.type === FormFieldTypes.DATE) {\n            if (value) {\n                let dateValue;\n                if (NumberFieldValidator.isNumber(value)) {\n                    dateValue = moment(value);\n                } else {\n                    dateValue = moment(value.split('T')[0], 'YYYY-M-D');\n                }\n                if (dateValue && dateValue.isValid()) {\n                    value = dateValue.format(this.dateDisplayFormat);\n                }\n            }\n        }\n\n        return value;\n    }\n\n    updateForm() {\n        if (!this.form) {\n            return;\n        }\n\n        switch (this.type) {\n            case FormFieldTypes.DROPDOWN:\n                /*\n                 This is needed due to Activiti reading dropdown values as string\n                 but saving back as object: { id: <id>, name: <name> }\n                 */\n                if (this.value === 'empty' || this.value === '') {\n                    this.form.values[this.id] = {};\n                } else {\n                    let entry: FormFieldOption[] = this.options.filter(opt => opt.id === this.value);\n                    if (entry.length > 0) {\n                        this.form.values[this.id] = entry[0];\n                    }\n                }\n                break;\n            case FormFieldTypes.RADIO_BUTTONS:\n                /*\n                 This is needed due to Activiti issue related to reading radio button values as value string\n                 but saving back as object: { id: <id>, name: <name> }\n                 */\n                let rbEntry: FormFieldOption[] = this.options.filter(opt => opt.id === this.value);\n                if (rbEntry.length > 0) {\n                    this.form.values[this.id] = rbEntry[0];\n                }\n                break;\n            case FormFieldTypes.UPLOAD:\n                if (this.value && this.value.length > 0) {\n                    this.form.values[this.id] = this.value.map(elem => elem.id).join(',');\n                } else {\n                    this.form.values[this.id] = null;\n                }\n                break;\n            case FormFieldTypes.TYPEAHEAD:\n                let taEntry: FormFieldOption[] = this.options.filter(opt => opt.id === this.value);\n                if (taEntry.length > 0) {\n                    this.form.values[this.id] = taEntry[0];\n                } else if (this.options.length > 0) {\n                    this.form.values[this.id] = null;\n                }\n                break;\n            case FormFieldTypes.DATE:\n                let dateValue = moment(this.value, this.dateDisplayFormat, true);\n                if (dateValue && dateValue.isValid()) {\n                    this.form.values[this.id] = `${dateValue.format('YYYY-MM-DD')}T00:00:00.000Z`;\n                } else {\n                    this.form.values[this.id] = null;\n                    this._value = this.value;\n                }\n                break;\n            case FormFieldTypes.NUMBER:\n                this.form.values[this.id] = parseInt(this.value, 10);\n                break;\n            case FormFieldTypes.AMOUNT:\n                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);\n                break;\n            default:\n                if (!FormFieldTypes.isReadOnlyType(this.type) && !this.isInvalidFieldType(this.type)) {\n                    this.form.values[this.id] = this.value;\n                }\n        }\n\n        this.form.onFormFieldChanged(this);\n    }\n\n    /**\n     * Skip the invalid field type\n     * @param type\n     */\n    isInvalidFieldType(type: string) {\n        if (type === 'container') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    getOptionName(): string {\n        let option: FormFieldOption = this.options.find(opt => opt.id === this.value);\n        return option ? option.name : null;\n    }\n\n    hasOptions() {\n        return this.options && this.options.length > 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form-field.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { FormFieldModel } from './form-field.model';\n\nexport class ContainerColumnModel {\n\n    size: number = 12;\n    fields: FormFieldModel[] = [];\n    colspan: number = 1;\n    rowspan: number = 1;\n\n    hasFields(): boolean {\n        return this.fields && this.fields.length > 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/container-column.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nexport class ErrorMessageModel {\n\n    message: string = '';\n    attributes: Map<string, string> = null;\n\n    constructor(obj?: any) {\n        this.message = obj && obj.message ? obj.message : '';\n        this.attributes = new Map();\n    }\n\n    isActive() {\n        return this.message ? true : false;\n    }\n\n    getAttributesAsJsonObj() {\n        let result = {};\n        if (this.attributes.size > 0) {\n            let obj = Object.create(null);\n            this.attributes.forEach((value, key) => {\n                obj[key] = value;\n            });\n            result = JSON.stringify(obj);\n        }\n        return result;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/error-message.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormWidgetModel } from './form-widget.model';\nimport { FormModel } from './form.model';\n\nexport class FormOutcomeModel extends FormWidgetModel {\n\n    static SAVE_ACTION: string = 'Save';            // Activiti 'Save' action name\n    static COMPLETE_ACTION: string = 'Complete';    // Activiti 'Complete' action name\n    static START_PROCESS_ACTION: string = 'Start Process';    // Activiti 'Start Process' action name\n\n    isSystem: boolean = false;\n    isSelected: boolean = false;\n\n    constructor(form: FormModel, json?: any) {\n        super(form, json);\n\n        if (json) {\n            this.isSystem = json.isSystem ? true : false;\n            this.isSelected = form && json.name === form.selectedOutcome ? true : false;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form-outcome.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { WidgetVisibilityModel } from '../../../models/widget-visibility.model';\nimport { FormWidgetModel } from './form-widget.model';\nimport { FormModel } from './form.model';\n\nexport class TabModel extends FormWidgetModel {\n\n    title: string;\n    isVisible: boolean = true;\n    visibilityCondition: WidgetVisibilityModel;\n\n    fields: FormWidgetModel[] = [];\n\n    hasContent(): boolean {\n        return this.fields && this.fields.length > 0;\n    }\n\n    constructor(form: FormModel, json?: any) {\n        super(form, json);\n\n        if (json) {\n            this.title = json.title;\n            this.visibilityCondition = <WidgetVisibilityModel> json.visibilityCondition;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/tab.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n import { RelatedContentRepresentation } from 'alfresco-js-api';\n\n export class ContentLinkModel implements RelatedContentRepresentation {\n\n    contentAvailable: boolean;\n    created: Date;\n    createdBy: any;\n    id: number;\n    link: boolean;\n    mimeType: string;\n    name: string;\n    previewStatus: string;\n    relatedContent: boolean;\n    simpleType: string;\n    thumbnailUrl: string;\n    contentRawUrl: string;\n    contentBlob: Blob;\n    thumbnailStatus: string;\n\n    constructor(obj?: any) {\n        this.contentAvailable = obj && obj.contentAvailable;\n        this.created = obj && obj.created;\n        this.createdBy = obj && obj.createdBy || {};\n        this.id = obj && obj.id;\n        this.link = obj && obj.link;\n        this.mimeType = obj && obj.mimeType;\n        this.name = obj && obj.name;\n        this.previewStatus = obj && obj.previewStatus;\n        this.relatedContent = obj && obj.relatedContent;\n        this.simpleType = obj && obj.simpleType;\n        this.thumbnailStatus = obj && obj.thumbnailStatus;\n    }\n\n    hasPreviewStatus(): boolean {\n        return this.previewStatus === 'supported' ? true : false;\n    }\n\n    isTypeImage(): boolean {\n        return this.simpleType === 'image' ? true : false;\n    }\n\n    isTypePdf(): boolean {\n        return this.simpleType === 'pdf' ? true : false;\n    }\n\n    isTypeDoc(): boolean {\n        return this.simpleType === 'word' || this.simpleType === 'content' ? true : false;\n    }\n\n    isThumbnailReady(): boolean {\n        return this.thumbnailStatus === 'created';\n    }\n\n    isThumbnailSupported(): boolean {\n        return this.isTypeImage() || ((this.isTypePdf() || this.isTypeDoc()) && this.isThumbnailReady());\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/content-link.model.ts","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./form.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/form.component.scss\n// module id = 93\n// module chunks = 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../services/form.service';\n\n@Component({\n    selector: 'adf-form-list',\n    template: require('./form-list.component.html'),\n    styles: [require('./form-list.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormListComponent implements OnChanges {\n\n    @Input()\n    forms: any [] = [];\n\n    constructor(protected formService: FormService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.getForms();\n    }\n\n    isEmpty(): boolean {\n        return this.forms && this.forms.length === 0;\n    }\n\n    getForms() {\n        this.formService.getForms().subscribe((forms) => {\n            this.forms.push(...forms);\n        });\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/form-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { ContentService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { ProcessContentService } from '../../../services/process-content.service';\nimport { ContentLinkModel } from '../core/content-link.model';\nimport { FormService } from './../../../services/form.service';\n\n@Component({\n    selector: 'adf-content',\n    template: require('./content.widget.html'),\n    styles: [require('./content.widget.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentWidgetComponent implements OnChanges {\n\n    @Input()\n    id: string;\n\n    @Input()\n    showDocumentContent: boolean = true;\n\n    @Output()\n    contentClick = new EventEmitter();\n\n    @Output()\n    thumbnailLoaded: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    contentLoaded: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    content: ContentLinkModel;\n\n    constructor(protected formService: FormService,\n                private logService: LogService,\n                private contentService: ContentService,\n                private processContentService: ProcessContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const contentId = changes['id'];\n        if (contentId && contentId.currentValue) {\n            this.loadContent(contentId.currentValue);\n        }\n    }\n\n    loadContent(id: number) {\n        this.processContentService\n            .getFileContent(id)\n            .subscribe(\n                (response: ContentLinkModel) => {\n                    this.content = new ContentLinkModel(response);\n                    this.contentLoaded.emit(this.content);\n                    this.loadThumbnailUrl(this.content);\n                },\n                (error) => {\n                    this.error.emit(error);\n                }\n            );\n    }\n\n    loadThumbnailUrl(content: ContentLinkModel) {\n        if (this.content.isThumbnailSupported()) {\n            let observable: Observable<any>;\n\n            if (this.content.isTypeImage()) {\n                observable = this.processContentService.getFileRawContent(content.id);\n            } else {\n                observable = this.processContentService.getContentThumbnailUrl(content.id);\n            }\n\n            if (observable) {\n                observable.subscribe(\n                    (response: Blob) => {\n                        this.content.thumbnailUrl = this.contentService.createTrustedUrl(response);\n                        this.thumbnailLoaded.emit(this.content.thumbnailUrl);\n                    },\n                    (error) => {\n                        this.error.emit(error);\n\n                    }\n                );\n            }\n        }\n    }\n\n    openViewer(content: ContentLinkModel): void {\n        this.processContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.contentClick.emit(content);\n                this.logService.info('Content clicked' + content.id);\n                this.formService.formContentClicked.next(content);\n            },\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n    }\n\n    /**\n     * Invoke content download.\n     */\n    download(content: ContentLinkModel): void {\n        this.processContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/content/content.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { RelatedContentRepresentation } from 'alfresco-js-api';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class ProcessContentService {\n\n    static UNKNOWN_ERROR_MESSAGE: string = 'Unknown error';\n    static GENERIC_ERROR_MESSAGE: string = 'Server error';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    private get contentApi(): any {\n        return this.apiService.getInstance().activiti.contentApi;\n    }\n\n    createTemporaryRawRelatedContent(file: any): Observable<RelatedContentRepresentation> {\n        return Observable.fromPromise(this.contentApi.createTemporaryRawRelatedContent(file)).catch(err => this.handleError(err));\n    }\n\n    getFileContent(contentId: number): Observable<RelatedContentRepresentation> {\n        return Observable.fromPromise(this.contentApi.getContent(contentId)).catch(err => this.handleError(err));\n    }\n\n    getFileRawContent(contentId: number): Observable<Blob> {\n        return Observable.fromPromise(this.contentApi.getRawContent(contentId)).catch(err => this.handleError(err));\n    }\n\n    getFileRawContentUrl(contentId: number): string {\n        return this.contentApi.getRawContentUrl(contentId);\n    }\n\n    getContentThumbnailUrl(contentId: number): Observable<any> {\n        return Observable.fromPromise(this.contentApi.getContentThumbnailUrl(contentId)).catch(err => this.handleError(err));\n    }\n\n    getTaskRelatedContent(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.contentApi.getRelatedContentForTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n\n    getProcessRelatedContent(processId: string): Observable<any> {\n        return Observable.fromPromise(this.contentApi.getRelatedContentForProcessInstance(processId))\n            .catch(err => this.handleError(err));\n    }\n\n    deleteRelatedContent(contentId: number): Observable<any> {\n        return Observable.fromPromise(this.contentApi.deleteContent(contentId))\n            .catch(err => this.handleError(err));\n    }\n\n    createProcessRelatedContent(processInstanceId: string, content: any, opts?: any): Observable<any> {\n        return Observable.fromPromise(this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, content, opts))\n            .catch(err => this.handleError(err));\n    }\n\n    createTaskRelatedContent(taskId: string, file: any, opts?: any) {\n        return Observable.fromPromise(this.contentApi.createRelatedContentOnTask(taskId, file, opts))\n            .catch(err => this.handleError(err));\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    toJsonArray(res: any) {\n        if (res) {\n            return res.data || [];\n        }\n        return [];\n    }\n\n    handleError(error: any): Observable<any> {\n        let errMsg = ProcessContentService.UNKNOWN_ERROR_MESSAGE;\n        if (error) {\n            errMsg = (error.message) ? error.message :\n                error.status ? `${error.status} - ${error.statusText}` : ProcessContentService.GENERIC_ERROR_MESSAGE;\n        }\n        this.logService.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/process-content.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from './../services/form.service';\nimport { WidgetVisibilityService } from './../services/widget-visibility.service';\nimport { FormComponent } from './form.component';\nimport { ContentLinkModel } from './widgets/core/content-link.model';\nimport { FormOutcomeModel } from './widgets/core/index';\n\n/**\n * Displays the start form for a named process definition, which can be used to retrieve values to start a new process.\n *\n * After the form has been completed the form values are available from the attribute component.form.values and\n * component.form.isValid (boolean) can be used to check the if the form is valid or not. Both of these properties are\n * updated as the user types into the form.\n *\n * @Input\n * {processDefinitionId} string: The process definition ID\n * {showOutcomeButtons} boolean: Whether form outcome buttons should be shown, this is now always active to show form outcomes\n *  @Output\n *  {formLoaded} EventEmitter - This event is fired when the form is loaded, it pass all the value in the form.\n *  {formSaved} EventEmitter - This event is fired when the form is saved, it pass all the value in the form.\n *  {formCompleted} EventEmitter - This event is fired when the form is completed, it pass all the value in the form.\n *\n * @returns {FormComponent} .\n */\n@Component({\n    selector: 'adf-start-form',\n    template: require('./start-form.component.html'),\n    styles: [require('./form.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartFormComponent extends FormComponent implements OnChanges, OnInit {\n\n    @Input()\n    processDefinitionId: string;\n\n    @Input()\n    processId: string;\n\n    @Input()\n    showOutcomeButtons: boolean = true;\n\n    @Input()\n    showRefreshButton: boolean = true;\n\n    @Input()\n    readOnlyForm: boolean = false;\n\n    @Output()\n    outcomeClick: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    @ViewChild('outcomesContainer', {})\n    outcomesContainer: ElementRef = null;\n\n    constructor(formService: FormService,\n                visibilityService: WidgetVisibilityService,\n                logService: LogService) {\n        super(formService, visibilityService, null, null);\n        this.showTitle = false;\n    }\n\n    ngOnInit() {\n        this.formService.formContentClicked.subscribe((content: ContentLinkModel) => {\n            this.formContentClicked.emit(content);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processDefinitionId = changes['processDefinitionId'];\n        if (processDefinitionId && processDefinitionId.currentValue) {\n            this.visibilityService.cleanProcessVariable();\n            this.getStartFormDefinition(processDefinitionId.currentValue);\n            return;\n        }\n\n        let processId = changes['processId'];\n        if (processId && processId.currentValue) {\n            this.visibilityService.cleanProcessVariable();\n            this.loadStartForm(processId.currentValue);\n            return;\n        }\n    }\n\n    loadStartForm(processId: string) {\n        this.formService.getProcessIntance(processId)\n            .subscribe((intance: any) => {\n                this.formService\n                    .getStartFormInstance(processId)\n                    .subscribe(\n                    form => {\n                        this.formName = form.name;\n                        if (intance.variables) {\n                            form.processVariables = intance.variables;\n                        }\n                        this.form = this.parseForm(form);\n                        this.form.readOnly = this.readOnlyForm;\n                        this.onFormLoaded(this.form);\n                    },\n                    error => this.handleError(error)\n                    );\n            });\n    }\n\n    getStartFormDefinition(processId: string) {\n        this.formService\n            .getStartFormDefinition(processId)\n            .subscribe(\n                form => {\n                    this.formName = form.processDefinitionName;\n                    this.form = this.parseForm(form);\n                    this.form.readOnly = this.readOnlyForm;\n                    this.onFormLoaded(this.form);\n                },\n                error => this.handleError(error)\n            );\n    }\n\n    /** @override */\n    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean {\n        if (outcome && outcome.isSystem && ( outcome.name === FormOutcomeModel.SAVE_ACTION ||\n            outcome.name === FormOutcomeModel.COMPLETE_ACTION )) {\n            return false;\n        } else if (outcome && outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {\n            return true;\n        }\n        return super.isOutcomeButtonVisible(outcome, isFormReadOnly);\n    }\n\n    /** @override */\n    saveTaskForm() {\n        // do nothing\n    }\n\n    /** @override */\n    onRefreshClicked() {\n        if (this.processDefinitionId) {\n            this.visibilityService.cleanProcessVariable();\n            this.getStartFormDefinition(this.processDefinitionId);\n        } else if (this.processId) {\n            this.visibilityService.cleanProcessVariable();\n            this.loadStartForm(this.processId);\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        this.outcomeClick.emit(outcome);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/start-form.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { AfterViewInit, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { FormFieldModel } from './../core/form-field.model';\nimport { baseHost , WidgetComponent } from './../widget.component';\nimport { ContainerWidgetComponentModel } from './container.widget.model';\n\n@Component({\n    selector: 'container-widget',\n    template: require('./container.widget.html'),\n    styles: [require('./container.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContainerWidgetComponent extends WidgetComponent implements OnInit, AfterViewInit {\n\n    content: ContainerWidgetComponentModel;\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n    onExpanderClicked() {\n        if (this.content && this.content.isCollapsible()) {\n            this.content.isExpanded = !this.content.isExpanded;\n        }\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.content = new ContainerWidgetComponentModel(this.field);\n        }\n    }\n\n    /**\n     * Serializes column fields\n     */\n    get fields(): FormFieldModel[] {\n        const fields = [];\n\n        let rowContainsElement = true,\n            rowIndex = 0;\n\n        while (rowContainsElement) {\n            rowContainsElement = false;\n            for (let i = 0; i < this.content.columns.length; i++ ) {\n                let field = this.content.columns[i].fields[rowIndex];\n                if (field) {\n                    rowContainsElement = true;\n                }\n\n                fields.push(field);\n            }\n            rowIndex++;\n        }\n\n        return fields;\n    }\n\n    /**\n     * Calculate the column width based on the numberOfColumns and current field's colspan property\n     *\n     * @param field\n     */\n    getColumnWith(field: FormFieldModel): string {\n        const colspan = field ? field.colspan : 1;\n        return (100 / this.content.json.numberOfColumns) * colspan + '%';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/container/container.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { AfterContentChecked, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormFieldModel, TabModel } from './../core/index';\n\n@Component({\n    selector: 'tabs-widget',\n    template: require('./tabs.widget.html'),\n    encapsulation: ViewEncapsulation.None\n})\nexport class TabsWidgetComponent implements AfterContentChecked {\n\n    @Input()\n    tabs: TabModel[] = [];\n\n    @Output()\n    formTabChanged: EventEmitter<FormFieldModel> = new EventEmitter<FormFieldModel>();\n\n    visibleTabs: TabModel[] = [];\n\n    hasTabs() {\n        return this.tabs && this.tabs.length > 0;\n    }\n\n    ngAfterContentChecked() {\n        this.filterVisibleTabs();\n    }\n\n    filterVisibleTabs() {\n        this.visibleTabs = this.tabs.filter(tab => {\n            return tab.isVisible;\n        });\n    }\n\n    tabChanged(field: FormFieldModel) {\n        this.formTabChanged.emit(field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/tabs/tabs.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'unknown-widget',\n    template: `\n            <mat-list class=\"adf-unknown-widget\">\n                <mat-list-item>\n                     <mat-icon class=\"mat-24\">error_outline</mat-icon>\n                     <span class=\"adf-unknown-text\">Unknown type: {{field.type}}</span>\n                </mat-list-item>\n            </mat-list>\n\n    `,\n    styles: [require('./unknown.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class UnknownWidgetComponent extends WidgetComponent {\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/unknown/unknown.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'amount-widget',\n    template: require('./amount.widget.html'),\n    styles: [require('./amount.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class AmountWidgetComponent extends WidgetComponent implements OnInit {\n\n    static DEFAULT_CURRENCY: string = '$';\n\n    currency: string = AmountWidgetComponent.DEFAULT_CURRENCY;\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.currency) {\n            this.currency = this.field.currency;\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/amount/amount.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ActivitiAlfrescoContentService } from '../../../services/activiti-alfresco.service';\nimport { ExternalContent } from '../core/external-content';\nimport { ExternalContentLink } from '../core/external-content-link';\nimport { FormFieldModel } from '../core/form-field.model';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'attach-widget',\n    template: require('./attach.widget.html'),\n    styles: [require('./attach.widget.css')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachWidgetComponent extends WidgetComponent implements OnInit {\n\n    selectedFolderPathId: string;\n    selectedFolderSiteId: string;\n    selectedFolderSiteName: string;\n    selectedFolderAccountId: string;\n    fileName: string;\n    selectedFolderNodes: [ExternalContent];\n    selectedFile: ExternalContent;\n\n    @Output()\n    fieldChanged: EventEmitter<FormFieldModel> = new EventEmitter<FormFieldModel>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('dialog')\n    dialog: any;\n\n    constructor(public formService: FormService,\n                private contentService: ActivitiAlfrescoContentService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            let params = this.field.params;\n\n            if (params &&\n                params.fileSource &&\n                params.fileSource.selectedFolder) {\n                this.selectedFolderSiteId = params.fileSource.selectedFolder.siteId;\n                this.selectedFolderSiteName = params.fileSource.selectedFolder.site;\n                this.setupFileBrowser();\n                this.getExternalContentNodes();\n            }\n        }\n    }\n\n    setupFileBrowser() {\n        if (this.field) {\n            let params = this.field.params;\n            this.selectedFolderPathId = params.fileSource.selectedFolder.pathId;\n            this.selectedFolderAccountId = params.fileSource.selectedFolder.accountId;\n        }\n    }\n\n    getLinkedFileName(): string {\n        let result = this.fileName;\n\n        if (this.selectedFile &&\n            this.selectedFile.title) {\n            result = this.selectedFile.title;\n        }\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0 &&\n            this.field.value[0].name) {\n            result = this.field.value[0].name;\n        }\n\n        return result;\n    }\n\n    getExternalContentNodes() {\n        this.contentService.getAlfrescoNodes(this.selectedFolderAccountId, this.selectedFolderPathId)\n            .subscribe(\n                nodes => this.selectedFolderNodes = nodes,\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n    }\n\n    selectFile(node: ExternalContent, $event: any) {\n        this.contentService.linkAlfrescoNode(this.selectedFolderAccountId, node, this.selectedFolderSiteId).subscribe(\n            (link: ExternalContentLink) => {\n                this.selectedFile = node;\n                this.field.value = [link];\n                this.field.json.value = [link];\n                this.closeDialog();\n                this.fieldChanged.emit(this.field);\n            }\n        );\n    }\n\n    selectFolder(node: ExternalContent, $event: any) {\n        this.selectedFolderPathId = node.id;\n        this.getExternalContentNodes();\n    }\n\n    showDialog(): boolean {\n        this.setupFileBrowser();\n        this.getExternalContentNodes();\n\n        if (this.dialog) {\n            // todo: show dialog\n            return true;\n        }\n        return false;\n    }\n\n    private closeDialog() {\n        if (this.dialog) {\n            this.dialog.nativeElement.close();\n        }\n    }\n\n    cancel() {\n        this.closeDialog();\n    }\n\n    reset() {\n        this.field.value = null;\n        this.field.json.value = null;\n    }\n\n    hasFile(): boolean {\n        return this.field && this.field.value;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/attach/attach.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'checkbox-widget',\n    template: require('./checkbox.widget.html'),\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class CheckboxWidgetComponent extends WidgetComponent {\n\n    constructor(private visibilityService: WidgetVisibilityService, public formService: FormService) {\n        super(formService);\n    }\n\n    onChange() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/checkbox/checkbox.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';\nimport * as moment from 'moment';\nimport { Moment } from 'moment';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter, UserPreferencesService } from 'ng2-alfresco-core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'date-widget',\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}],\n    template: require('./date.widget.html'),\n    styles: [require('./date.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DateWidgetComponent extends WidgetComponent implements OnInit {\n\n    minDate: Moment;\n    maxDate: Moment;\n\n    displayDate: Moment;\n\n    constructor(\n        public formService: FormService,\n        private dateAdapter: DateAdapter<Moment>,\n        private preferences: UserPreferencesService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        this.preferences.locale$.subscribe( (locale) => {\n            this.dateAdapter.setLocale(locale);\n        });\n        let momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplyaFormat = this.field.dateDisplayFormat;\n\n        if (this.field) {\n            if (this.field.minValue) {\n                this.minDate = moment(this.field.minValue, 'DD/MM/YYYY');\n            }\n\n            if (this.field.maxValue) {\n                this.maxDate = moment(this.field.maxValue, 'DD/MM/YYYY');\n            }\n        }\n        this.displayDate = moment(this.field.value, this.field.dateDisplayFormat);\n    }\n\n    onDateChanged(newDateValue) {\n        if (newDateValue && newDateValue.value) {\n            this.field.value = newDateValue.value.format(this.field.dateDisplayFormat);\n        }else if ( newDateValue ) {\n            this.field.value = newDateValue;\n        }else {\n            this.field.value = null;\n        }\n        this.checkVisibility(this.field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/date/date.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'display-text-widget',\n    template: require('./display-text.widget.html'),\n    styles: [require('./display-text.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DisplayTextWidgetComponentComponent extends WidgetComponent {\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/display-text/display-text.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'adf-form-document-widget',\n    template: require('./document.widget.html'),\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DocumentWidgetComponent extends WidgetComponent implements OnInit {\n\n    fileId: string = null;\n    hasFile: boolean = false;\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            const file = this.field.value;\n\n            if (file) {\n                this.fileId = file.id;\n                this.hasFile = true;\n            } else {\n                this.fileId = null;\n                this.hasFile = false;\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/document/document.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from '../../../services/form.service';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormFieldOption } from './../core/form-field-option';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'dropdown-widget',\n    template: require('./dropdown.widget.html'),\n    styles: [require('./dropdown.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DropdownWidgetComponent extends WidgetComponent implements OnInit {\n\n    constructor(public formService: FormService,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.restUrl) {\n            if (this.field.form.taskId) {\n                this.getValuesByTaskId();\n            } else {\n                this.getValuesByProcessDefinitionId();\n            }\n        }\n    }\n\n    getValuesByTaskId() {\n        this.formService\n            .getRestFieldValues(\n                this.field.form.taskId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    let options = [];\n                    if (this.field.emptyOption) {\n                        options.push(this.field.emptyOption);\n                    }\n                    this.field.options = options.concat((result || []));\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getValuesByProcessDefinitionId() {\n        this.formService\n            .getRestFieldValuesByProcessId(\n                this.field.form.processDefinitionId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    let options = [];\n                    if (this.field.emptyOption) {\n                        options.push(this.field.emptyOption);\n                    }\n                    this.field.options = options.concat((result || []));\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getOptionValue(option: FormFieldOption, fieldValue: string): string {\n        let optionValue: string = '';\n        if (option.id === 'empty' || option.name !== fieldValue) {\n            optionValue = option.id;\n        } else {\n            optionValue = option.name;\n        }\n        return optionValue;\n    }\n\n    checkVisibility() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    isReadOnlyType(): boolean {\n        return this.field.type === 'readonly' ? true : false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dropdown/dropdown.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { ChangeDetectorRef, Component, ElementRef, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost, WidgetComponent } from './../widget.component';\nimport { DynamicTableColumn } from './dynamic-table-column.model';\nimport { DynamicTableRow } from './dynamic-table-row.model';\nimport { DynamicTableModel } from './dynamic-table.widget.model';\n\n@Component({\n    selector: 'dynamic-table-widget',\n    template: require('./dynamic-table.widget.html'),\n    styles: [require('./dynamic-table.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DynamicTableWidgetComponent extends WidgetComponent implements OnInit {\n\n    ERROR_MODEL_NOT_FOUND = 'Table model not found';\n\n    content: DynamicTableModel;\n\n    editMode: boolean = false;\n    editRow: DynamicTableRow = null;\n\n    private selectArrayCode = [32, 0, 13];\n\n    constructor(public formService: FormService,\n                public elementRef: ElementRef,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService,\n                private cd: ChangeDetectorRef) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.content = new DynamicTableModel(this.field, this.formService);\n            this.visibilityService.refreshVisibility(this.field.form);\n        }\n    }\n\n    forceFocusOnAddButton() {\n        if (this.content) {\n            this.cd.detectChanges();\n            let buttonAddRow = <HTMLButtonElement> this.elementRef.nativeElement.querySelector('#' + this.content.id + '-add-row');\n            if (this.isDynamicTableReady(buttonAddRow)) {\n                buttonAddRow.focus();\n            }\n        }\n    }\n\n    private isDynamicTableReady(buttonAddRow) {\n        return this.field && !this.editMode && buttonAddRow;\n    }\n\n    isValid() {\n        let result = true;\n\n        if (this.content && this.content.field) {\n            result = this.content.field.isValid;\n        }\n\n        return result;\n    }\n\n    onRowClicked(row: DynamicTableRow) {\n        if (this.content) {\n            this.content.selectedRow = row;\n        }\n    }\n\n    onKeyPressed($event: KeyboardEvent, row: DynamicTableRow) {\n        if (this.content && this.isEnterOrSpacePressed($event.keyCode)) {\n            this.content.selectedRow = row;\n        }\n    }\n\n    private isEnterOrSpacePressed(keycode) {\n        return this.selectArrayCode.indexOf(keycode) !== -1;\n    }\n\n    hasSelection(): boolean {\n        return !!(this.content && this.content.selectedRow);\n    }\n\n    moveSelectionUp(): boolean {\n        if (this.content && !this.readOnly) {\n            this.content.moveRow(this.content.selectedRow, -1);\n            return true;\n        }\n        return false;\n    }\n\n    moveSelectionDown(): boolean {\n        if (this.content && !this.readOnly) {\n            this.content.moveRow(this.content.selectedRow, 1);\n            return true;\n        }\n        return false;\n    }\n\n    deleteSelection(): boolean {\n        if (this.content && !this.readOnly) {\n            this.content.deleteRow(this.content.selectedRow);\n            return true;\n        }\n        return false;\n    }\n\n    addNewRow(): boolean {\n        if (this.content && !this.readOnly) {\n            this.editRow = <DynamicTableRow> {\n                isNew: true,\n                selected: false,\n                value: {}\n            };\n            this.editMode = true;\n            return true;\n        }\n        return false;\n    }\n\n    editSelection(): boolean {\n        if (this.content && !this.readOnly) {\n            this.editRow = this.copyRow(this.content.selectedRow);\n            this.editMode = true;\n            return true;\n        }\n        return false;\n    }\n\n    getCellValue(row: DynamicTableRow, column: DynamicTableColumn): any {\n        if (this.content) {\n            let result = this.content.getCellValue(row, column);\n            if (column.type === 'Amount') {\n                return (column.amountCurrency || '$') + ' ' + (result || 0);\n            }\n            return result;\n        }\n        return null;\n    }\n\n    onSaveChanges() {\n        if (this.content) {\n            if (this.editRow.isNew) {\n                let row = this.copyRow(this.editRow);\n                this.content.selectedRow = null;\n                this.content.addRow(row);\n                this.editRow.isNew = false;\n            } else {\n                this.content.selectedRow.value = this.copyObject(this.editRow.value);\n            }\n            this.content.flushValue();\n        } else {\n            this.logService.error(this.ERROR_MODEL_NOT_FOUND);\n        }\n        this.editMode = false;\n        this.forceFocusOnAddButton();\n    }\n\n    onCancelChanges() {\n        this.editMode = false;\n        this.editRow = null;\n        this.forceFocusOnAddButton();\n    }\n\n    copyRow(row: DynamicTableRow): DynamicTableRow {\n        return <DynamicTableRow> {\n            value: this.copyObject(row.value)\n        };\n    }\n\n    private copyObject(obj: any): any {\n        let result = obj;\n\n        if (typeof obj === 'object' && obj !== null && obj !== undefined) {\n            result = Object.assign({}, obj);\n            Object.keys(obj).forEach(key => {\n                if (typeof obj[key] === 'object') {\n                    result[key] = this.copyObject(obj[key]);\n                }\n            });\n        }\n\n        return result;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport * as moment from 'moment';\nimport { ValidateDynamicTableRowEvent } from '../../../events/validate-dynamic-table-row.event';\nimport { FormService } from './../../../services/form.service';\nimport { FormFieldModel } from './../core/form-field.model';\nimport { FormWidgetModel } from './../core/form-widget.model';\nimport { CellValidator } from './cell-validator.model';\nimport { DateCellValidator } from './date-cell-validator-model';\nimport { DynamicRowValidationSummary } from './dynamic-row-validation-summary.model';\nimport { DynamicTableColumn } from './dynamic-table-column.model';\nimport { DynamicTableRow } from './dynamic-table-row.model';\nimport { NumberCellValidator } from './number-cell-validator.model';\nimport { RequiredCellValidator } from './required-cell-validator.model';\n\nexport class DynamicTableModel extends FormWidgetModel {\n\n    field: FormFieldModel;\n    columns: DynamicTableColumn[] = [];\n    visibleColumns: DynamicTableColumn[] = [];\n    rows: DynamicTableRow[] = [];\n\n    private _selectedRow: DynamicTableRow;\n    private _validators: CellValidator[] = [];\n\n    get selectedRow(): DynamicTableRow {\n        return this._selectedRow;\n    }\n\n    set selectedRow(value: DynamicTableRow) {\n        if (this._selectedRow && this._selectedRow === value) {\n            this._selectedRow.selected = false;\n            this._selectedRow = null;\n            return;\n        }\n\n        this.rows.forEach(row => row.selected = false);\n\n        this._selectedRow = value;\n\n        if (value) {\n            this._selectedRow.selected = true;\n        }\n    }\n\n    constructor(field: FormFieldModel, private formService: FormService) {\n        super(field.form, field.json);\n        this.field = field;\n\n        if (field.json) {\n            const columns = this.getColumns(field);\n            if (columns) {\n                this.columns = columns;\n                this.visibleColumns = this.columns.filter(col => col.visible);\n            }\n\n            if (field.json.value) {\n                this.rows = field.json.value.map(obj => <DynamicTableRow> {selected: false, value: obj});\n            }\n        }\n\n        this._validators = [\n            new RequiredCellValidator(),\n            new DateCellValidator(),\n            new NumberCellValidator()\n        ];\n    }\n\n    private getColumns(field: FormFieldModel): DynamicTableColumn[] {\n        if (field && field.json) {\n            let definitions = field.json.columnDefinitions;\n            if (!definitions && field.json.params && field.json.params.field) {\n                definitions = field.json.params.field.columnDefinitions;\n            }\n\n            if (definitions) {\n                return definitions.map(obj => <DynamicTableColumn> obj);\n            }\n        }\n        return null;\n    }\n\n    flushValue() {\n        if (this.field) {\n            this.field.value = this.rows.map(r => r.value);\n            this.field.updateForm();\n        }\n    }\n\n    moveRow(row: DynamicTableRow, offset: number) {\n        let oldIndex = this.rows.indexOf(row);\n        if (oldIndex > -1) {\n            let newIndex = (oldIndex + offset);\n\n            if (newIndex < 0) {\n                newIndex = 0;\n            } else if (newIndex >= this.rows.length) {\n                newIndex = this.rows.length;\n            }\n\n            let arr = this.rows.slice();\n            arr.splice(oldIndex, 1);\n            arr.splice(newIndex, 0, row);\n            this.rows = arr;\n\n            this.flushValue();\n        }\n    }\n\n    deleteRow(row: DynamicTableRow) {\n        if (row) {\n            if (this.selectedRow === row) {\n                this.selectedRow = null;\n            }\n            let idx = this.rows.indexOf(row);\n            if (idx > -1) {\n                this.rows.splice(idx, 1);\n                this.flushValue();\n            }\n        }\n    }\n\n    addRow(row: DynamicTableRow) {\n        if (row) {\n            this.rows.push(row);\n            // this.selectedRow = row;\n        }\n    }\n\n    validateRow(row: DynamicTableRow): DynamicRowValidationSummary {\n        const summary = <DynamicRowValidationSummary> {\n            isValid: true,\n            text: null\n        };\n\n        const event = new ValidateDynamicTableRowEvent(this.form, this.field, row, summary);\n        this.formService.validateDynamicTableRow.next(event);\n\n        if (event.defaultPrevented || !summary.isValid) {\n            return summary;\n        }\n\n        if (row) {\n            for (let col of this.columns) {\n                for (let validator of this._validators) {\n                    if (!validator.validate(row, col, summary)) {\n                        return summary;\n                    }\n                }\n            }\n        }\n\n        return summary;\n    }\n\n    getCellValue(row: DynamicTableRow, column: DynamicTableColumn): any {\n        let result = row.value[column.id];\n\n        if (column.type === 'Dropdown') {\n            if (result) {\n                return result.name;\n            }\n        }\n\n        if (column.type === 'Boolean') {\n            return result ? true : false;\n        }\n\n        if (column.type === 'Date') {\n            if (result) {\n                return moment(result.split('T')[0], 'YYYY-MM-DD').format('DD-MM-YYYY');\n            }\n        }\n\n        return result || '';\n    }\n\n    getDisplayText(column: DynamicTableColumn): string {\n        let result = column.name;\n        if (column.type === 'Amount') {\n            let currency = column.amountCurrency || '$';\n            result = `${column.name} (${currency})`;\n        }\n        return result;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, Input } from '@angular/core';\nimport { DynamicTableColumn } from './../../dynamic-table-column.model';\nimport { DynamicTableRow } from './../../dynamic-table-row.model';\nimport { DynamicTableModel } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-boolean-editor',\n    template: require('./boolean.editor.html'),\n    styles: [require('./boolean.editor.scss')]\n})\nexport class BooleanEditorComponent {\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    onValueChanged(row: DynamicTableRow, column: DynamicTableColumn, event: any) {\n        let value: boolean = (<HTMLInputElement> event).checked;\n        row.value[column.id] = value;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';\nimport * as moment from 'moment';\nimport { Moment } from 'moment';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter, UserPreferencesService } from 'ng2-alfresco-core';\nimport { DynamicTableColumn } from './../../dynamic-table-column.model';\nimport { DynamicTableRow } from './../../dynamic-table-row.model';\nimport { DynamicTableModel } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-date-editor',\n    template: require('./date.editor.html'),\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}],\n    styles: [require('./date.editor.scss')]\n})\nexport class DateEditorComponent implements OnInit {\n\n    DATE_FORMAT: string = 'DD-MM-YYYY';\n\n    value: any;\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    minDate: Moment;\n    maxDate: Moment;\n\n    constructor(private dateAdapter: DateAdapter<Moment>,\n                private preferences: UserPreferencesService) {\n    }\n\n    ngOnInit() {\n        this.preferences.locale$.subscribe((locale) => {\n            this.dateAdapter.setLocale(locale);\n        });\n        let momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplyaFormat = this.DATE_FORMAT;\n\n        this.value = moment(this.table.getCellValue(this.row, this.column), this.DATE_FORMAT);\n    }\n\n    onDateChanged(newDateValue) {\n        if (newDateValue) {\n            let momentDate = moment(newDateValue, this.DATE_FORMAT, true);\n\n            if (!momentDate.isValid()) {\n                this.row.value[this.column.id] = '';\n            } else {\n                this.row.value[this.column.id] = `${momentDate.format('YYYY-MM-DD')}T00:00:00.000Z`;\n                this.table.flushValue();\n            }\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from './../../../../../services/form.service';\nimport { DynamicTableColumnOption } from './../../dynamic-table-column-option.model';\nimport { DynamicTableColumn } from './../../dynamic-table-column.model';\nimport { DynamicTableRow } from './../../dynamic-table-row.model';\nimport { DynamicTableModel } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-dropdown-editor',\n    template: require('./dropdown.editor.html'),\n    styles: [require('./dropdown.editor.scss')]\n})\nexport class DropdownEditorComponent implements OnInit {\n\n    value: any = null;\n    options: DynamicTableColumnOption[] = [];\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    constructor(public formService: FormService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        let field = this.table.field;\n        if (field) {\n            if (this.column.optionType === 'rest') {\n                if (this.table.form && this.table.form.taskId) {\n                    this.getValuesByTaskId(field);\n                } else {\n                    this.getValuesByProcessDefinitionId(field);\n                }\n            } else {\n                this.options = this.column.options || [];\n                this.value = this.table.getCellValue(this.row, this.column);\n            }\n        }\n    }\n\n    getValuesByTaskId(field) {\n        this.formService\n            .getRestFieldValuesColumn(\n                field.form.taskId,\n                field.id,\n                this.column.id\n            )\n            .subscribe(\n                (result: DynamicTableColumnOption[]) => {\n                    this.column.options = result || [];\n                    this.options = this.column.options;\n                    this.value = this.table.getCellValue(this.row, this.column);\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getValuesByProcessDefinitionId(field) {\n        this.formService\n            .getRestFieldValuesColumnByProcessId(\n                field.form.processDefinitionId,\n                field.id,\n                this.column.id\n            )\n            .subscribe(\n                (result: DynamicTableColumnOption[]) => {\n                    this.column.options = result || [];\n                    this.options = this.column.options;\n                    this.value = this.table.getCellValue(this.row, this.column);\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    onValueChanged(row: DynamicTableRow, column: DynamicTableColumn, event: any) {\n        let value: any = (<HTMLInputElement> event).value;\n        value = column.options.find(opt => opt.name === value);\n        row.value[column.id] = value;\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DynamicRowValidationSummary } from './../dynamic-row-validation-summary.model';\nimport { DynamicTableColumn } from './../dynamic-table-column.model';\nimport { DynamicTableRow } from './../dynamic-table-row.model';\nimport { DynamicTableModel } from './../dynamic-table.widget.model';\n\n@Component({\n    selector: 'row-editor',\n    template: require('./row.editor.html'),\n    styles: [require('./row.editor.css')]\n})\nexport class RowEditorComponent {\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    @Output()\n    save: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    cancel: EventEmitter<any> = new EventEmitter<any>();\n\n    validationSummary: DynamicRowValidationSummary = <DynamicRowValidationSummary> { isValid: true, text: null };\n\n    onCancelChanges() {\n        this.cancel.emit({\n            table: this.table,\n            row: this.row,\n            column: this.column\n        });\n    }\n\n    onSaveChanges() {\n        this.validate();\n        if (this.isValid()) {\n            this.save.emit({\n                table: this.table,\n                row: this.row,\n                column: this.column\n            });\n        }\n    }\n\n    private isValid(): boolean {\n        return this.validationSummary && this.validationSummary.isValid;\n    }\n\n    private validate() {\n        this.validationSummary = this.table.validateRow(this.row);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/editors/row.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { DynamicTableColumn } from './../../dynamic-table-column.model';\nimport { DynamicTableRow } from './../../dynamic-table-row.model';\nimport { DynamicTableModel } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-text-editor',\n    template: require('./text.editor.html'),\n    styles: [require('./text.editor.scss')]\n})\nexport class TextEditorComponent implements OnInit {\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    displayName: string;\n\n    ngOnInit() {\n        this.displayName = this.table.getDisplayText(this.column);\n    }\n\n    onValueChanged(row: DynamicTableRow, column: DynamicTableColumn, event: any) {\n        let value: any = (<HTMLInputElement> event.target).value;\n        row.value[column.id] = value;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { ErrorMessageModel } from '../core/index';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'error-widget',\n    template: require('./error.component.html'),\n    styles: [require('./error.component.scss')],\n    animations: [\n        trigger('transitionMessages', [\n            state('enter', style({opacity: 1, transform: 'translateY(0%)'})),\n            transition('void => enter', [\n                style({opacity: 0, transform: 'translateY(-100%)'}),\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    ],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ErrorWidgetComponent extends WidgetComponent implements OnChanges {\n\n    @Input()\n    error: ErrorMessageModel;\n\n    @Input()\n    required: string;\n\n    translateParameters: any = null;\n\n    _subscriptAnimationState: string = '';\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['required']) {\n            this.required = changes.required.currentValue;\n            this._subscriptAnimationState = 'enter';\n        }\n        if (changes['error']) {\n            if (changes.error.currentValue.isActive()) {\n                this.error = changes.error.currentValue;\n                this.translateParameters = this.error.getAttributesAsJsonObj();\n                this._subscriptAnimationState = 'enter';\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/error/error.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport { Component, ElementRef, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from '../../../services/form.service';\nimport { GroupModel } from './../core/group.model';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'functional-group-widget',\n    template: require('./functional-group.widget.html'),\n    styles: [require('./functional-group.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class FunctionalGroupWidgetComponent extends WidgetComponent implements OnInit {\n\n    value: string;\n    oldValue: string;\n    groups: GroupModel[] = [];\n    minTermLength: number = 1;\n    groupId: string;\n\n    constructor(public formService: FormService,\n                public elementRef: ElementRef) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            let group = this.field.value;\n            if (group) {\n                this.value = group.name;\n            }\n\n            let params = this.field.params;\n            if (params && params['restrictWithGroup']) {\n                let restrictWithGroup = <GroupModel> params['restrictWithGroup'];\n                this.groupId = restrictWithGroup.id;\n            }\n\n            // Load auto-completion for previously saved value\n            if (this.value) {\n                this.formService\n                    .getWorkflowGroups(this.value, this.groupId)\n                    .subscribe((result: GroupModel[]) => this.groups = result || []);\n            }\n        }\n    }\n\n    onKeyUp(event: KeyboardEvent) {\n        if (this.value && this.value.length >= this.minTermLength  && this.oldValue !== this.value) {\n            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {\n                this.oldValue = this.value;\n                this.formService.getWorkflowGroups(this.value, this.groupId)\n                    .subscribe((result: GroupModel[]) => {\n                        this.groups = result || [];\n                    });\n            }\n        }\n    }\n\n    flushValue() {\n        let option = this.groups.find(item => item.name.toLocaleLowerCase() === this.value.toLocaleLowerCase());\n\n        if (option) {\n            this.field.value = option;\n            this.value = option.name;\n        } else {\n            this.field.value = null;\n            this.value = null;\n        }\n\n        this.field.updateForm();\n    }\n\n    onItemClick(item: GroupModel, event: Event) {\n        if (item) {\n            this.field.value = item;\n            this.value = item.name;\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    onItemSelect(item: GroupModel) {\n        if (item) {\n            this.field.value = item;\n            this.value = item.name;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/functional-group/functional-group.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'hyperlink-widget',\n    template: require('./hyperlink.widget.html'),\n    styles: [require('./hyperlink.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class HyperlinkWidgetComponent extends WidgetComponent implements OnInit {\n\n    linkUrl: string = WidgetComponent.DEFAULT_HYPERLINK_URL;\n    linkText: string = null;\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.linkUrl = this.getHyperlinkUrl(this.field);\n            this.linkText = this.getHyperlinkText(this.field);\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/hyperlink/hyperlink.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'multiline-text-widget',\n    template: require('./multiline-text.widget.html'),\n    styles: [require('./multiline-text.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultilineTextWidgetComponentComponent extends WidgetComponent  {\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/multiline-text/multiline-text.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'number-widget',\n    template: require('./number.widget.html'),\n    styles: [require('./number.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NumberWidgetComponent extends WidgetComponent {\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/number/number.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport { Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { PeopleProcessService, UserProcessModel } from 'ng2-alfresco-core';\nimport { FormService } from '../../../services/form.service';\nimport { GroupModel } from '../core/group.model';\nimport { baseHost, WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'people-widget',\n    template: require('./people.widget.html'),\n    styles: [require('./people.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class PeopleWidgetComponent extends WidgetComponent implements OnInit {\n\n    @ViewChild('inputValue')\n    input: ElementRef;\n\n    minTermLength: number = 1;\n    oldValue: string;\n    users: UserProcessModel[] = [];\n    groupId: string;\n\n    constructor(public formService: FormService, public peopleProcessService: PeopleProcessService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            let params = this.field.params;\n            if (params && params.restrictWithGroup) {\n                let restrictWithGroup = <GroupModel> params.restrictWithGroup;\n                this.groupId = restrictWithGroup.id;\n            }\n        }\n    }\n\n    onKeyUp(event: KeyboardEvent) {\n        let value = (this.input.nativeElement as HTMLInputElement).value;\n        if (value && value.length >= this.minTermLength && this.oldValue !== value) {\n            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {\n                if (value.length >= this.minTermLength) {\n                    this.oldValue = value;\n                    this.searchUsers(value);\n                }\n            }\n        } else {\n            this.validateValue(value);\n        }\n    }\n\n    searchUsers(userName: string) {\n        this.formService.getWorkflowUsers(userName, this.groupId)\n            .subscribe((result: UserProcessModel[]) => {\n                this.users = result || [];\n                this.validateValue(userName);\n            });\n    }\n\n    validateValue(userName: string) {\n        if (this.isValidUser(userName)) {\n            this.field.validationSummary.message = '';\n        } else if (!userName) {\n            this.field.value = null;\n            this.users = [];\n        } else {\n            this.field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';\n            this.field.markAsInvalid();\n            this.field.form.markAsInvalid();\n        }\n    }\n\n    isValidUser(value: string): boolean {\n        let isValid = false;\n        if (value) {\n            let resultUser: UserProcessModel = this.users.find((user) => this.getDisplayName(user).toLocaleLowerCase() === value.toLocaleLowerCase());\n\n            if (resultUser) {\n                isValid = true;\n            }\n        }\n\n        return isValid;\n    }\n\n    getDisplayName(model: UserProcessModel) {\n        if (model) {\n            let displayName = `${model.firstName || ''} ${model.lastName || ''}`;\n            return displayName.trim();\n        }\n        return '';\n    }\n\n    onItemSelect(item: UserProcessModel) {\n        if (item) {\n            this.field.value = item;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/people/people.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from '../../../services/form.service';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormFieldOption } from './../core/form-field-option';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'radio-buttons-widget',\n    template: require('./radio-buttons.widget.html'),\n    styles: [require('./radio-buttons.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class RadioButtonsWidgetComponent extends WidgetComponent implements OnInit {\n\n    constructor(public formService: FormService,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.restUrl) {\n            if (this.field.form.taskId) {\n                this.getOptionsByTaskId();\n            } else {\n                this.getOptionsByProcessDefinitionId();\n            }\n        }\n    }\n\n    getOptionsByTaskId() {\n        this.formService\n            .getRestFieldValues(\n                this.field.form.taskId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    this.field.options = result || [];\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getOptionsByProcessDefinitionId() {\n        this.formService\n            .getRestFieldValuesByProcessId(\n                this.field.form.processDefinitionId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    this.field.options = result || [];\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    onOptionClick(optionSelected: any) {\n        this.field.value = optionSelected;\n        this.checkVisibility();\n    }\n\n    checkVisibility() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport {\n    Directive,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    Input,\n    OnChanges,\n    Renderer,\n    SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputMaskDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[textMask]',\n    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class InputMaskDirective implements OnChanges, ControlValueAccessor {\n\n    @Input('textMask') inputMask: {\n        mask: '',\n        isReversed: false\n    };\n\n    private translationMask = {\n        '0': { pattern: /\\d/ },\n        '9': { pattern: /\\d/, optional: true },\n        '#': { pattern: /\\d/, recursive: true },\n        'A': { pattern: /[a-zA-Z0-9]/ },\n        'S': { pattern: /[a-zA-Z]/ }\n    };\n\n    private byPassKeys = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91];\n    private value;\n    private invalidCharacters = [];\n\n    constructor(private el: ElementRef, private render: Renderer) {\n    }\n\n    _onChange = (_: any) => {\n    }\n\n    _onTouched = () => {\n    }\n\n    @HostListener('input', ['$event'])\n    @HostListener('keyup', ['$event']) onTextInput(event: KeyboardEvent) {\n        if (this.inputMask && this.inputMask.mask) {\n            this.maskValue(this.el.nativeElement.value, this.el.nativeElement.selectionStart,\n                this.inputMask.mask, this.inputMask.isReversed, event.keyCode);\n        } else {\n            this._onChange(this.el.nativeElement.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['inputMask'] && changes['inputMask'].currentValue['mask']) {\n            this.inputMask = changes['inputMask'].currentValue;\n        }\n    }\n\n    writeValue(value: any) {\n        this.el.nativeElement.value = value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => any): void {\n        this._onTouched = fn;\n    }\n\n    private maskValue(actualValue, startCaret, maskToApply, isMaskReversed, keyCode) {\n        if (this.byPassKeys.indexOf(keyCode) === -1) {\n            let value = this.getMasked(false, actualValue, maskToApply, isMaskReversed);\n            let calculatedCaret = this.calculateCaretPosition(startCaret, actualValue, keyCode);\n            this.render.setElementAttribute(this.el.nativeElement, 'value', value);\n            this.el.nativeElement.value = value;\n            this.setValue(value);\n            this._onChange(value);\n            this.setCaretPosition(calculatedCaret);\n        }\n    }\n\n    private setCaretPosition(caretPosition) {\n        this.el.nativeElement.moveStart = caretPosition;\n        this.el.nativeElement.moveEnd = caretPosition;\n    }\n\n    calculateCaretPosition(caretPosition, newValue, keyCode) {\n        let newValueLength = newValue.length;\n        let oldValue = this.getValue() || '';\n        let oldValueLength = oldValue.length;\n\n        if (keyCode === 8 && oldValue !== newValue) {\n            caretPosition = caretPosition - (newValue.slice(0, caretPosition).length - oldValue.slice(0, caretPosition).length);\n        } else if (oldValue !== newValue) {\n            if (caretPosition >= oldValueLength) {\n                caretPosition = newValueLength;\n            } else {\n                caretPosition = caretPosition + (newValue.slice(0, caretPosition).length - oldValue.slice(0, caretPosition).length);\n            }\n        }\n        return caretPosition;\n    }\n\n    getMasked(skipMaskChars, val, mask, isReversed = false) {\n        let buf = [],\n            value = val,\n            maskIndex = 0,\n            maskLen = mask.length,\n            valueIndex = 0,\n            valueLength = value.length,\n            offset = 1,\n            addMethod = 'push',\n            resetPos = -1,\n            lastMaskChar,\n            lastUntranslatedMaskChar,\n            check;\n\n        if (isReversed) {\n            addMethod = 'unshift';\n            offset = -1;\n            lastMaskChar = 0;\n            maskIndex = maskLen - 1;\n            valueIndex = valueLength - 1;\n        } else {\n            lastMaskChar = maskLen - 1;\n        }\n        check = this.isToCheck(isReversed, maskIndex, maskLen, valueIndex, valueLength);\n        while (check) {\n            let maskDigit = mask.charAt(maskIndex),\n                valDigit = value.charAt(valueIndex),\n                translation = this.translationMask[maskDigit];\n\n            if (translation) {\n                if (valDigit.match(translation.pattern)) {\n                    buf[addMethod](valDigit);\n                    if (translation.recursive) {\n                        if (resetPos === -1) {\n                            resetPos = maskIndex;\n                        } else if (maskIndex === lastMaskChar) {\n                            maskIndex = resetPos - offset;\n                        }\n                        if (lastMaskChar === resetPos) {\n                            maskIndex -= offset;\n                        }\n                    }\n                    maskIndex += offset;\n                } else if (valDigit === lastUntranslatedMaskChar) {\n                    lastUntranslatedMaskChar = undefined;\n                } else if (translation.optional) {\n                    maskIndex += offset;\n                    valueIndex -= offset;\n                } else {\n                    this.invalidCharacters.push({\n                        index: valueIndex,\n                        digit: valDigit,\n                        translated: translation.pattern\n                    });\n                }\n                valueIndex += offset;\n            } else {\n                if (!skipMaskChars) {\n                    buf[addMethod](maskDigit);\n                }\n                if (valDigit === maskDigit) {\n                    valueIndex += offset;\n                } else {\n                    lastUntranslatedMaskChar = maskDigit;\n                }\n                maskIndex += offset;\n            }\n            check = this.isToCheck(isReversed, maskIndex, maskLen, valueIndex, valueLength);\n        }\n\n        let lastMaskCharDigit = mask.charAt(lastMaskChar);\n        if (maskLen === valueLength + 1 && !this.translationMask[lastMaskCharDigit]) {\n            buf.push(lastMaskCharDigit);\n        }\n\n        return buf.join('');\n    }\n\n    private isToCheck(isReversed, maskIndex, maskLen, valueIndex, valueLength) {\n        let check = false;\n        if (isReversed) {\n            check = (maskIndex > -1) && (valueIndex > -1);\n        } else {\n            check = (maskIndex < maskLen) && (valueIndex < valueLength);\n        }\n        return check;\n    }\n\n    private setValue(value) {\n        this.value = value;\n    }\n\n    private getValue() {\n        return this.value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/text/text-mask.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'text-widget',\n    template: require('./text.widget.html'),\n    styles: [require('./text.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TextWidgetComponent extends WidgetComponent implements OnInit {\n\n    mask: string;\n    isMaskReversed: boolean;\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field.params && this.field.params['inputMask']) {\n            this.mask = this.field.params['inputMask'];\n            this.isMaskReversed = this.field.params['inputMaskReversed'] ? this.field.params['inputMaskReversed'] : false;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/text/text.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormService } from './../../../services/form.service';\nimport { FormFieldOption } from './../core/form-field-option';\nimport { baseHost, WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'typeahead-widget',\n    template: require('./typeahead.widget.html'),\n    styles: [require('./typeahead.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TypeaheadWidgetComponent extends WidgetComponent implements OnInit {\n\n    minTermLength: number = 1;\n    value: string;\n    oldValue: string;\n    options: FormFieldOption[] = [];\n\n    constructor(public formService: FormService,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field.form.taskId) {\n            this.getValuesByTaskId();\n        } else if (this.field.form.processDefinitionId) {\n            this.getValuesByProcessDefinitionId();\n        }\n        if (this.isReadOnlyType()) {\n            this.value = this.field.value;\n        }\n    }\n\n    getValuesByTaskId() {\n        this.formService\n            .getRestFieldValues(\n            this.field.form.taskId,\n            this.field.id\n            )\n            .subscribe(\n            (result: FormFieldOption[]) => {\n                let options = result || [];\n                this.field.options = options;\n\n                let fieldValue = this.field.value;\n                if (fieldValue) {\n                    let toSelect = options.find(item => item.id === fieldValue);\n                    if (toSelect) {\n                        this.value = toSelect.name;\n                    }\n                }\n                this.field.updateForm();\n                this.visibilityService.refreshEntityVisibility(this.field);\n            },\n            err => this.handleError(err)\n            );\n    }\n\n    getValuesByProcessDefinitionId() {\n        this.formService\n            .getRestFieldValuesByProcessId(\n            this.field.form.processDefinitionId,\n            this.field.id\n            )\n            .subscribe(\n            (result: FormFieldOption[]) => {\n                let options = result || [];\n                this.field.options = options;\n\n                let fieldValue = this.field.value;\n                if (fieldValue) {\n                    let toSelect = options.find(item => item.id === fieldValue);\n                    if (toSelect) {\n                        this.value = toSelect.name;\n                    }\n                }\n                this.field.updateForm();\n                this.visibilityService.refreshEntityVisibility(this.field);\n            },\n            err => this.handleError(err)\n            );\n    }\n\n    getOptions(): FormFieldOption[] {\n        let val = this.value.trim().toLocaleLowerCase();\n        return this.field.options.filter(item => {\n            let name = item.name.toLocaleLowerCase();\n            return name.indexOf(val) > -1;\n        });\n    }\n\n    isValidOptionName(optionName: string): boolean {\n        let option = this.field.options.find(item => item.name && item.name.toLocaleLowerCase() === optionName.toLocaleLowerCase());\n        return option ? true : false;\n    }\n\n    onKeyUp(event: KeyboardEvent) {\n        if (this.value && this.value.trim().length >= this.minTermLength && this.oldValue !== this.value) {\n            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {\n                if (this.value.length >= this.minTermLength) {\n                    this.options = this.getOptions();\n                    this.oldValue = this.value;\n                    if (this.isValidOptionName(this.value)) {\n                        this.field.value = this.options[0].id;\n                    }\n                }\n            }\n        }\n        if (this.isValueDefined() && this.value.trim().length === 0) {\n            this.oldValue = this.value;\n            this.options = [];\n        }\n    }\n\n    onItemSelect(item: FormFieldOption) {\n        if (item) {\n            this.field.value = item.id;\n            this.value = item.name;\n            this.checkVisibility();\n        }\n    }\n\n    validate() {\n        this.field.value = this.value;\n    }\n\n    isValueDefined() {\n        return this.value !== null && this.value !== undefined;\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    checkVisibility() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n    isReadOnlyType(): boolean {\n        return this.field.type === 'readonly' ? true : false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/typeahead/typeahead.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LogService, ThumbnailService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { FormService } from '../../../services/form.service';\nimport { ProcessContentService } from '../../../services/process-content.service';\nimport { ContentLinkModel } from '../core/content-link.model';\nimport { baseHost, WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'upload-widget',\n    template: require('./upload.widget.html'),\n    styles: [require('./upload.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadWidgetComponent extends WidgetComponent implements OnInit {\n\n    hasFile: boolean;\n    displayText: string;\n    multipleOption: string = '';\n    mimeTypeIcon: string;\n\n    @ViewChild('uploadFiles')\n    fileInput: ElementRef;\n\n    constructor(public formService: FormService,\n                private logService: LogService,\n                private thumbnailService: ThumbnailService,\n                public processContentService: ProcessContentService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0) {\n            this.hasFile = true;\n        }\n        this.getMultipleFileParam();\n    }\n\n    removeFile(file: any) {\n        if (this.field) {\n            this.removeElementFromList(file);\n        }\n    }\n\n    onFileChanged(event: any) {\n        let files = event.target.files;\n        let filesSaved = [];\n\n        if (this.field.json.value) {\n            filesSaved = [...this.field.json.value];\n        }\n\n        if (files && files.length > 0) {\n            Observable.from(files).flatMap(file => this.uploadRawContent(file)).subscribe((res) => {\n                    filesSaved.push(res);\n                },\n                (error) => {\n                    this.logService.error('Error uploading file. See console output for more details.');\n                },\n                () => {\n                    this.field.value = filesSaved;\n                    this.field.json.value = filesSaved;\n                });\n\n            this.hasFile = true;\n        }\n    }\n\n    private uploadRawContent(file): Observable<any> {\n        return this.processContentService.createTemporaryRawRelatedContent(file)\n            .map((response: any) => {\n                this.logService.info(response);\n                return response;\n            });\n    }\n\n    private getMultipleFileParam() {\n        if (this.field &&\n            this.field.params &&\n            this.field.params.multiple) {\n            this.multipleOption = this.field.params.multiple ? 'multiple' : '';\n        }\n    }\n\n    private removeElementFromList(file) {\n        let index = this.field.value.indexOf(file);\n\n        if (index !== -1) {\n            this.field.value.splice(index, 1);\n            this.field.json.value = this.field.value;\n            this.field.updateForm();\n        }\n\n        this.hasFile = this.field.value.length > 0;\n\n        this.resetFormValueWithNoFiles();\n    }\n\n    private resetFormValueWithNoFiles() {\n        if (this.field.value.length === 0) {\n            this.field.value = [];\n            this.field.json.value = [];\n        }\n    }\n\n    getIcon(mimeType) {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    fileClicked(file: ContentLinkModel): void {\n        this.processContentService.getFileRawContent(file.id).subscribe(\n            (blob: Blob) => {\n                file.contentBlob = blob;\n                this.formService.formContentClicked.next(file);\n            },\n            (error) => {\n                this.logService.error('Unable to send evento for file ' + file.name);\n            }\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/upload/upload.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { DynamicComponentMapper, DynamicComponentResolveFunction, DynamicComponentResolver } from 'ng2-alfresco-core';\n\nimport {\n    AmountWidgetComponent,\n    AttachWidgetComponent,\n    CheckboxWidgetComponent,\n    ContainerWidgetComponent,\n    DateWidgetComponent,\n    DisplayTextWidgetComponentComponent,\n    DocumentWidgetComponent,\n    DropdownWidgetComponent,\n    DynamicTableWidgetComponent,\n    FormFieldModel,\n    FunctionalGroupWidgetComponent,\n    HyperlinkWidgetComponent,\n    MultilineTextWidgetComponentComponent,\n    NumberWidgetComponent,\n    PeopleWidgetComponent,\n    RadioButtonsWidgetComponent,\n    TextWidgetComponent,\n    TypeaheadWidgetComponent,\n    UnknownWidgetComponent,\n    UploadWidgetComponent\n} from './../components/widgets/index';\n\n@Injectable()\nexport class FormRenderingService extends DynamicComponentMapper {\n\n    protected defaultValue: Type<{}> = UnknownWidgetComponent;\n    protected types: { [key: string]: DynamicComponentResolveFunction } = {\n        'text': DynamicComponentResolver.fromType(TextWidgetComponent),\n        'string': DynamicComponentResolver.fromType(TextWidgetComponent),\n        'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),\n        'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),\n        'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),\n        'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),\n        'date': DynamicComponentResolver.fromType(DateWidgetComponent),\n        'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),\n        'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),\n        'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),\n        'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),\n        'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),\n        'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),\n        'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),\n        'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),\n        'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),\n        'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),\n        'document': DynamicComponentResolver.fromType(DocumentWidgetComponent)\n    };\n\n    constructor() {\n        super();\n\n        this.types['upload'] = (field: FormFieldModel): Type<{}> => {\n            if (field) {\n                let params = field.params;\n                if (params && params.link) {\n                    return AttachWidgetComponent;\n                }\n                return UploadWidgetComponent;\n            }\n            return UnknownWidgetComponent;\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/form-rendering.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './form';\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/form.component';\nexport * from './components/form-list.component';\nexport * from './components/widgets/content/content.widget';\nexport * from './components/start-form.component';\nexport * from './services/form.service';\nexport * from './components/widgets/index';\nexport * from './services/ecm-model.service';\nexport * from './services/node.service';\nexport * from './services/form-rendering.service';\nexport * from './events/index';\nexport * from './components/widgets/dynamic-table/dynamic-table-row.model';\nexport { FORM_FIELD_VALIDATORS } from './components/widgets/core/form-field-validator';\nexport * from './form-module';\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormModel } from './../components/widgets/core/index';\nimport { FormEvent } from './form.event';\n\nexport class FormErrorEvent extends FormEvent {\n\n    readonly error: any;\n\n    constructor(form: FormModel, error: any) {\n        super(form);\n        this.error = error;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/form-error.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormFieldModel, FormModel } from './../components/widgets/core/index';\nimport { FormFieldEvent } from './form-field.event';\n\nexport class ValidateFormFieldEvent extends FormFieldEvent {\n\n    isValid = true;\n\n    constructor(form: FormModel, field: FormFieldModel) {\n        super(form, field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/validate-form-field.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormModel } from './../components/widgets/core/index';\nimport { FormEvent } from './form.event';\n\nexport class ValidateFormEvent extends FormEvent {\n\n    isValid = true;\n\n    constructor(form: FormModel) {\n        super(form);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/events/validate-form.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class FormDefinitionModel {\n    reusable: boolean = false;\n    newVersion: boolean = false;\n    formRepresentation: any;\n    formImageBase64: string = '';\n\n    constructor(id: string, name: any, lastUpdatedByFullName: string, lastUpdated: string, metadata: any) {\n\n        this.formRepresentation = {\n            id: id,\n            name: name,\n            description: '',\n            version: 1,\n            lastUpdatedBy: 1,\n            lastUpdatedByFullName: lastUpdatedByFullName,\n            lastUpdated: lastUpdated,\n            stencilSetId: 0,\n            referenceId: null,\n            formDefinition: {\n                fields: [{\n                    name: 'Label',\n                    type: 'container',\n                    fieldType: 'ContainerRepresentation',\n                    numberOfColumns: 2,\n                    required: false,\n                    readOnly: false,\n                    sizeX: 2,\n                    sizeY: 1,\n                    row: -1,\n                    col: -1,\n                    fields: {'1': this.metadataToFields(metadata)}\n                }],\n                gridsterForm: false,\n                javascriptEvents: [],\n                metadata: {},\n                outcomes: [],\n                className: '',\n                style: '',\n                tabs: [],\n                variables: []\n            }\n        };\n    }\n\n    private metadataToFields(metadata: any): any[] {\n        let fields = [];\n        if (metadata) {\n            metadata.forEach(function(property) {\n                if (property) {\n                    let field = {\n                        type: 'text',\n                        id: property.name,\n                        name: property.name,\n                        required: false,\n                        readOnly: false,\n                        sizeX: 1,\n                        sizeY: 1,\n                        row: -1,\n                        col: -1,\n                        colspan: 1,\n                        params: {\n                            existingColspan: 1,\n                            maxColspan: 2\n                        },\n                        layout: {\n                            colspan: 1,\n                            row: -1,\n                            column: -1\n                        }\n                    };\n                    fields.push(field);\n                }\n            });\n        }\n\n        return fields;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/models/form-definition.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormFieldEvent, ValidateFormEvent, ValidateFormFieldEvent } from './../../../events/index';\nimport { FormService } from './../../../services/form.service';\nimport { ContainerModel } from './container.model';\nimport { FormFieldTemplates } from './form-field-templates';\nimport { FormFieldTypes } from './form-field-types';\nimport { FormFieldModel } from './form-field.model';\nimport { FormOutcomeModel } from './form-outcome.model';\nimport { FormValues } from './form-values';\nimport { FormWidgetModel, FormWidgetModelCache } from './form-widget.model';\nimport { TabModel } from './tab.model';\n\nimport {\n    FORM_FIELD_VALIDATORS,\n    FormFieldValidator\n} from './form-field-validator';\n\nexport class FormModel {\n\n    static UNSET_TASK_NAME: string = 'Nameless task';\n    static SAVE_OUTCOME: string = '$save';\n    static COMPLETE_OUTCOME: string = '$complete';\n    static START_PROCESS_OUTCOME: string = '$startProcess';\n\n    readonly id: string;\n    readonly name: string;\n    readonly taskId: string;\n    readonly taskName: string = FormModel.UNSET_TASK_NAME;\n    processDefinitionId: string;\n    private _isValid: boolean = true;\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n\n    className: string;\n    readOnly: boolean = false;\n    tabs: TabModel[] = [];\n    /** Stores root containers */\n    fields: FormWidgetModel[] = [];\n    outcomes: FormOutcomeModel[] = [];\n    customFieldTemplates: FormFieldTemplates = {};\n    fieldValidators: FormFieldValidator[] = [...FORM_FIELD_VALIDATORS];\n    readonly selectedOutcome: string;\n\n    values: FormValues = {};\n    processVariables: any;\n\n    readonly json: any;\n\n    hasTabs(): boolean {\n        return this.tabs && this.tabs.length > 0;\n    }\n\n    hasFields(): boolean {\n        return this.fields && this.fields.length > 0;\n    }\n\n    hasOutcomes(): boolean {\n        return this.outcomes && this.outcomes.length > 0;\n    }\n\n    constructor(json?: any, data?: FormValues, readOnly: boolean = false, protected formService?: FormService) {\n        this.readOnly = readOnly;\n\n        if (json) {\n            this.json = json;\n\n            this.id = json.id;\n            this.name = json.name;\n            this.taskId = json.taskId;\n            this.taskName = json.taskName || json.name || FormModel.UNSET_TASK_NAME;\n            this.processDefinitionId = json.processDefinitionId;\n            this.customFieldTemplates = json.customFieldTemplates || {};\n            this.selectedOutcome = json.selectedOutcome || {};\n            this.className = json.className || '';\n\n            let tabCache: FormWidgetModelCache<TabModel> = {};\n\n            this.processVariables = json.processVariables;\n\n            this.tabs = (json.tabs || []).map(t => {\n                let model = new TabModel(this, t);\n                tabCache[model.id] = model;\n                return model;\n            });\n\n            this.fields = this.parseRootFields(json);\n\n            if (data) {\n                this.loadData(data);\n            }\n\n            for (let i = 0; i < this.fields.length; i++) {\n                let field = this.fields[i];\n                if (field.tab) {\n                    let tab = tabCache[field.tab];\n                    if (tab) {\n                        tab.fields.push(field);\n                    }\n                }\n            }\n\n            if (json.fields) {\n                let saveOutcome = new FormOutcomeModel(this, { id: FormModel.SAVE_OUTCOME, name: 'Save', isSystem: true });\n                let completeOutcome = new FormOutcomeModel(this, { id: FormModel.COMPLETE_OUTCOME, name: 'Complete', isSystem: true });\n                let startProcessOutcome = new FormOutcomeModel(this, { id: FormModel.START_PROCESS_OUTCOME, name: 'Start Process', isSystem: true });\n\n                let customOutcomes = (json.outcomes || []).map(obj => new FormOutcomeModel(this, obj));\n\n                this.outcomes = [saveOutcome].concat(\n                    customOutcomes.length > 0 ? customOutcomes : [completeOutcome, startProcessOutcome]\n                );\n            }\n        }\n\n        this.validateForm();\n    }\n\n    onFormFieldChanged(field: FormFieldModel) {\n        this.validateField(field);\n        if (this.formService) {\n            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));\n        }\n    }\n\n    getFieldById(fieldId: string): FormFieldModel {\n        return this.getFormFields().find(field => field.id === fieldId);\n    }\n\n    // TODO: consider evaluating and caching once the form is loaded\n    getFormFields(): FormFieldModel[] {\n        let result: FormFieldModel[] = [];\n\n        for (let i = 0; i < this.fields.length; i++) {\n            let field = this.fields[i];\n\n            if (field instanceof ContainerModel) {\n                let container = <ContainerModel> field;\n                result.push(container.field);\n\n                container.field.columns.forEach((column) => {\n                    result.push(...column.fields);\n                });\n            }\n        }\n\n        return result;\n    }\n\n    markAsInvalid() {\n        this._isValid = false;\n    }\n\n    /**\n     * Validates entire form and all form fields.\n     *\n     * @returns {void}\n     * @memberof FormModel\n     */\n    validateForm(): void {\n        const validateFormEvent = new ValidateFormEvent(this);\n\n        if (this.formService) {\n            this.formService.validateForm.next(validateFormEvent);\n        }\n\n        this._isValid = validateFormEvent.isValid;\n\n        if (validateFormEvent.defaultPrevented) {\n            return;\n        }\n\n        if (validateFormEvent.isValid) {\n            let fields = this.getFormFields();\n            for (let i = 0; i < fields.length; i++) {\n                if (!fields[i].validate()) {\n                    this._isValid = false;\n                    return;\n                }\n            }\n        }\n    }\n\n    /**\n     * Validates a specific form field, triggers form validation.\n     *\n     * @param {FormFieldModel} field Form field to validate.\n     * @returns {void}\n     * @memberof FormModel\n     */\n    validateField(field: FormFieldModel): void {\n        if (!field) {\n            return;\n        }\n\n        const validateFieldEvent = new ValidateFormFieldEvent(this, field);\n\n        if (this.formService) {\n            this.formService.validateFormField.next(validateFieldEvent);\n        }\n\n        if (!validateFieldEvent.isValid) {\n            this._isValid = false;\n            return;\n        }\n\n        if (validateFieldEvent.defaultPrevented) {\n            return;\n        }\n\n        if (!field.validate()) {\n            this._isValid = false;\n            return;\n        }\n        this.validateForm();\n    }\n\n    // Activiti supports 3 types of root fields: container|group|dynamic-table\n    private parseRootFields(json: any): FormWidgetModel[] {\n        let fields = [];\n\n        if (json.fields) {\n            fields = json.fields;\n        } else if (json.formDefinition && json.formDefinition.fields) {\n            fields = json.formDefinition.fields;\n        }\n\n        let result: FormWidgetModel[] = [];\n\n        for (let field of fields) {\n            if (field.type === FormFieldTypes.DISPLAY_VALUE) {\n                // workaround for dynamic table on a completed/readonly form\n                if (field.params) {\n                    let originalField = field.params['field'];\n                    if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {\n                        result.push(new ContainerModel(new FormFieldModel(this, field)));\n                    }\n                }\n            } else {\n                result.push(new ContainerModel(new FormFieldModel(this, field)));\n            }\n        }\n\n        return result;\n    }\n\n    // Loads external data and overrides field values\n    // Typically used when form definition and form data coming from different sources\n    private loadData(data: FormValues) {\n        for (let field of this.getFormFields()) {\n            if (data[field.id]) {\n                field.json.value = data[field.id];\n                field.value = field.parseValue(field.json);\n                if (field.type === FormFieldTypes.DROPDOWN ||\n                    field.type === FormFieldTypes.RADIO_BUTTONS) {\n                    field.value = data[field.id].id;\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormOutcomeModel } from './form-outcome.model';\n\nexport class FormOutcomeEvent {\n\n    private _outcome: FormOutcomeModel;\n    private _defaultPrevented: boolean = false;\n\n    get outcome(): FormOutcomeModel {\n        return this._outcome;\n    }\n\n    get defaultPrevented() {\n        return this._defaultPrevented;\n    }\n\n    constructor(outcome: FormOutcomeModel) {\n        this._outcome = outcome;\n    }\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/core/form-outcome-event.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class NodeMetadata {\n    metadata: any;\n    nodeType: string;\n\n    constructor(metadata: any, nodeType: string) {\n        this.metadata = metadata;\n        this.nodeType = nodeType;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/models/node-metadata.model.ts","module.exports = \"<div *ngIf=\\\"!hasForm()\\\">\\n    <ng-content select=\\\"[empty-form]\\\">\\n    </ng-content>\\n</div>\\n<div *ngIf=\\\"hasForm()\\\" class=\\\"{{form.className}}\\\">\\n    <mat-card>\\n        <mat-card-header>\\n            <mat-card-title>\\n                <h4 *ngIf=\\\"isTitleEnabled()\\\">\\n                    <div *ngIf=\\\"showRefreshButton\\\" class=\\\"adf-form-reload-button\\\">\\n                        <button mat-icon-button (click)=\\\"onRefreshClicked()\\\">\\n                            <mat-icon>refresh</mat-icon>\\n                        </button>\\n                    </div>\\n                    <mat-icon>{{ form.isValid ? 'event_available' : 'event_busy' }}</mat-icon>\\n                    <span>{{form.taskName}}</span>\\n\\n                </h4>\\n            </mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n            <div *ngIf=\\\"form.hasTabs()\\\">\\n                <tabs-widget [tabs]=\\\"form.tabs\\\" (formTabChanged)=\\\"checkVisibility($event);\\\"></tabs-widget>\\n            </div>\\n\\n            <div *ngIf=\\\"!form.hasTabs() && form.hasFields()\\\">\\n                <div *ngFor=\\\"let field of form.fields\\\">\\n                    <form-field [field]=\\\"field.field\\\"></form-field>\\n                </div>\\n            </div>\\n        </mat-card-content>\\n        <mat-card-actions *ngIf=\\\"form.hasOutcomes()\\\">\\n            <!--[class.mdl-button--colored]=\\\"!outcome.isSystem\\\"-->\\n            <button *ngFor=\\\"let outcome of form.outcomes\\\"\\n                    mat-button\\n                    [disabled]=\\\"!isOutcomeButtonEnabled(outcome)\\\"\\n                    [class.adf-form-hide-button]=\\\"!isOutcomeButtonVisible(outcome, form.readOnly)\\\"\\n                    (click)=\\\"onOutcomeClicked(outcome, $event)\\\">\\n                {{outcome.name | uppercase}}\\n            </button>\\n        </mat-card-actions>\\n    </mat-card>\\n</div>\\n<!--\\nFor debugging and data visualisation purposes,\\nwill be removed during future revisions\\n-->\\n<div *ngIf=\\\"showDebugButton\\\" class=\\\"adf-form-debug-container\\\">\\n    <mat-slide-toggle [(ngModel)]=\\\"debugMode\\\">Debug mode</mat-slide-toggle>\\n    <div *ngIf=\\\"debugMode && hasForm()\\\">\\n        <h4>Values</h4>\\n        <pre>{{form.values | json}}</pre>\\n\\n        <h4>Form</h4>\\n        <pre>{{form.json | json}}</pre>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/form.component.html\n// module id = 288\n// module chunks = 1","module.exports = \".adf-form-container {\\n  width: 100%;\\n  min-height: 100px;\\n  overflow: visible; }\\n\\n.adf-form-debug-container {\\n  padding: 10px; }\\n\\n.adf-form-debug-container .debug-toggle-text {\\n  padding-left: 15px;\\n  cursor: pointer; }\\n\\n.adf-form-debug-container .debug-toggle-text:hover {\\n  font-weight: bold; }\\n\\n.adf-form-reload-button {\\n  position: absolute;\\n  right: 0;\\n  top: 0; }\\n\\n.adf-form-hide-button {\\n  display: none; }\\n\\n.adf-task-title {\\n  text-align: center; }\\n\\nform-field {\\n  width: 100%; }\\n  form-field .mat-input-element {\\n    font-size: 14px;\\n    padding-top: 8px;\\n    line-height: normal; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/form.component.scss\n// module id = 289\n// module chunks = 1","module.exports = \"<adf-datatable *ngIf=\\\"!isEmpty()\\\"\\n    [rows]=\\\"forms\\\">\\n    <data-columns>\\n        <data-column key=\\\"name\\\" type=\\\"text\\\" title=\\\"Name\\\" class=\\\"ellipsis-cell\\\" [sortable]=\\\"true\\\"></data-column>\\n        <data-column key=\\\"lastUpdatedByFullName\\\" type=\\\"text\\\" title=\\\"User\\\" class=\\\"ellipsis-cell\\\" [sortable]=\\\"true\\\"></data-column>\\n        <data-column key=\\\"lastUpdated\\\" type=\\\"date\\\" format=\\\"shortDate\\\" title=\\\"Date\\\"></data-column>\\n    </data-columns>\\n</adf-datatable>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/form-list.component.html\n// module id = 290\n// module chunks = 1","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./form-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/form-list.component.scss\n// module id = 291\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/form-list.component.scss\n// module id = 292\n// module chunks = 1","module.exports = \"<mat-card class=\\\"adf-content-container\\\" *ngIf=\\\"content\\\">\\n    <mat-card-content *ngIf=\\\"showDocumentContent\\\">\\n        <div *ngIf=\\\"content.isThumbnailSupported()\\\" >\\n            <img id=\\\"thumbnailPreview\\\" class=\\\"adf-img-upload-widget\\\" [src]=\\\"content.thumbnailUrl\\\" alt=\\\"{{content.name}}\\\">\\n        </div>\\n        <div *ngIf=\\\"!content.isThumbnailSupported()\\\">\\n            <mat-icon>image</mat-icon>\\n            <div id=\\\"unsupported-thumbnail\\\" class=\\\"adf-content-widget-preview-text\\\">{{ 'FORM.PREVIEW.IMAGE_NOT_AVAILABLE' | translate }}\\n            </div>\\n        </div>\\n        <div class=\\\"mdl-card__supporting-text upload-widget__content-text\\\">{{content.name}}</div>\\n    </mat-card-content>\\n\\n    <mat-card-actions>\\n        <button mat-icon-button id=\\\"view\\\" (click)=\\\"openViewer(content)\\\">\\n            <mat-icon class=\\\"mat-24\\\">zoom_in</mat-icon>\\n        </button>\\n        <button mat-icon-button id=\\\"download\\\" (click)=\\\"download(content)\\\">\\n            <mat-icon class=\\\"mat-24\\\">file_download</mat-icon>\\n        </button>\\n    </mat-card-actions>\\n</mat-card>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/content/content.widget.html\n// module id = 293\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./content.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/content/content.widget.scss\n// module id = 294\n// module chunks = 1","module.exports = \".adf-img-upload-widget {\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid rgba(117, 117, 117, 0.57);\\n  box-shadow: 1px 1px 2px #dddddd;\\n  background-color: #ffffff; }\\n\\n.adf-content-widget-preview-text {\\n  word-wrap: break-word;\\n  word-break: break-all;\\n  text-align: center; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/content/content.widget.scss\n// module id = 295\n// module chunks = 1","module.exports = \"<div class=\\\"adf-start-form-container\\\" *ngIf=\\\"hasForm()\\\">\\n    <mat-card>\\n        <mat-card-header>\\n            <mat-card-title>\\n                <h2 *ngIf=\\\"isTitleEnabled()\\\" class=\\\"mdl-card__title-text\\\">{{form.taskName}}</h2>\\n            </mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n            <div *ngIf=\\\"form.hasTabs()\\\">\\n                <tabs-widget [tabs]=\\\"form.tabs\\\" (formTabChanged)=\\\"checkVisibility($event);\\\"></tabs-widget>\\n            </div>\\n\\n            <div *ngIf=\\\"!form.hasTabs() && form.hasFields()\\\">\\n                <div *ngFor=\\\"let field of form.fields\\\">\\n                    <form-field [field]=\\\"field.field\\\"></form-field>\\n                </div>\\n            </div>\\n        </mat-card-content>\\n        <mat-card-content class=\\\"adf-start-form-actions\\\" *ngIf=\\\"showOutcomeButtons && form.hasOutcomes()\\\" #outcomesContainer>\\n             <ng-content select=\\\"[form-custom-button]\\\"></ng-content>\\n            <button *ngFor=\\\"let outcome of form.outcomes\\\"\\n                    mat-button\\n                    [disabled]=\\\"!isOutcomeButtonEnabled(outcome)\\\"\\n                    [class.mdl-button--colored]=\\\"!outcome.isSystem\\\"\\n                    [class.adf-form-hide-button]=\\\"!isOutcomeButtonVisible(outcome, form.readOnly)\\\"\\n                    (click)=\\\"onOutcomeClicked(outcome, $event)\\\">\\n                {{outcome.name}}\\n            </button>\\n        </mat-card-content>\\n        <mat-card-actions *ngIf=\\\"showRefreshButton\\\">\\n            <button mat-button\\n                    (click)=\\\"onRefreshClicked()\\\">\\n                <mat-icon>refresh</mat-icon>\\n            </button>\\n        </mat-card-actions>\\n    </mat-card>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/start-form.component.html\n// module id = 296\n// module chunks = 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { ContainerColumnModel } from './../core/container-column.model';\nimport { ContainerModel } from './../core/container.model';\nimport { FormFieldTypes } from './../core/form-field-types';\nimport { FormFieldModel } from './../core/form-field.model';\n\nexport class ContainerWidgetComponentModel extends ContainerModel {\n\n    columns: ContainerColumnModel[] = [];\n    isExpanded: boolean = true;\n    rowspan: number = 1;\n    colspan: number = 1;\n\n    isGroup(): boolean {\n        return this.type === FormFieldTypes.GROUP;\n    }\n\n    isCollapsible(): boolean {\n        let allowCollapse = false;\n\n        if (this.isGroup() && this.field.params['allowCollapse']) {\n            allowCollapse = <boolean> this.field.params['allowCollapse'];\n        }\n\n        return allowCollapse;\n    }\n\n    isCollapsedByDefault(): boolean {\n        let collapseByDefault = false;\n\n        if (this.isCollapsible() && this.field.params['collapseByDefault']) {\n            collapseByDefault = <boolean> this.field.params['collapseByDefault'];\n        }\n\n        return collapseByDefault;\n    }\n\n    constructor(field: FormFieldModel) {\n        super(field);\n\n        if (this.field) {\n            this.columns = this.field.columns || [];\n            this.isExpanded = !this.isCollapsedByDefault();\n            this.colspan = field.colspan;\n            this.rowspan = field.rowspan;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/container/container.widget.model.ts","module.exports = \"<div [ngClass]=\\\"{'hidden':!(content?.isGroup() && content?.isVisible)}\\\" class=\\\"container-widget__header\\\">\\n    <h4 class=\\\"container-widget__header-text\\\" id=\\\"container-header\\\"\\n        [class.collapsible]=\\\"content?.isCollapsible()\\\">\\n        <button *ngIf=\\\"content?.isCollapsible()\\\"\\n                mat-icon-button\\n                class=\\\"mdl-button--icon\\\"\\n                (click)=\\\"onExpanderClicked()\\\">\\n            <mat-icon>{{ content?.isExpanded ? 'expand_less' : 'expand_more' }}</mat-icon>\\n        </button>\\n        <span (click)=\\\"onExpanderClicked()\\\" id=\\\"container-header-label\\\">{{content.name}}</span>\\n    </h4>\\n</div>\\n\\n<section class=\\\"grid-list\\\" [ngClass]=\\\"{'hidden':!(content?.isVisible && content?.isExpanded)}\\\">\\n    <div class=\\\"grid-list-item\\\" *ngFor=\\\"let field of fields\\\" [style.width]=\\\"getColumnWith(field)\\\">\\n        <form-field *ngIf=\\\"field\\\" [field]=\\\"field\\\"></form-field>\\n    </div>\\n</section>\\n\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/container/container.widget.html\n// module id = 298\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./container.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/container/container.widget.scss\n// module id = 299\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/container/container.widget.scss\n// module id = 300\n// module chunks = 1","module.exports = \"<div *ngIf=\\\"hasTabs()\\\" class=\\\"alfresco-tabs-widget\\\">\\n    <mat-tab-group>\\n        <mat-tab *ngFor=\\\"let tab of visibleTabs\\\" [label]=\\\"tab.title\\\">\\n            <div *ngFor=\\\"let field of tab.fields\\\">\\n                <form-field [field]=\\\"field.field\\\"></form-field>\\n             </div>\\n        </mat-tab>\\n    </mat-tab-group>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/tabs/tabs.widget.html\n// module id = 301\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./unknown.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/unknown/unknown.widget.scss\n// module id = 302\n// module chunks = 1","module.exports = \".adf-unknown-text {\\n  margin-left: 10px;\\n  color: red; }\\n\\n.adf-unknown-widget {\\n  margin: 42px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/unknown/unknown.widget.scss\n// module id = 303\n// module chunks = 1","module.exports = \"<div class=\\\"adf-amount-widget__container adf-amount-widget {{field.className}}\\\" [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <mat-form-field floatPlaceholder=\\\"never\\\" class=\\\"adf-amount-widget__input\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <span matPrefix class=\\\"adf-amount-widget__prefix-spacing\\\"> {{currency }}</span>\\n        <input matInput\\n                class=\\\"adf-amount-widget\\\"\\n                type=\\\"text\\\"\\n                [id]=\\\"field.id\\\"\\n                [required]=\\\"isRequired()\\\"\\n                [value]=\\\"field.value\\\"\\n                [(ngModel)]=\\\"field.value\\\"\\n                (ngModelChange)=\\\"checkVisibility(field)\\\"\\n                [disabled]=\\\"field.readOnly\\\"\\n                placeholder=\\\"{{field.placeholder}}\\\">\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/amount/amount.widget.html\n// module id = 304\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./amount.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/amount/amount.widget.scss\n// module id = 305\n// module chunks = 1","module.exports = \".adf-amount-widget {\\n  width: 100%;\\n  vertical-align: baseline !important; }\\n  .adf-amount-widget .mat-input-element {\\n    margin-left: 11px; }\\n  .adf-amount-widget .mat-input-prefix {\\n    position: absolute;\\n    margin-top: 42px; }\\n  .adf-amount-widget .mat-input-placeholder {\\n    margin-top: 5px; }\\n\\n.adf-amount-widget__container {\\n  max-width: 100%; }\\n  .adf-amount-widget__container .mat-input-placeholder-wrapper {\\n    top: -6px !important; }\\n  .adf-amount-widget__container .mat-input-placeholder-wrapper {\\n    top: 0 !important;\\n    left: 13px; }\\n\\n.adf-amount-widget__input .mat-focused {\\n  transition: none; }\\n\\n.adf-amount-widget__prefix-spacing {\\n  padding-right: 5px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/amount/amount.widget.scss\n// module id = 306\n// module chunks = 1","module.exports = \"<div class=\\\"attach-widget {{field.className}}\\\">\\n    <label [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <div>\\n        <span *ngIf=\\\"hasFile()\\\" class=\\\"attach-widget__file mdl-chip\\\"><span class=\\\"mdl-chip__text\\\">{{getLinkedFileName()}}</span></span>\\n        <button #browseFile [disabled]=\\\"field.readOnly\\\" (click)=\\\"showDialog();\\\" class=\\\"mdl-button mdl-jsm-button mdl-js-ripple-effect attach-widget__browser\\\">\\n            <mat-icon>image</mat-icon>\\n            Browse {{selectedFolderSiteName}}\\n        </button>\\n        <button *ngIf=\\\"hasFile\\\" [disabled]=\\\"field.readOnly\\\" (click)=\\\"reset(file);\\\" class=\\\"mdl-button mdl-js-button mdl-js-ripple-effect attach-widget__reset\\\">Clear</button>\\n    </div>\\n</div>\\n\\n<dialog class=\\\"mdl-dialog\\\" #dialog>\\n    <h4 class=\\\"mdl-dialog__title\\\">Select content</h4>\\n    <div class=\\\"mdl-dialog__content\\\">\\n        <ul class='mdl-list'>\\n            <li class=\\\"mdl-list__item\\\" *ngFor=\\\"let node of selectedFolderNodes\\\">\\n            <span class=\\\"mdl-list__item-primary-content\\\" *ngIf=\\\"node.folder\\\">\\n            <mat-icon class=\\\"mdl-list__item-icon\\\">folder</mat-icon>\\n            <a (click)=\\\"selectFolder(node, $event)\\\">{{node.title}}</a>\\n            </span>\\n            <span class=\\\"mdl-list__item-primary-content\\\" *ngIf=\\\"!node.folder\\\">\\n            <mat-icon class=\\\"mdl-list__item-icon\\\">description</mat-icon>\\n            <a (click)=\\\"selectFile(node, $event)\\\">{{node.title}}</a>\\n            </span>\\n            </li>\\n        </ul>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" (click)=\\\"cancel()\\\" class=\\\"mdl-button close\\\">Cancel</button>\\n    </div>\\n</dialog>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/attach/attach.widget.html\n// module id = 307\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./attach.widget.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/attach/attach.widget.css\n// module id = 308\n// module chunks = 1","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".attach-widget {\\n    width:100%\\n}\\n\\n.attach-widget__icon {\\n    float: left;\\n}\\n\\n.attach-widget__file {\\n    margin-top: 4px;\\n}\\n\\n.attach-widget__reset {\\n    margin-top: 4px;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./process-services/form/components/widgets/attach/attach.widget.css\n// module id = 309\n// module chunks = 1","module.exports = \"<div [ngClass]=\\\"field.className\\\">\\n    <mat-checkbox\\n        [id]=\\\"field.id\\\"\\n        color=\\\"primary\\\"\\n        [required]=\\\"field.required\\\"\\n        [disabled]=\\\"field.readOnly || readOnly\\\"\\n        [(ngModel)]=\\\"field.value\\\"\\n        (change)=\\\"onChange()\\\">\\n        {{field.name}}\\n        <span *ngIf=\\\"field.required\\\">*</span>\\n    </mat-checkbox>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/checkbox/checkbox.widget.html\n// module id = 310\n// module chunks = 1","module.exports = \"<div class=\\\"{{field.className}}\\\" *ngIf=\\\"field?.isVisible\\\" id=\\\"data-widget\\\" [class.adf-invalid]=\\\"!field.isValid || field.validationSummary.message\\\">\\n    <mat-form-field class=\\\"adf-date-widget\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}} ({{field.dateDisplayFormat}})<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input matInput\\n               [id]=\\\"field.id\\\"\\n               [matDatepicker]=\\\"datePicker\\\"\\n               [(value)]=\\\"displayDate\\\"\\n               [required]=\\\"isRequired()\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               [min]=\\\"minDate\\\"\\n               [max]=\\\"maxDate\\\"\\n               (focusout)=\\\"onDateChanged($event.srcElement.value)\\\"\\n               (dateChange)=\\\"onDateChanged($event)\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n        <mat-datepicker-toggle  matSuffix [for]=\\\"datePicker\\\" [disabled]=\\\"field.readOnly\\\" ></mat-datepicker-toggle>\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n    <mat-datepicker #datePicker [touchUi]=\\\"true\\\" [startAt]=\\\"startAt\\\" ></mat-datepicker>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/date/date.widget.html\n// module id = 311\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./date.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/date/date.widget.scss\n// module id = 312\n// module chunks = 1","module.exports = \".adf-date-widget .mat-input-suffix {\\n  text-align: right;\\n  position: absolute;\\n  margin-top: 30px;\\n  width: 100%; }\\n\\n.adf-date-widget-date-widget-button {\\n  position: relative;\\n  float: right; }\\n\\n.adf-date-widget-date-input {\\n  padding-top: 5px;\\n  padding-bottom: 5px; }\\n\\n.adf-date-widget-grid-date-widget {\\n  align-items: center;\\n  padding: 0; }\\n\\n.adf-date-widget-date-widget-button__cell {\\n  margin-top: 0;\\n  margin-bottom: 0; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/date/date.widget.scss\n// module id = 313\n// module chunks = 1","module.exports = \"<div class=\\\"adf-display-text-widget {{field.className}}\\\">{{field.value}}</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/display-text/display-text.widget.html\n// module id = 314\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./display-text.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/display-text/display-text.widget.scss\n// module id = 315\n// module chunks = 1","module.exports = \".adf-display-text-widget {\\n  white-space: pre-wrap; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/display-text/display-text.widget.scss\n// module id = 316\n// module chunks = 1","module.exports = \"<div class=\\\"adf-form-document-widget {{field.className}}\\\">\\n    <ng-container *ngIf=\\\"hasFile\\\">\\n        <adf-content [id]=\\\"fileId\\\" [showDocumentContent]=\\\"true\\\"></adf-content>\\n    </ng-container>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/document/document.widget.html\n// module id = 317\n// module chunks = 1","module.exports = \"<div class=\\\"adf-dropdown-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\" *ngIf=\\\"field?.isVisible\\\">\\n    <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <mat-form-field>\\n        <mat-select class=\\\"adf-select\\\"\\n                    [id]=\\\"field.id\\\"\\n                    [(ngModel)]=\\\"field.value\\\"\\n                    [disabled]=\\\"field.readOnly\\\"\\n                    (ngModelChange)=\\\"checkVisibility(field)\\\">\\n            <mat-option *ngFor=\\\"let opt of field.options\\\"\\n                        [value]=\\\"getOptionValue(opt, field.value)\\\"\\n                        [id]=\\\"opt.id\\\">{{opt.name}}\\n            </mat-option>\\n            <mat-option id=\\\"readonlyOption\\\" *ngIf=\\\"isReadOnlyType()\\\" [value]=\\\"field.value\\\">{{field.value}}</mat-option>\\n        </mat-select>\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget class=\\\"adf-dropdown-required-message\\\" *ngIf=\\\"isInvalidFieldRequired()\\\"\\n                  required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dropdown/dropdown.widget.html\n// module id = 318\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./dropdown.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dropdown/dropdown.widget.scss\n// module id = 319\n// module chunks = 1","module.exports = \".adf-dropdown-widget {\\n  width: 100%;\\n  margin-top: 13px; }\\n  .adf-dropdown-widget .adf-select {\\n    padding-top: 0 !important;\\n    width: 100%; }\\n  .adf-dropdown-widget .mat-select-value-text {\\n    font-size: 14px; }\\n  .adf-dropdown-widget-select {\\n    width: 100%; }\\n  .adf-dropdown-widget-dropdown-required-message .adf-error-text-container {\\n    margin-top: 1px !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/dropdown/dropdown.widget.scss\n// module id = 320\n// module chunks = 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport * as moment from 'moment';\nimport { CellValidator } from './cell-validator.model';\nimport { DynamicRowValidationSummary } from './dynamic-row-validation-summary.model';\nimport { DynamicTableColumn } from './dynamic-table-column.model';\nimport { DynamicTableRow } from './dynamic-table-row.model';\n\nexport class DateCellValidator implements CellValidator {\n\n    private supportedTypes: string[] = [\n        'Date'\n    ];\n\n    isSupported(column: DynamicTableColumn): boolean {\n        return column && column.editable && this.supportedTypes.indexOf(column.type) > -1;\n    }\n\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean {\n\n        if (this.isSupported(column)) {\n            let value = row.value[column.id];\n            let dateValue = moment(value, 'D-M-YYYY');\n            if (!dateValue.isValid()) {\n                if (summary) {\n                    summary.isValid = false;\n                    summary.text = `Invalid '${column.name}' format.`;\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/date-cell-validator-model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { CellValidator } from './cell-validator.model';\nimport { DynamicRowValidationSummary } from './dynamic-row-validation-summary.model';\nimport { DynamicTableColumn } from './dynamic-table-column.model';\nimport { DynamicTableRow } from './dynamic-table-row.model';\n\nexport class NumberCellValidator implements CellValidator {\n\n    private supportedTypes: string[] = [\n        'Number',\n        'Amount'\n    ];\n\n    isSupported(column: DynamicTableColumn): boolean {\n        return column && column.required && this.supportedTypes.indexOf(column.type) > -1;\n    }\n\n    isNumber(value: any): boolean {\n        if (value === null || value === undefined || value === '') {\n            return false;\n        }\n\n        return !isNaN(+value);\n    }\n\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean {\n\n        if (this.isSupported(column)) {\n            let value = row.value[column.id];\n            if (value === null ||\n                value === undefined ||\n                value === '' ||\n                this.isNumber(value)) {\n                return true;\n            }\n\n            if (summary) {\n                summary.isValid = false;\n                summary.text = `Field '${column.name}' must be a number.`;\n            }\n            return false;\n        }\n        return true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/number-cell-validator.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { CellValidator } from './cell-validator.model';\nimport { DynamicRowValidationSummary } from './dynamic-row-validation-summary.model';\nimport { DynamicTableColumn } from './dynamic-table-column.model';\nimport { DynamicTableRow } from './dynamic-table-row.model';\n\nexport class RequiredCellValidator implements CellValidator {\n\n    private supportedTypes: string[] = [\n        'String',\n        'Number',\n        'Amount',\n        'Date',\n        'Dropdown'\n    ];\n\n    isSupported(column: DynamicTableColumn): boolean {\n        return column && column.required && this.supportedTypes.indexOf(column.type) > -1;\n    }\n\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean {\n        if (this.isSupported(column)) {\n            let value = row.value[column.id];\n            if (column.required) {\n                if (value === null || value === undefined || value === '') {\n                    if (summary) {\n                        summary.isValid = false;\n                        summary.text = `Field '${column.name}' is required.`;\n                    }\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/widgets/dynamic-table/required-cell-validator.model.ts","module.exports = \"<div class=\\\"{{field.className}}\\\"\\n    [class.adf-invalid]=\\\"!isValid()\\\" *ngIf=\\\"field?.isVisible\\\">\\n    <div class=\\\"adf-label\\\">{{content.name}}<span *ngIf=\\\"isRequired()\\\">*</span></div>\\n\\n    <div *ngIf=\\\"!editMode\\\">\\n        <div class=\\\"adf-table-container\\\">\\n            <table class=\\\"full-width adf-dynamic-table\\\" id=\\\"dynamic-table-{{content.id}}\\\">\\n                <thead>\\n                    <tr>\\n                        <th *ngFor=\\\"let column of content.visibleColumns\\\">\\n                            {{column.name}}\\n                        </th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngFor=\\\"let row of content.rows; let idx = index\\\" tabindex=\\\"0\\\" id=\\\"{{content.id}}-row-{{idx}}\\\"\\n                        [class.adf-dynamic-table-widget__row-selected]=\\\"row.selected\\\" (keyup)=\\\"onKeyPressed($event, row)\\\">\\n                        <td *ngFor=\\\"let column of content.visibleColumns\\\"\\n                            (click)=\\\"onRowClicked(row)\\\">\\n                            {{ getCellValue(row, column) }}\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n\\n        <div *ngIf=\\\"!readOnly\\\">\\n            <button mat-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"moveSelectionUp()\\\">\\n                <mat-icon>arrow_upward</mat-icon>\\n            </button>\\n            <button mat-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"moveSelectionDown()\\\">\\n                <mat-icon>arrow_downward</mat-icon>\\n            </button>\\n            <button mat-button\\n                    [disabled]=\\\"field.readOnly\\\"\\n                    id=\\\"{{content.id}}-add-row\\\"\\n                    (click)=\\\"addNewRow()\\\">\\n                <mat-icon>add_circle_outline</mat-icon>\\n            </button>\\n            <button mat-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"deleteSelection()\\\">\\n                <mat-icon>remove_circle_outline</mat-icon>\\n            </button>\\n            <button mat-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"editSelection()\\\">\\n                <mat-icon>edit</mat-icon>\\n            </button>\\n        </div>\\n     </div>\\n\\n     <row-editor *ngIf=\\\"editMode\\\"\\n        [table]=\\\"content\\\"\\n        [row]=\\\"editRow\\\"\\n        [column]=\\\"column\\\"\\n        (save)=\\\"onSaveChanges()\\\"\\n        (cancel)=\\\"onCancelChanges()\\\">\\n     </row-editor>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.html\n// module id = 324\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./dynamic-table.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.scss\n// module id = 325\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/dynamic-table/dynamic-table.widget.scss\n// module id = 326\n// module chunks = 1","module.exports = \" <label [attr.for]=\\\"column.id\\\">\\n    <mat-checkbox\\n        color=\\\"primary\\\"\\n        [id]=\\\"column.id\\\"\\n        [checked]=\\\"table.getCellValue(row, column)\\\"\\n        [required]=\\\"column.required\\\"\\n        [disabled]=\\\"!column.editable\\\"\\n        (change)=\\\"onValueChanged(row, column, $event)\\\">\\n    <span class=\\\"adf-checkbox-label\\\">{{column.name}}</span>\\n    </mat-checkbox>\\n</label>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.html\n// module id = 327\n// module chunks = 1","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./boolean.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss\n// module id = 328\n// module chunks = 1","module.exports = \".adf-checkbox-label {\\n  position: relative;\\n  cursor: pointer;\\n  font-size: 16px;\\n  line-height: 24px;\\n  margin: 0; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss\n// module id = 329\n// module chunks = 1","module.exports = \"<div>\\n    <mat-form-field class=\\\"adf-date-editor\\\">\\n        <label [attr.for]=\\\"column.id\\\">{{column.name}} (d-M-yyyy)</label>\\n        <input matInput\\n            id=\\\"dateInput\\\"\\n            type=\\\"text\\\"\\n            [matDatepicker]=\\\"datePicker\\\"\\n            [value]=\\\"value\\\"\\n            [id]=\\\"column.id\\\"\\n            [required]=\\\"column.required\\\"\\n            [disabled]=\\\"!column.editable\\\"\\n           (focusout)=\\\"onDateChanged($event.srcElement.value)\\\">\\n        <mat-datepicker-toggle  *ngIf=\\\"column.editable\\\" matSuffix [for]=\\\"datePicker\\\" class=\\\"adf-date-editor-button\\\" ></mat-datepicker-toggle>\\n    </mat-form-field>\\n    <mat-datepicker #datePicker (dateChange)=\\\"onDateChanged($event)\\\" [touchUi]=\\\"true\\\"></mat-datepicker>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.html\n// module id = 330\n// module chunks = 1","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./date.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.scss\n// module id = 331\n// module chunks = 1","module.exports = \".adf-date-editor {\\n  width: 100%; }\\n\\n.adf-date-editor-button {\\n  position: relative;\\n  top: 25px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/dynamic-table/editors/date/date.editor.scss\n// module id = 332\n// module chunks = 1","module.exports = \"<div class=\\\"dropdown-editor\\\">\\n    <label [attr.for]=\\\"column.id\\\">{{column.name}}</label>\\n    <mat-form-field>\\n        <mat-select\\n            floatPlaceholder=\\\"never\\\"\\n            class=\\\"adf-dropdown-editor-select\\\"\\n            [id]=\\\"column.id\\\"\\n            [(ngModel)]=\\\"value\\\"\\n            [required]=\\\"column.required\\\"\\n            [disabled]=\\\"!column.editable\\\"\\n            (change)=\\\"onValueChanged(row, column, $event)\\\">\\n            <mat-option></mat-option>\\n            <mat-option *ngFor=\\\"let opt of options\\\" [value]=\\\"opt.name\\\" [id]=\\\"opt.id\\\">{{opt.name}}</mat-option>\\n        </mat-select>\\n    </mat-form-field>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.html\n// module id = 333\n// module chunks = 1","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./dropdown.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss\n// module id = 334\n// module chunks = 1","module.exports = \".adf-dropdown-editor-select {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss\n// module id = 335\n// module chunks = 1","module.exports = \"<div class=\\\"row-editor mdl-shadow--2dp\\\"\\n    [class.row-editor__invalid]=\\\"!validationSummary.isValid\\\">\\n    <div class=\\\"mdl-grid\\\" *ngFor=\\\"let column of table.columns\\\">\\n        <div class=\\\"mdl-cell mdl-cell--6-col\\\" [ngSwitch]=\\\"column.type\\\">\\n            <div *ngSwitchCase=\\\"'Dropdown'\\\">\\n                <adf-dropdown-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-dropdown-editor>\\n                </div>\\n                <div *ngSwitchCase=\\\"'Date'\\\">\\n                    <adf-date-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-date-editor>\\n                </div>\\n\\n                <div *ngSwitchCase=\\\"'Boolean'\\\">\\n                <adf-boolean-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-boolean-editor>\\n                </div>\\n                <div *ngSwitchDefault>\\n                <adf-text-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-text-editor>\\n            </div>\\n        </div>\\n    </div>\\n    <error-widget [error]=\\\"validationSummary.text\\\"></error-widget>\\n    <div>\\n        <button mat-button (click)=\\\"onCancelChanges()\\\">Cancel</button>\\n        <button mat-button (click)=\\\"onSaveChanges()\\\">Save</button>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/row.editor.html\n// module id = 336\n// module chunks = 1","\n        var result = require(\"!!../../../../../../node_modules/css-loader/index.js!./row.editor.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/row.editor.css\n// module id = 337\n// module chunks = 1","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".row-editor {\\n    padding: 8px;\\n}\\n\\n.row-editor__validation-summary {\\n    visibility: hidden;\\n}\\n\\n.row-editor__invalid .row-editor__validation-summary {\\n    padding-left: 16px;\\n    padding-right: 16px;\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n    color: #d50000;\\n    visibility: visible;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./process-services/form/components/widgets/dynamic-table/editors/row.editor.css\n// module id = 338\n// module chunks = 1","module.exports = \"<div class=\\\"adf-text-editor\\\">\\n    <mat-form-field>\\n    <label [attr.for]=\\\"column.id\\\">{{displayName}}</label>\\n    <input matInput\\n        type=\\\"text\\\"\\n        [value]=\\\"table.getCellValue(row, column)\\\"\\n        (keyup)=\\\"onValueChanged(row, column, $event)\\\"\\n        [required]=\\\"column.required\\\"\\n        [disabled]=\\\"!column.editable\\\"\\n        [id]=\\\"column.id\\\">\\n    </mat-form-field>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.html\n// module id = 339\n// module chunks = 1","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./text.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.scss\n// module id = 340\n// module chunks = 1","module.exports = \".adf-text-editor {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/dynamic-table/editors/text/text.editor.scss\n// module id = 341\n// module chunks = 1","module.exports = __WEBPACK_EXTERNAL_MODULE_342__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/animations\"\n// module id = 342\n// module chunks = 1","module.exports = \"<div class=\\\"adf-error-text-container\\\">\\n    <div *ngIf=\\\"error.isActive()\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n        <div class=\\\"adf-error-text\\\">{{error.message | translate:translateParameters}}</div>\\n        <mat-icon class=\\\"adf-error-icon\\\">warning</mat-icon>\\n    </div>\\n    <div *ngIf=\\\"required\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n            <div class=\\\"adf-error-text\\\">{{required}}</div>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/error/error.component.html\n// module id = 343\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./error.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/error/error.component.scss\n// module id = 344\n// module chunks = 1","module.exports = \".adf-error-text {\\n  width: 85%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/error/error.component.scss\n// module id = 345\n// module chunks = 1","module.exports = \"<div class=\\\"adf-group-widget {{field.className}}\\\"\\n     [class.is-dirty]=\\\"value\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\" id=\\\"functional-group-div\\\" *ngIf=\\\"field.isVisible\\\">\\n    <mat-form-field>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input matInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               [id]=\\\"field.id\\\"\\n               [(ngModel)]=\\\"value\\\"\\n               (keyup)=\\\"onKeyUp($event)\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\"\\n               [matAutocomplete]=\\\"auto\\\">\\n        <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"onItemSelect($event.option.value)\\\">\\n            <mat-option *ngFor=\\\"let item of groups\\\"\\n                       [id]=\\\"field.id +'-'+item.id\\\"\\n                       (click)=\\\"onItemClick(item, $event)\\\"  [value]=\\\"item\\\">\\n                <span>{{item.name}}</span>\\n            </mat-option>\\n        </mat-autocomplete>\\n\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/functional-group/functional-group.widget.html\n// module id = 346\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./functional-group.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/functional-group/functional-group.widget.scss\n// module id = 347\n// module chunks = 1","module.exports = \".adf-group-widget {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/functional-group/functional-group.widget.scss\n// module id = 348\n// module chunks = 1","module.exports = \"<div class=\\\"adf-hyperlink-widget {{field.className}}\\\">\\n    <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <div>\\n        <a [href]=\\\"linkUrl\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">{{linkText}}</a>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/hyperlink/hyperlink.widget.html\n// module id = 349\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./hyperlink.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/hyperlink/hyperlink.widget.scss\n// module id = 350\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/hyperlink/hyperlink.widget.scss\n// module id = 351\n// module chunks = 1","module.exports = \"<div class=\\\"adf-multiline-text-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <mat-form-field floatPlaceholder=\\\"never\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <textarea matInput class=\\\"adf-input\\\"\\n                  matTextareaAutosize\\n                  type=\\\"text\\\"\\n                  rows=\\\"3\\\"\\n                  [id]=\\\"field.id\\\"\\n                  [required]=\\\"isRequired()\\\"\\n                  [(ngModel)]=\\\"field.value\\\"\\n                  (ngModelChange)=\\\"checkVisibility(field)\\\"\\n                  [disabled]=\\\"field.readOnly || readOnly\\\"\\n                  placeholder=\\\"{{field.placeholder}}\\\">\\n        </textarea>\\n    </mat-form-field>\\n    <div *ngIf=\\\"field.maxLength > 0\\\" class=\\\"adf-multiline-word-counter\\\">\\n        <span>{{field?.value?.length || 0}}/{{field.maxLength}}</span>\\n    </div>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget class=\\\"adf-multiline-required-message\\\" *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/multiline-text/multiline-text.widget.html\n// module id = 352\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./multiline-text.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/multiline-text/multiline-text.widget.scss\n// module id = 353\n// module chunks = 1","module.exports = \"/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between mat-menu and mat-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between mat-menu and mat-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-multiline-text-widget {\\n  width: 100%; }\\n\\n.adf-multiline-word-counter {\\n  float: right;\\n  margin-top: -20px !important;\\n  min-height: 24px;\\n  min-width: 1px;\\n  font-size: 12px;\\n  line-height: 14px;\\n  overflow: hidden;\\n  transition: all 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\\n  opacity: 1;\\n  padding-top: 5px;\\n  text-align: right;\\n  padding-right: 2px;\\n  padding-left: 0; }\\n\\n.adf-multiline-required-message {\\n  display: flex; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/multiline-text/multiline-text.widget.scss\n// module id = 354\n// module chunks = 1","module.exports = \"<div class=\\\"adf-textfield adf-number-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <mat-form-field>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input matInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               pattern=\\\"-?[0-9]*(\\\\.[0-9]+)?\\\"\\n               [id]=\\\"field.id\\\"\\n               [required]=\\\"isRequired()\\\"\\n               [value]=\\\"field.value\\\"\\n               [(ngModel)]=\\\"field.value\\\"\\n               (ngModelChange)=\\\"checkVisibility(field)\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/number/number.widget.html\n// module id = 355\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./number.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/number/number.widget.scss\n// module id = 356\n// module chunks = 1","module.exports = \".adf-number-widget {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/number/number.widget.scss\n// module id = 357\n// module chunks = 1","module.exports = \"<div class=\\\"adf-people-widget {{field.className}}\\\"\\n     [class.is-dirty]=\\\"value\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\"\\n     [class.adf-readonly]=\\\"field.readOnly\\\"\\n     id=\\\"people-widget-content\\\"\\n     *ngIf=\\\"field.isVisible\\\">\\n    <mat-form-field>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input #inputValue\\n               matInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               [id]=\\\"field.id\\\"\\n               [value]=\\\"getDisplayName(field.value)\\\"\\n               (keyup)=\\\"onKeyUp($event)\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\"\\n               [matAutocomplete]=\\\"auto\\\">\\n        <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"onItemSelect($event.option.value)\\\"  [displayWith]=\\\"getDisplayName\\\">\\n            <mat-option *ngFor=\\\"let user of users; let i = index\\\" [value]=\\\"user\\\">\\n                <div class=\\\"adf-people-widget-row\\\" id=\\\"adf-people-widget-user-{{i}}\\\">\\n                    <div [outerHTML]=\\\"user | usernameInitials:'adf-people-widget-pic'\\\"></div>\\n                    <div *ngIf=\\\"user.pictureId\\\" class=\\\"adf-people-widget-image-row\\\">\\n                        <img id=\\\"adf-people-widget-pic-{{i}}\\\" class=\\\"adf-people-widget-image\\\"\\n                             [src]=\\\"peopleProcessService.getUserImage(user)\\\"/>\\n                    </div>\\n                    <span class=\\\"adf-people-label-name\\\">{{getDisplayName(user)}}</span>\\n                </div>\\n            </mat-option>\\n        </mat-autocomplete>\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/people/people.widget.html\n// module id = 358\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./people.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/people/people.widget.scss\n// module id = 359\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/people/people.widget.scss\n// module id = 360\n// module chunks = 1","module.exports = \"<div class=\\\"adf-radio-buttons-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\" [id]=\\\"field.id\\\" *ngIf=\\\"field?.isVisible\\\">\\n    <div class=\\\"adf-radio-button-container\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <mat-radio-group class=\\\"adf-radio-group\\\" [(ngModel)]=\\\"field.value\\\">\\n            <mat-radio-button\\n                [id]=\\\"field.id + '-' + opt.id\\\"\\n                [name]=\\\"field.id\\\"\\n                [value]=\\\"opt.id\\\"\\n                [disabled]=\\\"field.readOnly\\\"\\n                [checked]=\\\"field.value === opt.id\\\"\\n                (change)=\\\"onOptionClick(opt.id)\\\"\\n                color=\\\"primary\\\"\\n                class=\\\"adf-radio-button\\\" *ngFor=\\\"let opt of field.options\\\" >\\n                {{opt.name}}\\n            </mat-radio-button>\\n        </mat-radio-group>\\n    </div>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.html\n// module id = 361\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./radio-buttons.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.scss\n// module id = 362\n// module chunks = 1","module.exports = \".adf-radio-button-container {\\n  margin-bottom: 15px; }\\n\\n.adf-radio-group {\\n  display: inline-flex;\\n  flex-direction: column; }\\n\\n.adf-radio-button {\\n  margin: 5px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/radio-buttons/radio-buttons.widget.scss\n// module id = 363\n// module chunks = 1","module.exports = \"<div class=\\\"adf-textfield adf-text-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <mat-form-field>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input matInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               [id]=\\\"field.id\\\"\\n               [required]=\\\"isRequired()\\\"\\n               [value]=\\\"field.value\\\"\\n               [(ngModel)]=\\\"field.value\\\"\\n               (ngModelChange)=\\\"onFieldChanged(field)\\\"\\n               [disabled]=\\\"field.readOnly || readOnly\\\"\\n               [textMask]=\\\"{mask: mask, isReversed: isMaskReversed}\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n    </mat-form-field>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/text/text.widget.html\n// module id = 364\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./text.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/text/text.widget.scss\n// module id = 365\n// module chunks = 1","module.exports = \".adf-text-widget {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/text/text.widget.scss\n// module id = 366\n// module chunks = 1","module.exports = \"<div class=\\\"adf-typeahead-widget-container\\\">\\n    <div class=\\\"adf-typeahead-widget {{field.className}}\\\"\\n        [class.is-dirty]=\\\"value\\\"\\n        [class.adf-invalid]=\\\"!field.isValid\\\"\\n        [class.adf-readonly]=\\\"field.readOnly\\\"\\n        id=\\\"typehead-div\\\" *ngIf=\\\"field.isVisible\\\">\\n        <mat-form-field>\\n            <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}</label>\\n            <input matInput class=\\\"adf-input\\\"\\n                   type=\\\"text\\\"\\n                   [id]=\\\"field.id\\\"\\n                   [(ngModel)]=\\\"value\\\"\\n                   (ngModelChange)=\\\"validate()\\\"\\n                   (keyup)=\\\"onKeyUp($event)\\\"\\n                   [disabled]=\\\"field.readOnly\\\"\\n                   placeholder=\\\"{{field.placeholder}}\\\"\\n                   [matAutocomplete]=\\\"auto\\\">\\n            <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"onItemSelect($event.option.value)\\\">\\n                <mat-option *ngFor=\\\"let item of options\\\" [value]=\\\"item\\\">\\n                    <span [id]=\\\"field.name+'_option_'+item.id\\\">{{item.name}}</span>\\n                </mat-option>\\n            </mat-autocomplete>\\n        </mat-form-field>\\n\\n        <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n        <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/typeahead/typeahead.widget.html\n// module id = 367\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./typeahead.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/typeahead/typeahead.widget.scss\n// module id = 368\n// module chunks = 1","module.exports = \".adf-typeahead-widget-container {\\n  position: relative;\\n  display: block; }\\n\\n.adf-typeahead-widget {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/typeahead/typeahead.widget.scss\n// module id = 369\n// module chunks = 1","module.exports = \"<div class=\\\"adf-upload-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\"\\n     [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <div class=\\\"adf-upload-widget-container\\\">\\n        <div>\\n            <mat-list *ngIf=\\\"hasFile\\\">\\n                <mat-list-item class=\\\"adf-upload-files-row\\\" *ngFor=\\\"let file of field.value\\\">\\n                    <img mat-list-icon class=\\\"adf-upload-widget__icon\\\"\\n                         [id]=\\\"'file-'+file.id+'-icon'\\\"\\n                         [src]=\\\"getIcon(file.mimeType)\\\"\\n                         [alt]=\\\"mimeTypeIcon\\\"\\n                         (click)=\\\"fileClicked(file)\\\"\\n                         (keyup.enter)=\\\"fileClicked(file)\\\"\\n                         role=\\\"button\\\"\\n                         tabindex=\\\"0\\\"/>\\n                    <span matLine id=\\\"{{'file-'+file.id}}\\\" (click)=\\\"fileClicked(file)\\\" (keyup.enter)=\\\"fileClicked(file)\\\"\\n                          role=\\\"button\\\" tabindex=\\\"0\\\" class=\\\"adf-file\\\">{{file.name}}</span>\\n                    <button *ngIf=\\\"!field.readOnly\\\" mat-icon-button [id]=\\\"'file-'+file.id+'-remove'\\\"\\n                            (click)=\\\"removeFile(file);\\\" (keyup.enter)=\\\"removeFile(file);\\\">\\n                        <mat-icon class=\\\"mat-24\\\">highlight_off</mat-icon>\\n                    </button>\\n                </mat-list-item>\\n            </mat-list>\\n        </div>\\n\\n        <div class=\\\"button-row\\\" *ngIf=\\\"(!hasFile || multipleOption) && !field.readOnly\\\">\\n            <a mat-raised-button color=\\\"primary\\\">\\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\\n                <input #uploadFiles\\n                       [multiple]=\\\"multipleOption\\\"\\n                       type=\\\"file\\\"\\n                       [id]=\\\"field.id\\\"\\n                       (change)=\\\"onFileChanged($event)\\\"/>\\n            </a>\\n        </div>\\n    </div>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/upload/upload.widget.html\n// module id = 370\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./upload.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./process-services/form/components/widgets/upload/upload.widget.scss\n// module id = 371\n// module chunks = 1","module.exports = \".adf-upload-widget-container {\\n  margin-bottom: 15px; }\\n  .adf-upload-widget-container input {\\n    cursor: pointer;\\n    height: 100%;\\n    right: 0;\\n    opacity: 0;\\n    position: absolute;\\n    top: 0;\\n    width: 300px;\\n    z-index: 4; }\\n\\n.adf-upload-widget {\\n  width: 100%;\\n  word-break: break-all;\\n  padding: 0.4375em 0;\\n  border-top: 0.84375em solid transparent; }\\n\\n.adf-upload-widget__icon {\\n  padding: 6px;\\n  float: left;\\n  cursor: pointer; }\\n\\n.adf-upload-widget__reset {\\n  margin-top: -2px; }\\n\\n.adf-upload-files-row .mat-line {\\n  margin-bottom: 0px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/sass-loader/lib/loader.js!./process-services/form/components/widgets/upload/upload.widget.scss\n// module id = 372\n// module chunks = 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\n\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\nimport { DataTableModule } from '@adf/core';\nimport { MaterialModule } from './components/material.module';\n\nimport { MASK_DIRECTIVE, WIDGET_DIRECTIVES } from './components/widgets/index';\n\nimport { StartFormCustomButtonDirective } from './components/form-custom-button.directive';\n\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { FormListComponent } from './components/form-list.component';\nimport { FormComponent } from './components/form.component';\nimport { StartFormComponent } from './components/start-form.component';\nimport { ContentWidgetComponent } from './components/widgets/content/content.widget';\nimport { WidgetComponent } from './components/widgets/widget.component';\n\nimport { ActivitiAlfrescoContentService } from './services/activiti-alfresco.service';\nimport { EcmModelService } from './services/ecm-model.service';\nimport { FormRenderingService } from './services/form-rendering.service';\nimport { FormService } from './services/form.service';\nimport { NodeService } from './services/node.service';\nimport { ProcessContentService } from './services/process-content.service';\nimport { WidgetVisibilityService } from './services/widget-visibility.service';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        DataTableModule,\n        HttpModule,\n        MaterialModule\n    ],\n    declarations: [\n        ContentWidgetComponent,\n        FormFieldComponent,\n        FormComponent,\n        FormListComponent,\n        StartFormComponent,\n        StartFormCustomButtonDirective,\n        ...WIDGET_DIRECTIVES,\n        ...MASK_DIRECTIVE,\n        WidgetComponent\n    ],\n    entryComponents: [\n        ...WIDGET_DIRECTIVES\n    ],\n    providers: [\n        ActivitiAlfrescoContentService,\n        EcmModelService,\n        FormRenderingService,\n        FormService,\n        NodeService,\n        ProcessContentService,\n        WidgetVisibilityService,\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: '@adf/process-services',\n                source: 'assets/ng2-activiti-form'\n            }\n        }\n    ],\n    exports: [\n        ContentWidgetComponent,\n        FormFieldComponent,\n        FormComponent,\n        FormListComponent,\n        StartFormComponent,\n        StartFormCustomButtonDirective,\n        ...WIDGET_DIRECTIVES\n    ]\n})\nexport class FormModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/form-module.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_375__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/http\"\n// module id = 375\n// module chunks = 1","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MAT_PLACEHOLDER_GLOBAL_OPTIONS, MatAutocompleteModule, MatButtonModule, MatCardModule,\n    MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n    MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n    MatTabsModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n        MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule,\n        MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule\n    ];\n}\n\n@NgModule({\n    providers: [\n        {provide: MAT_PLACEHOLDER_GLOBAL_OPTIONS, useValue: { float: 'never' }}\n    ],\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/material.module.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive } from '@angular/core';\n\n@Directive({ selector: '[form-custom-button]' }) export class StartFormCustomButtonDirective {}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/form-custom-button.directive.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Compiler,\n    Component, ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Input,\n    ModuleWithComponentFactories,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { CoreModule } from 'ng2-alfresco-core';\n\nimport { FormRenderingService } from './../../services/form-rendering.service';\nimport { WidgetVisibilityService } from './../../services/widget-visibility.service';\nimport { FormFieldModel } from './../widgets/core/index';\nimport { WidgetComponent } from './../widgets/widget.component';\n\ndeclare var adf: any;\n\n@Component({\n    selector: 'adf-form-field, form-field',\n    template: `\n        <div [hidden]=\"!field?.isVisible\"\n            [class.adf-focus]=\"focus\"\n            (focusin)=\"focusToggle()\"\n            (focusout)=\"focusToggle()\">\n            <div #container></div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormFieldComponent implements OnInit, OnDestroy {\n\n    @ViewChild('container', { read: ViewContainerRef })\n    container: ViewContainerRef;\n\n    @Input()\n    field: FormFieldModel = null;\n\n    componentRef: ComponentRef<{}>;\n\n    focus: boolean = false;\n\n    constructor(private formRenderingService: FormRenderingService,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private visibilityService: WidgetVisibilityService,\n                private compiler: Compiler) {\n    }\n\n    ngOnInit() {\n        let originalField = this.getField();\n        if (originalField) {\n            let customTemplate = this.field.form.customFieldTemplates[originalField.type];\n            if (customTemplate && this.hasController(originalField.type)) {\n                let factory = this.getComponentFactorySync(originalField.type, customTemplate);\n                this.componentRef = this.container.createComponent(factory);\n                let instance: any = this.componentRef.instance;\n                if (instance) {\n                    instance.field = originalField;\n                }\n            } else {\n                let componentType = this.formRenderingService.resolveComponentType(originalField);\n                if (componentType) {\n                    let factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n                    this.componentRef = this.container.createComponent(factory);\n                    let instance = <WidgetComponent> this.componentRef.instance;\n                    instance.field = this.field;\n                    instance.fieldChanged.subscribe(field => {\n                        if (field && this.field.form) {\n                            this.visibilityService.refreshVisibility(this.field.form);\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n    private getField(): FormFieldModel {\n        if (this.field && this.field.params) {\n            const wrappedField = this.field.params.field;\n            if (wrappedField && wrappedField.type) {\n                return wrappedField;\n            }\n        }\n        return this.field;\n    }\n\n    private hasController(type: string): boolean {\n        return (adf && adf.components && adf.components[type]);\n    }\n\n    private getComponentFactorySync(type: string, template: string): ComponentFactory<any> {\n        let componentInfo = adf.components[type];\n\n        if (componentInfo.factory) {\n            return componentInfo.factory;\n        }\n\n        let metadata = {\n            selector: `runtime-component-${type}`,\n            template: template\n        };\n\n        let factory = this.createComponentFactorySync(this.compiler, metadata, componentInfo.class);\n        componentInfo.factory = factory;\n        return factory;\n    }\n\n    private createComponentFactorySync(compiler: Compiler, metadata: Component, componentClass: any): ComponentFactory<any> {\n        const cmpClass = componentClass || class RuntimeComponent {\n        };\n        const decoratedCmp = Component(metadata)(cmpClass);\n\n        @NgModule({ imports: [CoreModule], declarations: [decoratedCmp] })\n        class RuntimeComponentModule {\n        }\n\n        let module: ModuleWithComponentFactories<any> = compiler.compileModuleAndAllComponentsSync(RuntimeComponentModule);\n        return module.componentFactories.find(x => x.componentType === decoratedCmp);\n    }\n\n    focusToggle() {\n        this.focus = !this.focus;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/components/form-field/form-field.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApi } from 'alfresco-js-api';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { ExternalContent } from '../components/widgets/core/external-content';\nimport { ExternalContentLink } from '../components/widgets/core/external-content-link';\n\n@Injectable()\nexport class ActivitiAlfrescoContentService {\n\n    static UNKNOWN_ERROR_MESSAGE: string = 'Unknown error';\n    static GENERIC_ERROR_MESSAGE: string = 'Server error';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Returns a list of child nodes below the specified folder\n     *\n     * @param accountId\n     * @param folderId\n     * @returns {null}\n     */\n    getAlfrescoNodes(accountId: string, folderId: string): Observable<[ExternalContent]> {\n        let apiService: AlfrescoApi = this.apiService.getInstance();\n        let accountShortId = accountId.replace('alfresco-', '');\n        return Observable.fromPromise(apiService.activiti.alfrescoApi.getContentInFolder(accountShortId, folderId))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Returns a list of child nodes below the specified folder\n     *\n     * @param accountId\n     * @param node\n     * @param siteId\n     * @returns {null}\n     */\n    linkAlfrescoNode(accountId: string, node: ExternalContent, siteId: string): Observable<ExternalContentLink> {\n        let apiService: AlfrescoApi = this.apiService.getInstance();\n        return Observable.fromPromise(apiService.activiti.contentApi.createTemporaryRelatedContent({\n            link: true,\n            name: node.title,\n            simpleType: node.simpleType,\n            source: accountId,\n            sourceId: node.id + '@' + siteId\n        })).map(this.toJson).catch(err => this.handleError(err));\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    toJsonArray(res: any) {\n        if (res) {\n            return res.data || [];\n        }\n        return [];\n    }\n\n    handleError(error: any): Observable<any> {\n        let errMsg = ActivitiAlfrescoContentService.UNKNOWN_ERROR_MESSAGE;\n        if (error) {\n            errMsg = (error.message) ? error.message :\n                error.status ? `${error.status} - ${error.statusText}` : ActivitiAlfrescoContentService.GENERIC_ERROR_MESSAGE;\n        }\n        this.logService.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./process-services/form/services/activiti-alfresco.service.ts"],"sourceRoot":""}
