name: "pull-request"

on:
  workflow_call:
    inputs:
      dry-run-flag:
        description: 'enable dry-run on artifact push'
        required: false
        type: boolean
        default: true
      devel:
        description: 'devel'
        required: false
        type: boolean
        default: false
      cron-run:
        description: 'disables jobs which should not run when cron runs e2es'
        required: false
        type: boolean
        default: false
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop
      - master
      - develop-patch*
      - master-patch*
  pull_request_review:
    types: [submitted, dismissed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BASE_REF: ${{ github.base_ref }}
  BASE_PR_REF: ${{ github.event.pull_request.base.ref }}
  HEAD_REF: ${{ github.head_ref }}
  HEAD_PR_REF: ${{ github.event.pull_request.head.ref }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_BRANCH: ${{ github.ref_name }}
  GH_BUILD_DIR: ${{ github.workspace }}
  GH_COMMIT: ${{ github.sha }}
  BUILD_ID: ${{ github.run_id }}
  GH_RUN_NUMBER: ${{ github.run_attempt }}
  GH_BUILD_NUMBER: ${{ github.run_id }}
  GH_PR_NUMBER: ${{github.event.pull_request.number}}
  JOB_ID: ${{ github.run_id }}
  LOG_LEVEL: "ERROR"
  S3_BUILD_BUCKET_SHORT_NAME: ${{ secrets.S3_BUILD_BUCKET_SHORT_NAME }}
  NODE_OPTIONS: "--max-old-space-size=5120"
  DOCKER_REPOSITORY_DOMAIN: ${{ secrets.DOCKER_REPOSITORY_DOMAIN }}
  DOCKER_REPOSITORY_USER: ${{ secrets.DOCKER_REPOSITORY_USER }}
  DOCKER_REPOSITORY_PASSWORD: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
  DOCKER_REPOSITORY_STORYBOOK: "${{ secrets.DOCKER_REPOSITORY_DOMAIN }}/alfresco/storybook"
  REPO_OWNER: "Alfresco"
  REPO_NAME: "alfresco-ng2-components"
  STORYBOOK_DIR: "./dist/storybook/stories"
  BUILT_LIBS_DIR: "./dist/libs"
  NODE_MODULES_DIR: "./node_modules"
  REDIRECT_URI: /

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Ensure SHA pinned actions
        uses: zgosalvez/github-actions-ensure-sha-pinned-actions@4830be28ce81da52ec70d65c552a7403821d98d4 # v3.0.23

      - name: Check package-lock.json version
        run: |
          if [[ $(jq '.lockfileVersion == 3' package-lock.json) == "true" ]] ; then
            echo "package-lock.json has a correct version"
          else
            echo "package-lock must be version 3"
            exit 1
          fi

  check-if-pr-is-approved:
    runs-on: ubuntu-latest
    outputs:
      isLabeledWithDoNotMerge: ${{ steps.check-label.outputs.isLabeledWithDoNotMerge }}
      pr_approved: ${{ steps.check-approval.outputs.pr_approved }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
         fetch-depth: 0

      - name: Get branch name
        uses: Alfresco/alfresco-build-tools/.github/actions/get-branch-name@45bb8b664779b691f8a21d9fd49e360916726c11 # v8.18.1

      - name: Save commit message
        uses: Alfresco/alfresco-build-tools/.github/actions/get-commit-message@45bb8b664779b691f8a21d9fd49e360916726c11 # v8.18.1

      - name: ci:force flag parser
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "schedule" ] || [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            echo -e "\033[32mci:force check can be skipped\033[0m"
            skip_check="true"
          elif [[ "$COMMIT_MESSAGE" == *"[ci:force]"* ]]; then
              echo -e "\033[32m[ci:force] flag detected. No need for approval.\033[0m"
              skip_check="true"
          fi

      - name: Check if PR is labeled
        id: check-label
        run: |
          if echo '${{ toJson(github.event.pull_request.labels) }}' | jq -e '.[] | select(.name | contains("do not merge"))'; then
            echo "::warning::PR is labeled as 'do not merge'"
            echo "isLabeledWithDoNotMerge=true" >> $GITHUB_ENV
            echo "isLabeledWithDoNotMerge=true" >> $GITHUB_OUTPUT
          else
            echo "PR is not labeled as 'do not merge'"
            echo "isLabeledWithDoNotMerge=false" >> $GITHUB_ENV
            echo "isLabeledWithDoNotMerge=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if PR is approved
        id: check-approval
        if: env.isLabeledWithDoNotMerge == 'false'
        env:
          DEVEL_FLAG: ${{ inputs.devel }}
          GH_TOKEN: ${{ github.token }}
          skip_check: "false"
        run: |
          if [ "${{ github.event_name }}" == "schedule" ] || [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            echo -e "\033[32mci:force check can be skipped\033[0m"
            skip_check="true"
          elif [[ "$COMMIT_MESSAGE" == *"[ci:force]"* ]]; then
            echo -e "\033[32m[ci:force] flag detected. No need for approval.\033[0m"
            skip_check="true"
          fi

          if [ "${{ github.actor }}" == "dependabot[bot]" ] || [ "${{ github.actor }}" == "alfresco-build" ]; then
            echo -e "\033[32mCommit by ${{ github.actor }}. No need for approval.\033[0m"
            skip_check="true"
          fi
          if [ "${{ github.event_name }}" == "schedule" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo -e "\033[32mSchedule event\033[0m"
            skip_check="true"
          fi

          if [[ "$DEVEL_FLAG" == "true" ]]; then
            echo -e "\033[32mDevel flag\033[0m"
            skip_check="true"
          fi
          if [ "$skip_check" == "false" ]; then
            echo "Checking PR approval"
            echo "PR: $GH_PR_NUMBER"

            if gh pr view $GH_PR_NUMBER --json reviews | jq -e '.reviews[] | select(.state == "APPROVED")'; then
              echo -e "\033[32mPR approved\033[0m"
              echo "pr_approved=true" >> $GITHUB_OUTPUT
            else
              echo "::error::PR NOT approved"
              echo -e "\033[31mPR NOT approved\033[0m"
              echo "pr_approved=false" >> $GITHUB_OUTPUT
            fi
          fi

  setup:
    # long timeout required when cache has to be recreated
    timeout-minutes: 30
    name: "Setup"
    runs-on: ubuntu-latest
    needs: [check-if-pr-is-approved, pre-checks]
    if: ${{ needs.check-if-pr-is-approved.outputs.isLabeledWithDoNotMerge == 'false' && needs.check-if-pr-is-approved.outputs.pr_approved == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: ./.github/actions/setup
      - name: install
        run: |
          npm ci
          npx nx run js-api:bundle
          npx nx run cli:bundle
      - uses: ./.github/actions/upload-node-modules-and-artifacts

  generate-affected-matrix:
    name: "Generate affected matrix"
    runs-on: ubuntu-latest
    needs: []
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
      - name: Cache node modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      - name: Install dependencies
        run: npm ci
      - name: Generate affected projects matrix
        id: set-matrix
        run: |
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          echo "Base ref is $BASE_REF"
          AFFECTED=$(npx nx show projects --affected --target=test --base=origin/$BASE_REF --select=projects --plain --exclude=cli,stories,eslint-angular)
          echo "Affected projects: $AFFECTED"
          MATRIX_JSON=$(echo $AFFECTED | xargs -n1 | jq -R -s -c 'split("\n")[:-1] | map({ "project": . })')
          MATRIX_JSON=$(echo "$MATRIX_JSON" | tr -d '\n' | sed 's/"$//')
          echo "Matrix JSON: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  lint:
    # long timeout required when cache has to be recreated
    timeout-minutes: 30
    name: "Lint"
    runs-on: ubuntu-latest
    needs: ["generate-affected-matrix"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - name: Cache node modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
           ${{ runner.os }}-node-modules-
      - uses: ./.github/actions/setup
      - run: npx nx affected --target=lint --base=origin/develop --head=HEAD

  trigger-build:
    name: "Build Libs"
    needs: [generate-affected-matrix]
    uses: ./.github/workflows/build-lib-workflow.yml
    with:
      matrix: ${{ needs.generate-affected-matrix.outputs.matrix }}

  build-storybook:
    name: "Build Storybook"
    needs: [generate-affected-matrix]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
      - name: Cache node modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      - name: Setup environment
        uses: ./.github/actions/setup
      - name: Build Storybook
        run: |
          NX_REJECT_UNKNOWN_LOCAL_CACHE=0 npx nx affected --target=build-storybook $NX_CALCULATION_FLAGS --configuration=ci

  trigger-unit-tests:
    name: "Unit Tests"
    needs: [generate-affected-matrix]
    uses: ./.github/workflows/unit-test-workflow.yml
    with:
      matrix: ${{ needs.generate-affected-matrix.outputs.matrix }}
