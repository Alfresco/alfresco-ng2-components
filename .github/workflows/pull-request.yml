name: "pull-request"

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
on:
  push:
    branches:
      - AAE-7986*
  pull_request:
    types:
      - opened
    branches:
      - /^master(-patch.*)?$/
      - /^develop(-patch.*)?$/
      - master
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TRAVIS_BRANCH: ${{ github.ref_name }}
  GITHUB_BRANCH: ${{ github.ref_name }}
  TRAVIS_BUILD_DIR: ${{ github.workspace }}
  TRAVIS_COMMIT: ${{ github.sha }}
  BUILD_ID: ${{ github.run_id }}
  TRAVIS_RUN_NUMBER: ${{ github.run_attempt }}
  TRAVIS_BUILD_NUMBER: ${{ github.run_id }}
  JOB_ID: ${GITHUB_RUN_ID}
  PROXY_HOST_BPM: ${{ secrets.E2E_HOST }}
  E2E_HOST_APA: ${{ secrets.E2E_HOST_APA }}
  E2E_HOST: ${{ secrets.E2E_HOST }}
  E2E_USERNAME: ${{ secrets.E2E_ADMIN_EMAIL_IDENTITY }}
  E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
  E2E_ADMIN_EMAIL_IDENTITY: ${{ secrets.E2E_ADMIN_EMAIL_IDENTITY }}
  E2E_ADMIN_PASSWORD_IDENTITY: ${{ secrets.E2E_ADMIN_PASSWORD_IDENTITY }}
  USERNAME_ADF: ${{ secrets.E2E_USERNAME }}
  PASSWORD_ADF: ${{ secrets.E2E_PASSWORD }}
  URL_HOST_ADF: ${{ secrets.URL_HOST_ADF }}
  IDENTITY_ADMIN_EMAIL: ${{ secrets.E2E_ADMIN_EMAIL_IDENTITY }}
  IDENTITY_ADMIN_PASSWORD: ${{ secrets.E2E_ADMIN_PASSWORD_IDENTITY }}
  AWS_S3_BUCKET_ACTIVITI_LICENSE: ${{ secrets.AWS_S3_BUCKET_ACTIVITI_LICENSE }}
  HOST_SSO: ${{ secrets.HOST_SSO }}
  LOG_LEVEL: "ERROR"
  E2E_LOG_LEVEL: "ERROR"
  E2E_MODELER_USERNAME: ${{ secrets.E2E_MODELER_USERNAME }}
  E2E_MODELER_PASSWORD: ${{ secrets.E2E_MODELER_PASSWORD }}
  EXTERNAL_ACS_HOST: ${{ secrets.EXTERNAL_ACS_HOST }}
  E2E_DEVOPS_USERNAME: ${{ secrets.E2E_DEVOPS_USERNAME }}
  E2E_DEVOPS_PASSWORD: ${{ secrets.E2E_DEVOPS_PASSWORD }}
  USERNAME_SUPER_ADMIN_ADF: ${{ secrets.USERNAME_SUPER_ADMIN_ADF }}
  PASSWORD_SUPER_ADMIN_ADF: ${{ secrets.PASSWORD_SUPER_ADMIN_ADF }}
  HR_USER: ${{ secrets.HR_USER }}
  HR_USER_PASSWORD: ${{ secrets.HR_USER_PASSWORD }}

jobs:
  main:
    # long timeout required when cache has to be recreated
    timeout-minutes: 30
    name: "Build Components"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: ./.github/actions/setup
      - run: echo $TRAVIS_EVENT_TYPE
      - run: echo $S3_NODE_MODULES_CACHE_ID
      - run: echo $HEAD_COMMIT_HASH
      - run: echo "$NX_CALCULATION_FLAGS"
      - run: echo NODE_OPTIONS="--max-old-space-size=5120" >> $GITHUB_ENV
      - run: npm ci
      - name: nx affected lint
        run: nx affected "$NX_CALCULATION_FLAGS" --target=lint
      - name: install chrome
        uses: browser-actions/setup-chrome@latest
      - name: install xvfb
        run: sudo apt-get install -y x11-xserver-utils xvfb
      - run: /usr/bin/xvfb-run --auto-servernum nx affected:test "$NX_CALCULATION_FLAGS" --exclude="insights,core,extensions,process-services,process-services-cloud" }}
      - uses: ./.github/actions/clean-test-env
      - run: nx affected:build "$NX_CALCULATION_FLAGS" --prod
      - run: nx run stories:build-storybook --configuration ci
      - uses: ./.github/actions/upload-build-artifacts

  playwright:
    timeout-minutes: 20
    name: "playwright"
    needs: [main]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all
      - uses: ./.github/actions/setup
      - name: clean
        run: |
          rm -rf nxcache
          rm -rf dist
      - uses: ./.github/actions/download-build-artifacts
      - run: find nxcache -type d -maxdepth 1
      - run: find dist -type d -maxdepth 2
      - run: nx run testing:bundle
      - name: Install playRight
        run: |
          npm install -D @playwright/test
          playwright install
      - name: build adf cli
        run: |
          nx build cli
      - name: Process Cloud Storybook Playwright
        run: |
          playwright install chromium
          sudo sysctl -w fs.inotify.max_user_watches=524288
          playwright test --config='e2e-playwright/playwright.config.ts' || exit 1
      - name: debug
        run: ls -lath node_modules/@alfresco || true
      - uses: ./.github/actions/upload-build-artifacts

  e2e:
    timeout-minutes: 70
    name: "e2e: ${{ matrix.e2e-test.description }}"
    needs: [playwright]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      # max-parallel: 4
      matrix:
        e2e-test:
          - description: "Core"
            test-id: "core"
            folder: "core"
            provider: "ALL"
            auth: "OAUTH"
            check-cs-env: "true"
            check-ps-env: "true"
          - description: "Content: Components"
            test-id: "content-services"
            folder: "content-services/components"
            provider: "ECM"
            auth: "BASIC"
            check-cs-env: "true"
          - description: "Content: Directives"
            test-id: "content-services"
            folder: "content-services/directives"
            provider: "ECM"
            auth: "BASIC"
            check-cs-env: "true"
          - description: "Content: Document List"
            test-id: "content-services"
            folder: "content-services/document-list"
            provider: "ECM"
            auth: "BASIC"
            check-cs-env: "true"
          - description: "Content: Metadata"
            test-id: "content-services"
            folder: "content-services/metadata"
            provider: "ECM"
            auth: "BASIC"
            check-cs-env: "true"
          - description: "Content: Upload and Versioning"
            test-id: "content-services browser"
            folder: "content-services/upload"
            provider: "ECM"
            auth: "BASIC"
            check-cs-env: "true"
          - description: "Search"
            test-id: "content-services"
            folder: "search"
            provider: "ECM"
            auth: "BASIC"
            check-cs-env: "true"
          - description: "Process: Form"
            test-id: "process-services"
            folder: "process-services/form"
            provider: "BPM"
            auth: "OAUTH"
            check-ps-env: "true"
            check-external-cs-env: "true"
          - description: "Process: Process"
            test-id: "process-services"
            folder: "process-services/process"
            provider: "BPM"
            auth: "OAUTH"
            check-ps-env: "true"
            check-external-cs-env: "true"
          - description: "Process: Tasks"
            test-id: "process-services"
            folder: "process-services/tasks"
            provider: "BPM"
            auth: "OAUTH"
            check-ps-env: "true"
            check-external-cs-env: "true"
          - description: "Process: Widget"
            test-id: "process-services"
            folder: "process-services/widgets"
            provider: "BPM"
            auth: "OAUTH"
            check-ps-env: "true"
            check-external-cs-env: "true"
          - description: "Process Cloud: Form"
            test-id: "process-services-cloud"
            folder: "process-services-cloud/form-field"
            provider: "ALL"
            auth: "OAUTH"
            apa-proxy: true
            check-cs-env: "true"
            check-ps-cloud-env: "true"
          - description: "Process Cloud: People"
            test-id: "process-services-cloud"
            folder: "process-services-cloud/people"
            provider: "ALL"
            auth: "OAUTH"
            apa-proxy: true
            check-cs-env: "true"
            check-ps-cloud-env: "true"
          - description: "Process Cloud: Process"
            test-id: "process-services-cloud"
            folder: "process-services-cloud/process"
            provider: "ALL"
            auth: "OAUTH"
            apa-proxy: true
            check-cs-env: "true"
            check-ps-cloud-env: "true"
          - description: "Process Cloud: Start Task"
            test-id: "process-services-cloud"
            folder: "process-services-cloud/start-task"
            provider: "ALL"
            auth: "OAUTH"
            apa-proxy: true
            check-cs-env: "true"
            check-ps-cloud-env: "true"
          - description: "Process Cloud: Tasks List"
            test-id: "process-services-cloud"
            folder: "process-services-cloud/task-list"
            provider: "ALL"
            auth: "OAUTH"
            apa-proxy: true
            check-cs-env: "true"
            check-ps-cloud-env: "true"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all
      - uses: ./.github/actions/setup
        with:
          enable-cache: "true"
      - name: clean
        run: |
          rm -rf nxcache
          rm -rf dist
      - name: debug
        run: |
          echo '${{ toJson(matrix) }}'
      - uses: ./.github/actions/download-build-artifacts
      - name: copy cli into node modules
        run: nx run cli:bundle
        shell: bash
      - run: find nxcache -type d -maxdepth 1
      - run: find dist -type d -maxdepth 2
      - name: e2e
        uses: ./.github/actions/e2e
        with:
          e2e-test-id: ${{ matrix.e2e-test.test-id }}
          e2e-test-folder: ${{ matrix.e2e-test.folder }}
          e2e-test-provider: ${{ matrix.e2e-test.provider }}
          e2e-test-auth: ${{ matrix.e2e-test.auth }}
          check-cs-env: ${{ matrix.e2e-test.check-cs-env }}
          check-ps-env: ${{ matrix.e2e-test.check-ps-env }}
          check-ps-cloud-env: ${{ matrix.e2e-test.check-ps-cloud-env }}
          check-external-cs-env: ${{ matrix.e2e-test.check-external-cs-env }}
          apa-proxy: ${{ matrix.e2e-test.apa-proxy }}
          apa-proxy-host: ${{ secrets.E2E_HOST_APA }}
          e2e-proxy-host: ${{ secrets.E2E_HOST }}
          s3-build-path: ${{ secrets.S3_DBP_PATH }}
