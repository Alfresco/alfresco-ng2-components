name: "before-install"
description: "launch before_install.sh and then parse env vars"
runs:
  using: "composite"
  steps:
    - name: Before install
      if: ${{ ! env.ACT }}
      shell: bash
      run: |
        pip install --user awscli

    - name: base vars
      shell: bash
      run: |
        {
          echo "GIT_HASH=$(git rev-parse HEAD)";
          echo "BASE_HASH=origin/${{ github.ref_name }}";
          echo "HEAD_HASH=HEAD";
          echo "HEAD_COMMIT_HASH=${TRAVIS_PULL_REQUEST_SHA:-${TRAVIS_COMMIT}}";
          echo COMMIT_MESSAGE=$(git log --format=%B -n 1 $HEAD_COMMIT_HASH | tr '*' '-' | tr '\n' ' ');
        } >> $GITHUB_ENV

    - name: DEFAULT CONFIG
      shell: bash
      run: |
        echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
        echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV

    - name: PUSH
      if: "${{ inputs.event_name }} == 'push'"
      shell: bash
      run: |
        if [[ "${{ github.ref_name }}" =~ ^master(-patch.*)?$ ]]; then
            # into master(-patch*)
            echo "Setting up CI jobs for master patch version creation."
            echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
            echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV
        elif [[ "${{ github.ref_name }}" =~ ^develop-patch.*$ ]]; then
            # into develop-patch*
            echo "Setting up CI jobs for develop patch version creation."
            echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
            echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV
        else
            # into develop
            echo "NX_CALCULATION_FLAGS=--base=$(git describe --tags $(git rev-list --tags --max-count=1)) --head=$HEAD_HASH" >> $GITHUB_ENV
            echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV
        fi

    - name: PULL REQUEST
      if: "${{ inputs.event_name }} == 'pull_request'"
      shell: bash
      run: |
        echo 'NX_CALCULATION_FLAGS=--base=origin/${{ github.ref_name }} --head=$HEAD_HASH' >> $GITHUB_ENV
        echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV

    - name: SCHEDULE
      if: "${{ inputs.event_name }} == 'schedule'"
      shell: bash
      run: |
        echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
        echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV

    - name: order 66
      shell: bash
      run: |
        source $GITHUB_WORKSPACE/scripts/ci/partials/_ci-flags-parser.sh 
        NODE_VERSION=$(node -v)
        S3_SMART_RUNNER_PATH="$S3_DBP_PATH/smart-runner/$BUILD_ID"
        PACKAGE_LOCK_SHASUM=$(shasum ./package-lock.json | cut -f 1 -d " ")
        S3_NODE_MODULES_CACHE_ID=$(echo "$NODE_VERSION-$PACKAGE_LOCK_SHASUM" | shasum  | cut -f 1 -d " ")
        S3_NODE_MODULES_CACHE_PATH="$S3_DBP_PATH/cache/node_modules/$S3_NODE_MODULES_CACHE_ID.tar.bz2"
        
        {
          echo "NX_CALCULATION_FLAGS=$NX_CALCULATION_FLAGS";
          echo "CI_FORCE_RUN=$CI_FORCE_RUN";
          echo "NODE_VERSION=$NODE_VERSION";
          echo "S3_SMART_RUNNER_PATH=$S3_SMART_RUNNER_PATH";
          echo "PACKAGE_LOCK_SHASUM=$PACKAGE_LOCK_SHASUM";
          echo "S3_NODE_MODULES_CACHE_ID=$S3_NODE_MODULES_CACHE_ID";
          echo "S3_NODE_MODULES_CACHE_PATH=$S3_NODE_MODULES_CACHE_PATH";
        } >> $GITHUB_ENV
        while true; do echo "sleeping"; sleep 2; done
