name: "before-install"
description: "launch before_install.sh and then parse env vars"
inputs:
  act:
    description: 'enable act debug'
    required: false
    type: boolean
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Before install
      if: ${{ ! env.ACT }}
      shell: bash
      run: |
        pip install --user awscli

    - name: base vars
      shell: bash
      run: |
        {
          echo "GIT_HASH=$(git rev-parse HEAD)";
          echo "BASE_HASH=origin/${{ github.ref_name }}";
          echo "HEAD_HASH=HEAD";
          echo "HEAD_COMMIT_HASH=${TRAVIS_PULL_REQUEST_SHA:-${TRAVIS_COMMIT}}";
          echo COMMIT_MESSAGE=$(git log --format=%B -n 1 $HEAD_COMMIT_HASH | tr '*' '-' | tr '\n' ' ');
          echo "NX_CALCULATION_FLAGS=--all";
          echo "BUILD_OPTS=--configuration production";
          echo CI_FORCE_RUN=false;
          echo NODE_VERSION=$(node -v);
        } >> $GITHUB_ENV

    - name: PUSH on master/develop patch branch
      if: "${{ inputs.event_name }} == 'push'"
      shell: bash
      run: |
        if [[ "${{ github.ref_name }}" =~ ^master(-patch.*)?$ ]]; then
            # into master(-patch*)
            echo "Setting up CI jobs for master patch version creation."
            echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
            echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV
        elif [[ "${{ github.ref_name }}" =~ ^develop-patch.*$ ]]; then
            # into develop-patch*
            echo "Setting up CI jobs for develop patch version creation."
            echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
            echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV
        fi

    - name: PUSH on develop branch
      if: "github.ref_name == 'develop'"
      shell: bash
      run: |
        base=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "NX_CALCULATION_FLAGS=--base=$base --head=$HEAD_HASH" >> $GITHUB_ENV
        echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV

    - name: PULL REQUEST
      if: "${{ inputs.event_name }} == 'pull_request'"
      shell: bash
      run: |
        echo "~~~ Working on PULL REQUEST ~~~"
        echo 'NX_CALCULATION_FLAGS=--base=origin/${{ github.ref_name }} --head=$HEAD_HASH' >> $GITHUB_ENV
        echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV

    - name: SCHEDULE
      if: "${{ inputs.event_name }} == 'schedule'"
      shell: bash
      run: |
        echo "~~~ Working on SCHEDULE ~~~"
        echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
        echo "BUILD_OPTS=--configuration production" >> $GITHUB_ENV

    - name: affected:* flag parser
      shell: bash
      if: "contains(github.event.head_commit.message, '[affected:*]')"
      run: |
        echo NX_CALCULATION_FLAGS="--all" >> $GITHUB_ENV
        while true; do echo "sleeping"; sleep 2; done

    - name: ci:force flag parser
      shell: bash
      if: "contains(github.event.head_commit.message, '[ci:force]')"
      run: echo CI_FORCE_RUN=true >> $GITHUB_ENV

    - name: order 66
      shell: bash
      if: ${{ env.ACT }}
      run: |
        echo "GIT_HASH=$GIT_HASH"
        echo "BASE_HASH=$BASE_HASH"
        echo "HEAD_HASH=$HEAD_HASH"
        echo "HEAD_COMMIT_HASH=$HEAD_COMMIT_HASH"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE"
        echo "NX_CALCULATION_FLAGS=$NX_CALCULATION_FLAGS"
        echo "BUILD_OPTS=$BUILD_OPTS"
        echo "NX_CALCULATION_FLAGS=$NX_CALCULATION_FLAGS"
        echo "CI_FORCE_RUN=$CI_FORCE_RUN"
        echo "NODE_VERSION=$NODE_VERSION"
        echo "S3_SMART_RUNNER_PATH=$S3_SMART_RUNNER_PATH"
        echo "PACKAGE_LOCK_SHASUM=$PACKAGE_LOCK_SHASUM"
        while true; do echo "sleeping"; sleep 2; done
