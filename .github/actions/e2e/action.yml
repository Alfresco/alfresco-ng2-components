name: "s3/download"
description: "s3/download"
inputs:
  e2e-test-name:
    description: "Test name"
    required: true
  e2e-test-folder:
    description: "Test folder"
    required: true
  e2e-test-provider:
    description: "Test provider"
    required: true
  e2e-test-auth:
    description: "Test auth"
    required: true
  upload-to-s3:
    description: "enable upload to s3 before e2e"
    required: true
  download-from-s3:
    description: "enable download from s3 after e2e"
    required: true
  proxy:
    description: "proxy host"
    required: true
  output:
    description: "Output path"
    required: true
  check-cs-env:
    required: false
    description: check cs env
    default: "false"
  check-ps-env:
    required: false
    description: check ps env
    default: "false"
  check-external-cs-env:  
    required: false
    description: check external cs env
    default: "false"
  check-ps-cloud-env:
    required: false
    description: check ps cloud env
    default: "false"


runs:
  using: "composite"
  steps:

    - name: get artifacts from S3
      if: ${{ inputs.download-from-s3 == 'true' }}
      uses: ./.github/actions/s3/download
      with:
        artifact-id: '$S3_SMART_RUNNER_PATH/${{ github.run_id }}-${{ github.sha }}.tar.bz2'
        output: "$SMART_RUNNER_DIRECTORY"

    - name: reinstall testing
      shell: bash
      run: nx run testing:bundle

    - name: check EXTERNAL-CS is UP
      shell: bash
      if: ${{ inputs.check-external-cs-env == 'true' }}
      env:
        PROXY_HOST_BPM: ${{ inputs.proxy }}      
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli \
          check-cs-env \
          --host "$EXTERNAL_ACS_HOST" \
          -u "$E2E_USERNAME" \
          -p "$E2E_PASSWORD" || exit 1

    - name: Check CS is UP
      shell: bash
      if: ${{ inputs.check-cs-env == 'true' }}
      env:
        PROXY_HOST_BPM: ${{ inputs.proxy }}      
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli \
          check-cs-env \
          --host "$E2E_HOST" \
          -u "$E2E_USERNAME" \
          -p "$E2E_PASSWORD" || exit 1
      
    - name: check PS is UP
      shell: bash
      if: ${{ inputs.check-ps-env == 'true' }}
      env:
        PROXY_HOST_BPM: ${{ inputs.proxy }}
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli init-aps-env \
          --host "$E2E_HOST" \
          -u "$E2E_USERNAME" \
          -p "$E2E_PASSWORD" \
          --license "$AWS_S3_BUCKET_ACTIVITI_LICENSE" || exit 1

    - name: check PS-CLOUD is UP
      env:
        PROXY_HOST_BPM: ${{ inputs.proxy }}    
      shell: bash
      if: ${{ inputs.check-ps-cloud-env == 'true' }}
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli init-aae-env \
          --oauth "$E2E_HOST" \
          --host "$E2E_HOST_APA" \
          --modelerUsername "$E2E_MODELER_USERNAME" \
          --modelerPassword "$E2E_MODELER_PASSWORD" \
          --devopsUsername "$E2E_DEVOPS_USERNAME" \
          --devopsPassword "$E2E_DEVOPS_PASSWORD" \
          --clientId 'alfresco' || exit 1

    - name: override NX_CALCULATION_FLAGS
      shell: bash
      # run: echo NX_CALCULATION_FLAGS=--base=origin/develop --head=HEAD >> $GITHUB_ENV
      run: echo "NX_CALCULATION_FLAGS=--all" >> $GITHUB_ENV
    - name: run test
      env:
        FOLDER: "${{ inputs.e2e-test-folder }}"
        PROVIDER: "${{ inputs.e2e-test-provider }}"
        AUTH_TYPE: "${{ inputs.e2e-test-auth }}"
        E2E_TEST_NAME: "${{ inputs.e2e-test-name }}"
        PROXY_HOST_BPM: ${{ inputs.proxy }}
      shell: bash
      run: |
        set -u;
        echo $PROXY_HOST_BPM
        export NX_CALCULATION_FLAGS=$(echo $NX_CALCULATION_FLAGS | sed "s@'@@g")
        echo "NX_CALCULATION_FLAGS=$NX_CALCULATION_FLAGS" >> $GITHUB_ENV
        bash ./scripts/travis/e2e/e2e.sh "$E2E_TEST_NAME"


    - name: after e2e - upload artifacts to S3
      if: ${{ inputs.upload-to-s3 == 'true' }}
      uses: ./.github/actions/s3/upload
      with:
        artifact-id: '$S3_SMART_RUNNER_PATH/${{ github.run_id }}-${{ github.sha }}.tar.bz2'
        output: "$SMART_RUNNER_DIRECTORY"