name: "e2e"
description: "e2e"
inputs:
  e2e-test-id:
    description: "Test id"
    required: true
  e2e-test-folder:
    description: "Test folder"
    required: true
  e2e-test-provider:
    description: "Test provider"
    required: true
  e2e-test-auth:
    description: "Test auth"
    required: true
  upload-to-s3:
    description: "enable upload to s3 before e2e"
    required: true
  download-from-s3:
    description: "enable download from s3 after e2e"
    required: true
  apa_proxy:
    description: "proxy host"
    required: false
  output:
    description: "Output path"
    required: true
  check-cs-env:
    required: true
    description: check cs env
    default: "false"
  check-ps-env:
    required: true
    description: check ps env
    default: "false"
  check-external-cs-env:  
    required: true
    description: check external cs env
    default: "false"
  check-ps-cloud-env:
    required: true
    description: check ps cloud env
    default: "false"
  local-smart-runner-path:
    required: false
    default: ".protractor-smartrunner"
  e2e-tar-name:
    required: false
    default: e2e.tar.gz
runs:
  using: "composite"
  steps:

    - name: get artifacts from S3
      if: ${{ inputs.download-from-s3 == 'true' }}

    - name: download test from s3 bucket
      shell: bash
      env:
        FULL_REMOTE_PATH: ${{ secrets.S3_DBP_PATH }}/adf/smart-runner/${{ github.run_id}}/${{ inputs.e2e-test-folder }}-${{ inputs.e2e-test-id}}/e2e.tar.gz
      # description: try to download an e2e, if it was built previously
      run: |
        set -u;
        mkdir -p "${{ inputs.local-smart-runner-path }}"
        pip install awscli
        if [[ $(aws s3 ls ${FULL_REMOTE_PATH} > /dev/null; echo $?) -eq 0 ]]; then 
          echo "downloading test files"
          aws s3 cp ${FULL_REMOTE_PATH} .;
          tar xzf $ {{ inputs.e2e-tar-name }};
          ls -lR "${{ inputs.local-smart-runner-path }}/";
          cat "${{ inputs.local-smart-runner-path }}/devel";
        else
          echo "nothing to download";
        fi

    - name: reinstall testing
      shell: bash
      run: nx run testing:bundle

    - name: setup proxy env var
      shell: bash
      run: |
        echo "APA PROXY FLAG: "${{ inputs.apa_proxy }}"
        if [[ -z "${{ inputs.apa_proxy }}" ]]; then
          echo "APA proxy not found. terminating"
          exit 1
        fi
        if [[ -z "${{ inputs.apa_proxy }}" ]]; then
          echo "Custom proxy not set. using default "
          echo "PROXY_HOST_BPM=$PROXY_HOST_BPM" >> $GITHUB_ENV
        else
          echo "Custom proxy set."
          echo "PROXY_HOST_BPM=${E2E_HOST_PROXY}" >> $GITHUB_ENV
        fi


    - name: check EXTERNAL-CS is UP
      shell: bash
      if: ${{ inputs.check-external-cs-env == 'true' }}
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli \
          check-cs-env \
          --host "$EXTERNAL_ACS_HOST" \
          -u "$E2E_USERNAME" \
          -p "$E2E_PASSWORD" || exit 1

    - name: Check CS is UP
      shell: bash
      if: ${{ inputs.check-cs-env == 'true' }}    
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli \
          check-cs-env \
          --host "$E2E_HOST" \
          -u "$E2E_USERNAME" \
          -p "$E2E_PASSWORD" || exit 1
      
    - name: check PS is UP
      shell: bash
      if: ${{ inputs.check-ps-env == 'true' }}
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli init-aps-env \
          --host "$E2E_HOST" \
          -u "$E2E_USERNAME" \
          -p "$E2E_PASSWORD" \
          --license "$AWS_S3_BUCKET_ACTIVITI_LICENSE" || exit 1

    - name: check PS-CLOUD is UP  
      shell: bash
      if: ${{ inputs.check-ps-cloud-env == 'true' }}
      run: |
        set -u;
        ./node_modules/@alfresco/adf-cli/bin/adf-cli init-aae-env \
          --oauth "$E2E_HOST" \
          --host "$E2E_HOST_APA" \
          --modelerUsername "$E2E_MODELER_USERNAME" \
          --modelerPassword "$E2E_MODELER_PASSWORD" \
          --devopsUsername "$E2E_DEVOPS_USERNAME" \
          --devopsPassword "$E2E_DEVOPS_PASSWORD" \
          --clientId 'alfresco' || exit 1

    # - name: run test
    #   env:
    #     FOLDER: "${{ inputs.e2e-test-folder }}"
    #     PROVIDER: "${{ inputs.e2e-test-provider }}"
    #     AUTH_TYPE: "${{ inputs.e2e-test-auth }}"
    #     E2E_TEST_ID: "${{ inputs.e2e-test-id }}"
    #   shell: bash
    #   run: |
    #     set -u;
    #     echo $PROXY_HOST_BPM
    #     export NX_CALCULATION_FLAGS=$(echo $NX_CALCULATION_FLAGS | sed "s@'@@g")
    #     echo "NX_CALCULATION_FLAGS=$NX_CALCULATION_FLAGS" >> $GITHUB_ENV
    #     bash ./scripts/travis/e2e/e2e.sh "$E2E_TEST_ID"

    - name: run test with retries
      env:
        FOLDER: "${{ inputs.e2e-test-folder }}"
        PROVIDER: "${{ inputs.e2e-test-provider }}"
        AUTH_TYPE: "${{ inputs.e2e-test-auth }}"
        E2E_TEST_ID: "${{ inputs.e2e-test-id }}"
      uses: nick-fields/retry@v2.8.0
      with:
        timeout_minutes: 20
        max_attempts: 3
        shell: bash
        command: |
          set -u;
          echo $FOLDER
          echo $PROVIDER
          echo $AUTH_TYPE
          echo $E2E_TEST_ID
          rm -rf e2e-output || true
          export NX_CALCULATION_FLAGS=$(echo $NX_CALCULATION_FLAGS | sed "s@'@@g")
          echo "NX_CALCULATION_FLAGS=$NX_CALCULATION_FLAGS" >> $GITHUB_ENV
          bash ./scripts/travis/e2e/e2e.sh "$E2E_TEST_ID"

    - name: up to s3
      shell: bash
      env:
        FULL_REMOTE_PATH: ${{ secrets.S3_DBP_PATH }}/adf/smart-runner/${{ github.run_id}}/${{ inputs.e2e-test-folder }}-${{ inputs.e2e-test-id}}/e2e.tar.gz

      # description: always upload newer results
      run: |
        set -u;

        mkdir -p "${{ inputs.local-smart-runner-path }}"
        touch "${{ inputs.local-smart-runner-path }}"/devel
        echo "devel" > "${{ inputs.local-smart-runner-path }}/devel"
        ls -lhart "${{ inputs.local-smart-runner-path }}"
        tar czf "$ {{ inputs.e2e-tar-name }}" "${{ inputs.local-smart-runner-path }}"
        pip install awscli
        aws s3 cp "$ {{ inputs.e2e-tar-name }}" $FULL_REMOTE_PATH
        rm -rf  "${{ inputs.local-smart-runner-path }}"
        rm -rf  "$ {{ inputs.e2e-tar-name }}"

    - name: upload 2e2 reports
      uses: actions/upload-artifact@v3
      continue-on-error: true
      with:
        path: e2e-output/
        name: dist-${{ github.ref_name }}-${{ inputs.e2e-test-id }}